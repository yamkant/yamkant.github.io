<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-08-11T10:19:59+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Yam’s Dev Logs</title><subtitle>An amazing website.</subtitle><author><name>Yeham Kim</name></author><entry><title type="html">[Study] Load Balancer</title><link href="http://localhost:4000/study/study-load-balancer/" rel="alternate" type="text/html" title="[Study] Load Balancer" /><published>2023-08-11T00:05:07+09:00</published><updated>2023-08-11T00:05:07+09:00</updated><id>http://localhost:4000/study/study-load-balancer</id><content type="html" xml:base="http://localhost:4000/study/study-load-balancer/"><![CDATA[<h2 id="작성-계기">작성 계기</h2>
<ul>
  <li>면접질문 중, nginx를 사용한 로드밸런싱이 OSI Layer의 어떤 계층에서 일어나는지에<br />
대한 질문에 대해 대답하지 못해, 공부를 시작하게 되었습니다.</li>
</ul>

<h3 id="로드밸런서">로드밸런서</h3>
<ul>
  <li>트래픽을 받아서 여러 대의 서버에 분산시키는 하드웨어/소프트웨어를 의미합니다.</li>
  <li>부하 분산에는 L4 Load Balancer와 L7 Load Balancer가 사용됩니다.</li>
</ul>

<h3 id="l4-load-balancer">L4 Load Balancer</h3>
<ul>
  <li>IP Port를 활용하여 서버부하분산을 하는 것을 의미합니다. 적합한 server IP와 Port를 목적지로 하는 요청에 따라 부하를 분산합니다.</li>
  <li>로드밸런싱의 기준점이 IP와 Port이기 때문에, TCP/UDP의 Header를 분석하여 로드밸런싱에 활용하지는 않습니다. 따라서, 프로토콜들의 특성으로 인한 행동을 제어하는 편입니다.</li>
  <li>클라이언트에서 로드밸런서로 요청을 보낼 때, 최적의 서버로 요청을 전송하고, 그 결과를 클라이언트에게 전달합니다.</li>
  <li>요청 패킷에 대해 NAT도 수행하여 기록된 대상 IP 주소를 자체에서 선택한 컨텐츠 서버의 IP 주소로 변경합니다.</li>
</ul>

<h3 id="l7-load-balancer">L7 Load Balancer</h3>
<ul>
  <li>L7 Load Balancer는 URL, Payload, HTTP Header, Cookie 등의 내용을 기준으로 부하를 분산합니다. 따라서, 컨텐츠 기반 스위칭이라고도 말합니다.</li>
  <li>해당 계층에서의 로드밸런싱은 전송되는 정보의 양이 더 많기 때문에, L4 에서보다 비용이 더 많이 들게 되지만, 전체 효율성은 더욱 높습니다.</li>
  <li>클라이언트가 요청하는 데이터의 유형을 결정할 수 있기 때문입니다. 따라서, 모든 서버에 동일한 데이터를 복제할 필요가 없습니다.</li>
  <li>L4에서와 같이 트래픽을 패킷단위로 관리하는 것이 아닌, 요청과 응답을 전체적으로 읽고 관리할 숫 있습니다.</li>
</ul>

<h2 id="osiopen-systems-interconnection-참조-모델">OSI(Open Systems Interconnection) 참조 모델</h2>
<p><strong>7 계층 - Application Layer</strong></p>
<ul>
  <li>사용자에게 보이는 부분으로, 최종 사용자에게 가장 가까운 계층으로, 사용자와 직접적으로 상호작용합니다.</li>
  <li>애플리케이션 목적에 맞는 통신 방법을 제공합니다.</li>
  <li>HTTP, DNS, SMTP, FTP등의 대표적인 프로토콜이 해당 레이어에 속합니다.</li>
</ul>

<p><strong>6 계층 - Presentation Layer</strong></p>
<ul>
  <li>애플리케이션 통신에서 메시지 포맷을 관리하는 계층입니다.</li>
  <li>데이터를 안전하게 전송하기 위해 암호화, 복호화하여 소통합니다.</li>
</ul>

<p><strong>5 게층 - Session Layer</strong></p>
<ul>
  <li>애플리케이션 통신에서 세션을 관리하는 계층입니다.</li>
  <li>예시로 RPC(remote procedure call)가 있습니다.</li>
</ul>

<p><strong>4 계층 - Transport Layer</strong></p>
<ul>
  <li>애플리케이션 통신을 담당하며, 실제로 목적지 애필리케이션으로 데이터를 전송합니다.</li>
  <li>TCP, UDP 프로토콜을 사용합니다.</li>
  <li>TCP: 안정적이고 신뢰할 수 있는 데이터 전송을 보장합니다.</li>
  <li>UDP: 데이터가 중간에 유실되거나 순서가 꼬일 수 있지만, 데이터를 무조건 전송합니다.</li>
  <li>Network Layer의 기능을 사용하여 데이터를 전송합니다.</li>
</ul>

<p><strong>3 계층 - Network Layer</strong></p>
<ul>
  <li>호스트 간의 통신을 담당합니다. (IP 프로토콜)</li>
  <li>목적지 호스트로 데이터를 전송합니다.</li>
  <li>네트워크 간의 최적의 경로를 결정합니다.</li>
  <li>Data Link Layer의 기능을 사용하여 기능을 구현합니다.</li>
</ul>

<p><strong>2 계층 - Data Link Layer</strong></p>
<ul>
  <li>IP 주소가 아닌 MAC 주소 기반으로 통신합니다.</li>
  <li>ARP: IP 주소를 MAC 주소로 변환하는 프로토콜입니다.</li>
</ul>

<p><strong>1 계층 - Physical Layer</strong></p>
<ul>
  <li>
    <p>bits 단위로 데이터를 전송합니다.</p>
  </li>
  <li>서로 다른 컴퓨터가 통신을 할 떄 역시, 7계층을 기반으로 통신합니다.</li>
  <li>라우터는 Network Layer, Data Link Layer, Physical Layer에 있는 프로토콜을 구현합니다.</li>
</ul>

<h2 id="참고">참고</h2>
<h2 id="amazon-elb">Amazon ELB</h2>
<ul>
  <li>AWS가 제공하는 로드 밸런서로, 집중되는 트래픽을 서버/네트워크에 분배하는 부하 분산 장치입니다.</li>
</ul>

<p><strong>ALB</strong></p>
<ul>
  <li>HTTP/HTTPS 프로토콜의 헤더를 보고 적절한 패킷으로 전송하므로, OSI 모형의 애플리케이션 계층(7계층)에서 동작합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">IP 주소 + 포트번호 + 패킷내용</code> 정보를 통해 스위칭합니다.</li>
  <li>L7단에서 지원하기 때문에 인스턴스와 로드 밸런서 사이에서 SSL이 적용된 암호화 통신이 가능합니다.</li>
  <li>IP 주소가 변동될 수 있기 때문에, Client는 DNS 주소로 접근하는 것이 좋습니다.<br />
(따라서, EIP를 ALB에 설정해두는 것이 좋습니다.)</li>
</ul>

<p><strong>NLB</strong></p>
<ul>
  <li>TCP/IP 프로토콜의 헤더를 보고 적절한 패킷으로 전송하므로, OSI 모형의 전송 계층(4계층)에서 동작합니다.<br />
(ALB보다 낮은 계층에서 동작하기 때문에 속도가 빠릅니다.)</li>
  <li><code class="language-plaintext highlighter-rouge">IP 주소 + 포트번호</code> 정보를 통해고 스위칭합니다.</li>
  <li>EIP를 이용할 수 있으며, DNS와 IP 주소 모두 사용 가능합니다. (SSL은 사용 불가능)</li>
</ul>]]></content><author><name>Yeham Kim</name></author><category term="Study" /><summary type="html"><![CDATA[작성 계기 면접질문 중, nginx를 사용한 로드밸런싱이 OSI Layer의 어떤 계층에서 일어나는지에 대한 질문에 대해 대답하지 못해, 공부를 시작하게 되었습니다.]]></summary></entry><entry><title type="html">[Study] Python Clean Code - Unittest</title><link href="http://localhost:4000/study/study-cleancode-unittest/" rel="alternate" type="text/html" title="[Study] Python Clean Code - Unittest" /><published>2023-07-20T00:05:07+09:00</published><updated>2023-07-20T00:05:07+09:00</updated><id>http://localhost:4000/study/study-cleancode-unittest</id><content type="html" xml:base="http://localhost:4000/study/study-cleancode-unittest/"><![CDATA[<h2 id="unit-test">Unit Test</h2>
<ul>
  <li>단위 테스트란, 다른 코드의 일부분이 유효한지를 검사하는 코드입니다.</li>
  <li>단위 테스트는 소프트웨어의 핵심이 되는 필수적인 기능으로서 일반 비즈니스 로직과 동일한 수준으로 다루어져야합니다.</li>
  <li>격리: 단위 테스트는 독립적이며, 비즈니스 로직에만 집중합니다. 이전 상태에 관계없이 임의 순서로 실행될 수 있어야합니다.</li>
  <li>성능: 신속하게 실행되어야 하며, 반복적으로 여러 번 실행될 수 있어야합니다.</li>
  <li>자체 검증: 실행만으로 결과를 결정할 수 있어야 하며, 이를 위한 추가 단계(종속성)가 없어야합니다.</li>
</ul>

<p><strong>추가</strong></p>
<ul>
  <li>통합 테스트: 한 번에 여러 컴포넌트를 테스트하여, 종합적으로 예상대로 잘 동작하는지 검증합니다.</li>
  <li>통합 테스트의 경우, 부작용이나 격리를 고려하지 않은 채로, HTTP 요청을 하거나 데이터베이스에 연결하는 등의 작업이 수행 가능합니다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">logging</span>
<span class="kn">import</span> <span class="n">unittest</span>
<span class="kn">from</span> <span class="n">unittest.mock</span> <span class="kn">import</span> <span class="n">Mock</span>
<span class="kn">from</span> <span class="n">enum</span> <span class="kn">import</span> <span class="n">Enum</span>

<span class="n">logger</span> <span class="o">=</span> <span class="n">logging</span><span class="p">.</span><span class="nf">getLogger</span><span class="p">(</span><span class="sh">"</span><span class="s">skeleton</span><span class="sh">"</span><span class="p">)</span>
<span class="n">logger</span><span class="p">.</span><span class="nf">setLevel</span><span class="p">(</span><span class="n">logging</span><span class="p">.</span><span class="n">INFO</span><span class="p">)</span>
<span class="n">logger</span><span class="p">.</span><span class="nf">addHandler</span><span class="p">(</span><span class="n">logging</span><span class="p">.</span><span class="nc">StreamHandler</span><span class="p">())</span>

<span class="k">class</span> <span class="nc">MergeRequestException</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="k">class</span> <span class="nc">MergeRequestStatus</span><span class="p">(</span><span class="n">Enum</span><span class="p">):</span>
    <span class="n">APPROVED</span> <span class="o">=</span> <span class="sh">"</span><span class="s">approved</span><span class="sh">"</span>
    <span class="n">REJECTED</span> <span class="o">=</span> <span class="sh">"</span><span class="s">rejected</span><span class="sh">"</span>
    <span class="n">PENDING</span> <span class="o">=</span> <span class="sh">"</span><span class="s">pending</span><span class="sh">"</span>
    <span class="n">OPEN</span> <span class="o">=</span> <span class="sh">"</span><span class="s">open</span><span class="sh">"</span>
    <span class="n">CLOSED</span> <span class="o">=</span> <span class="sh">"</span><span class="s">closed</span><span class="sh">"</span>

<span class="k">class</span> <span class="nc">MergeRequest</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_context</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">upvotes</span><span class="sh">"</span><span class="p">:</span> <span class="nf">set</span><span class="p">(),</span>
            <span class="sh">"</span><span class="s">downvotes</span><span class="sh">"</span><span class="p">:</span> <span class="nf">set</span><span class="p">(),</span>
        <span class="p">}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_status</span> <span class="o">=</span> <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">OPEN</span>
    
    <span class="k">def</span> <span class="nf">close</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_status</span> <span class="o">=</span> <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">CLOSED</span>
    
    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">status</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">_status</span> <span class="o">==</span> <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">CLOSED</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_status</span>

        <span class="k">return</span> <span class="nc">AcceptanceThreshold</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_context</span><span class="p">).</span><span class="nf">status</span><span class="p">()</span>
    
    <span class="k">def</span> <span class="nf">_cannot_vote_if_closed</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">_status</span> <span class="o">==</span> <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">CLOSED</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">MergeRequestException</span><span class="p">(</span><span class="sh">"</span><span class="s">종료된 머지 리퀘스트에 투표할 수 없음</span><span class="sh">"</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">upvote</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">by_user</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_cannot_vote_if_closed</span><span class="p">()</span>

        <span class="n">self</span><span class="p">.</span><span class="n">_context</span><span class="p">[</span><span class="sh">"</span><span class="s">downvotes</span><span class="sh">"</span><span class="p">].</span><span class="nf">discard</span><span class="p">(</span><span class="n">by_user</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_context</span><span class="p">[</span><span class="sh">"</span><span class="s">upvotes</span><span class="sh">"</span><span class="p">].</span><span class="nf">add</span><span class="p">(</span><span class="n">by_user</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">downvote</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">by_user</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_cannot_vote_if_closed</span><span class="p">()</span>

        <span class="n">self</span><span class="p">.</span><span class="n">_context</span><span class="p">[</span><span class="sh">"</span><span class="s">upvotes</span><span class="sh">"</span><span class="p">].</span><span class="nf">discard</span><span class="p">(</span><span class="n">by_user</span><span class="p">)</span>        
        <span class="n">self</span><span class="p">.</span><span class="n">_context</span><span class="p">[</span><span class="sh">"</span><span class="s">downvotes</span><span class="sh">"</span><span class="p">].</span><span class="nf">add</span><span class="p">(</span><span class="n">by_user</span><span class="p">)</span>
    
<span class="k">class</span> <span class="nc">AcceptanceThreshold</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">merge_request_context</span><span class="p">:</span> <span class="nb">dict</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_context</span> <span class="o">=</span> <span class="n">merge_request_context</span>

    <span class="k">def</span> <span class="nf">status</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">_context</span><span class="p">[</span><span class="sh">'</span><span class="s">downvotes</span><span class="sh">'</span><span class="p">]:</span>
            <span class="k">return</span> <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">REJECTED</span>
        <span class="k">elif</span> <span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_context</span><span class="p">[</span><span class="sh">"</span><span class="s">upvotes</span><span class="sh">"</span><span class="p">])</span> <span class="o">&gt;=</span> <span class="mi">2</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">APPROVED</span>
        <span class="k">return</span> <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">PENDING</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">unittest</span><span class="p">.</span><span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>
<ul>
  <li>위의 클래스 및 테스터는 머지 상황에서, 두 명 이상의 개발자가 upvote를 하거나 한 명이라도 downvote를 하면 머지를 실패하는 경우에 대한 프로그램입니다.</li>
  <li><code class="language-plaintext highlighter-rouge">AcceptanceThreshold</code>를 최소 단위로 분리하여 테스트를 진행하고, <code class="language-plaintext highlighter-rouge">MergeRequest</code> 클래스에서 이를 사용하는 방식입니다. (리팩토링 전에 <code class="language-plaintext highlighter-rouge">AcceptanceThreshold</code>의 status 메서드가 <code class="language-plaintext highlighter-rouge">MergeRequest</code> 메서드였음)</li>
</ul>

<p><strong><code class="language-plaintext highlighter-rouge">unittest</code> 모듈을 사용한 테스트 케이스</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TestMergeRequestStatus</span><span class="p">(</span><span class="n">unittest</span><span class="p">.</span><span class="n">TestCase</span><span class="p">):</span>
    <span class="c1"># NOTE: 한 명이 downvote하여, 머지 리퀘스트가 거부된 상황입니다.
</span>    <span class="k">def</span> <span class="nf">test_simple_rejected</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">merge_request</span> <span class="o">=</span> <span class="nc">MergeRequest</span><span class="p">()</span>
        <span class="n">merge_request</span><span class="p">.</span><span class="nf">downvote</span><span class="p">(</span><span class="sh">"</span><span class="s">maintainer</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span><span class="n">merge_request</span><span class="p">.</span><span class="n">status</span><span class="p">,</span> <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">REJECTED</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">test_just_created_is_pending</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span><span class="nc">MergeRequest</span><span class="p">().</span><span class="n">status</span><span class="p">,</span> <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">PENDING</span><span class="p">)</span>
    
    <span class="c1"># NOTE: 한 명만 upvote를 한 상황에서는 다음 투표를 대기합니다.
</span>    <span class="k">def</span> <span class="nf">test_pending_awaiting_review</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">merge_request</span> <span class="o">=</span> <span class="nc">MergeRequest</span><span class="p">()</span>
        <span class="n">merge_request</span><span class="p">.</span><span class="nf">upvote</span><span class="p">(</span><span class="sh">"</span><span class="s">core-dev</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span><span class="n">merge_request</span><span class="p">.</span><span class="n">status</span><span class="p">,</span> <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">PENDING</span><span class="p">)</span>

    <span class="c1"># NOTE: 두 명 이상이 upvote를 수행하면 승인됩니다.
</span>    <span class="k">def</span> <span class="nf">test_approved</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">merge_request</span> <span class="o">=</span> <span class="nc">MergeRequest</span><span class="p">()</span>
        <span class="n">merge_request</span><span class="p">.</span><span class="nf">upvote</span><span class="p">(</span><span class="sh">"</span><span class="s">dev1</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">merge_request</span><span class="p">.</span><span class="nf">upvote</span><span class="p">(</span><span class="sh">"</span><span class="s">dev2</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span><span class="n">merge_request</span><span class="p">.</span><span class="n">status</span><span class="p">,</span> <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">APPROVED</span><span class="p">)</span>

    <span class="c1"># NOTE: 투표함이 닫히면, 더이상 투표를 할 수 없습니다.
</span>    <span class="k">def</span> <span class="nf">test_cannot_upvote_on_closed_merge_request</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">merge_request</span> <span class="o">=</span> <span class="nc">MergeRequest</span><span class="p">()</span>
        <span class="n">merge_request</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">assertRaises</span><span class="p">(</span>
            <span class="n">MergeRequestException</span><span class="p">,</span> <span class="n">merge_request</span><span class="p">.</span><span class="n">upvote</span><span class="p">,</span> <span class="sh">"</span><span class="s">dev1</span><span class="sh">"</span>
        <span class="p">)</span>
    
    <span class="c1"># NOTE: 투표함이 닫히면, 더이상 투표를 할 수 없습니다.
</span>    <span class="k">def</span> <span class="nf">test_cannot_downvote_on_closed_merge_request</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">merge_request</span> <span class="o">=</span> <span class="nc">MergeRequest</span><span class="p">()</span>
        <span class="n">merge_request</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">assertRaisesRegex</span><span class="p">(</span>
            <span class="n">MergeRequestException</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">종료된 머지 리퀘스트에 투표할 수 없음</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">merge_request</span><span class="p">.</span><span class="n">downvote</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">dev1</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">)</span>

<span class="k">class</span> <span class="nc">TestAcceptanceThreshold</span><span class="p">(</span><span class="n">unittest</span><span class="p">.</span><span class="n">TestCase</span><span class="p">):</span>
    <span class="c1"># NOTE: 테스트 전반에 걸쳐 사용될 데이터 픽스처를 정의합니다.
</span>    <span class="k">def</span> <span class="nf">setUp</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">fixture_data</span> <span class="o">=</span> <span class="p">(</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">downvotes</span><span class="sh">"</span><span class="p">:</span> <span class="nf">set</span><span class="p">(),</span> <span class="sh">"</span><span class="s">upvotes</span><span class="sh">"</span><span class="p">:</span> <span class="nf">set</span><span class="p">()},</span>
            <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">PENDING</span>
        <span class="p">),</span> <span class="p">(</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">downvotes</span><span class="sh">"</span><span class="p">:</span> <span class="nf">set</span><span class="p">(),</span> <span class="sh">"</span><span class="s">upvotes</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">dev1</span><span class="sh">"</span><span class="p">}},</span>
            <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">PENDING</span>
        <span class="p">),</span> <span class="p">(</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">downvotes</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">dev1</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">upvotes</span><span class="sh">"</span><span class="p">:</span> <span class="nf">set</span><span class="p">()},</span>
            <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">REJECTED</span>
        <span class="p">),</span> <span class="p">(</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">downvotes</span><span class="sh">"</span><span class="p">:</span> <span class="nf">set</span><span class="p">(),</span> <span class="sh">"</span><span class="s">upvotes</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">dev1</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">dev2</span><span class="sh">"</span><span class="p">}},</span>
            <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">APPROVED</span>
        <span class="p">)</span>

    <span class="k">def</span> <span class="nf">test_status_resolution</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">context</span><span class="p">,</span> <span class="n">expected</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">fixture_data</span><span class="p">:</span>
            <span class="c1"># NOTE: subTest: 호출되는 테스트 조건을 표시하는데 사용됩니다.
</span>            <span class="c1">#       반복 중 하나가 실패하면, subTest에 전달된 변수의 값을 나타냅니다.
</span>            <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="nf">subTest</span><span class="p">(</span><span class="n">context</span><span class="o">=</span><span class="n">context</span><span class="p">):</span>
                <span class="n">status</span> <span class="o">=</span> <span class="nc">AcceptanceThreshold</span><span class="p">(</span><span class="n">context</span><span class="p">).</span><span class="nf">status</span><span class="p">()</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span><span class="n">status</span><span class="p">,</span> <span class="n">expected</span><span class="p">)</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">unittest</code> 모듈을 사용하는 경우, <code class="language-plaintext highlighter-rouge">TestCase</code> 클래스를 상속받는 테스터 클래스를 생성합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">Exception</code> 반환을 테스트하기 위해 <code class="language-plaintext highlighter-rouge">unittest.TestCase.assertRaises</code>, <code class="language-plaintext highlighter-rouge">unittest.TestCase.assertRaisesRegex</code> 메서드를 사용할 수 있습니다.</li>
  <li>for 루프를 이용하면, 테스트에서 오류가 발생한 시점에서 멈추게 되지만, <code class="language-plaintext highlighter-rouge">subTest</code> 메서드를 사용하면 모든 케이스에 대해 테스트를 마치고, 실패 케이스들을 모두 알 수 있습니다.</li>
</ul>

<p><strong><code class="language-plaintext highlighter-rouge">pytest</code> 모듈을 사용한 테스트 케이스</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># NOTE: MergeRequestStatus
</span><span class="k">def</span> <span class="nf">test_simple_rejected</span><span class="p">():</span>
    <span class="n">merge_request</span> <span class="o">=</span> <span class="nc">MergeRequest</span><span class="p">()</span>
    <span class="n">merge_request</span><span class="p">.</span><span class="nf">downvote</span><span class="p">(</span><span class="sh">"</span><span class="s">maintainer</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">assert</span> <span class="n">merge_request</span><span class="p">.</span><span class="n">status</span> <span class="o">==</span> <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">REJECTED</span>

<span class="k">def</span> <span class="nf">test_just_created_is_pending</span><span class="p">():</span>
    <span class="k">assert</span> <span class="nc">MergeRequest</span><span class="p">().</span><span class="n">status</span> <span class="o">==</span> <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">PENDING</span>

<span class="k">def</span> <span class="nf">test_pending_awaiting_review</span><span class="p">():</span>
    <span class="n">merge_request</span> <span class="o">=</span> <span class="nc">MergeRequest</span><span class="p">()</span>
    <span class="n">merge_request</span><span class="p">.</span><span class="nf">upvote</span><span class="p">(</span><span class="sh">"</span><span class="s">core-dev</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">assert</span> <span class="n">merge_request</span><span class="p">.</span><span class="n">status</span> <span class="o">==</span> <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">PENDING</span>

<span class="k">def</span> <span class="nf">test_approved</span><span class="p">():</span>
    <span class="n">merge_request</span> <span class="o">=</span> <span class="nc">MergeRequest</span><span class="p">()</span>
    <span class="n">merge_request</span><span class="p">.</span><span class="nf">upvote</span><span class="p">(</span><span class="sh">"</span><span class="s">dev1</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">merge_request</span><span class="p">.</span><span class="nf">upvote</span><span class="p">(</span><span class="sh">"</span><span class="s">dev2</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">assert</span> <span class="n">merge_request</span><span class="p">.</span><span class="n">status</span> <span class="o">==</span> <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">APPROVED</span>

<span class="k">def</span> <span class="nf">test_invalid_types</span><span class="p">():</span>
    <span class="n">merge_request</span> <span class="o">=</span> <span class="nc">MergeRequest</span><span class="p">()</span>
    <span class="n">pytest</span><span class="p">.</span><span class="nf">raises</span><span class="p">(</span><span class="nb">TypeError</span><span class="p">,</span> <span class="n">merge_request</span><span class="p">.</span><span class="n">upvote</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">invalid-object</span><span class="sh">"</span><span class="p">})</span>

<span class="k">def</span> <span class="nf">test_cannot_upvote_on_closed_merge_request</span><span class="p">():</span>
    <span class="n">merge_request</span> <span class="o">=</span> <span class="nc">MergeRequest</span><span class="p">()</span>
    <span class="n">merge_request</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
    <span class="n">pytest</span><span class="p">.</span><span class="nf">raises</span><span class="p">(</span><span class="n">MergeRequestException</span><span class="p">,</span> <span class="n">merge_request</span><span class="p">.</span><span class="n">upvote</span><span class="p">,</span> <span class="sh">"</span><span class="s">dev1</span><span class="sh">"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">test_cannot_downvote_on_closed_merge_request</span><span class="p">():</span>
    <span class="n">merge_request</span> <span class="o">=</span> <span class="nc">MergeRequest</span><span class="p">()</span>
    <span class="n">merge_request</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
    <span class="k">with</span> <span class="n">pytest</span><span class="p">.</span><span class="nf">raises</span><span class="p">(</span>
        <span class="n">MergeRequestException</span><span class="p">,</span>
        <span class="n">match</span><span class="o">=</span><span class="sh">"</span><span class="s">종료된 머지 리퀘스트에 투표할 수 없음</span><span class="sh">"</span>
    <span class="p">):</span>
        <span class="n">merge_request</span><span class="p">.</span><span class="nf">downvote</span><span class="p">(</span><span class="sh">"</span><span class="s">dev1</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># NOTE: AcceptanceThreshold
</span><span class="nd">@pytest.mark.parametrize</span><span class="p">(</span><span class="sh">"</span><span class="s">context, expected_status</span><span class="sh">"</span><span class="p">,</span> <span class="p">(</span>
    <span class="p">(</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">downvotes</span><span class="sh">"</span><span class="p">:</span> <span class="nf">set</span><span class="p">(),</span> <span class="sh">"</span><span class="s">upvotes</span><span class="sh">"</span><span class="p">:</span> <span class="nf">set</span><span class="p">()},</span>
        <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">PENDING</span>
    <span class="p">),</span> <span class="p">(</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">downvotes</span><span class="sh">"</span><span class="p">:</span> <span class="nf">set</span><span class="p">(),</span> <span class="sh">"</span><span class="s">upvotes</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">dev1</span><span class="sh">"</span><span class="p">}},</span>
        <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">PENDING</span>
    <span class="p">),</span> <span class="p">(</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">downvotes</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">dev1</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">upvotes</span><span class="sh">"</span><span class="p">:</span> <span class="nf">set</span><span class="p">()},</span>
        <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">REJECTED</span>
    <span class="p">),</span> <span class="p">(</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">downvotes</span><span class="sh">"</span><span class="p">:</span> <span class="nf">set</span><span class="p">(),</span> <span class="sh">"</span><span class="s">upvotes</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">dev1</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">dev2</span><span class="sh">"</span><span class="p">}},</span>
        <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">APPROVED</span>
    <span class="p">)</span>
<span class="p">))</span>
<span class="k">def</span> <span class="nf">test_acceptance_threshold_status_resolution</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">expected_status</span><span class="p">):</span>
    <span class="k">assert</span> <span class="nc">AcceptanceThreshold</span><span class="p">(</span><span class="n">context</span><span class="p">).</span><span class="nf">status</span><span class="p">()</span> <span class="o">==</span> <span class="n">expected_status</span>
</code></pre></div></div>
<ul>
  <li>pytest에서는 <code class="language-plaintext highlighter-rouge">assert</code> 비교만으로 단위 테스트를 식별하고 결과를 확인하는 것이 가능합니다.</li>
  <li>또한, unittest로 작성한 테스트까지 실행하기 때문에 호환성이 좋습니다.</li>
  <li><code class="language-plaintext highlighter-rouge">pytest.raises</code>는 <code class="language-plaintext highlighter-rouge">unittest.TestCase.assertRaises</code>와 동일합니다. <code class="language-plaintext highlighter-rouge">assertRaises</code>의 경우에는 위와 같이 <code class="language-plaintext highlighter-rouge">match</code> 파라미터를 사용하여 구현할 수 있습니다.</li>
  <li><code class="language-plaintext highlighter-rouge">unittest.TestCase.subTest</code>에서 반복적으로 테스트했다면, pytest에서는 데코레이터를 통해 수행할 수 있습니다. 첫 번째 파라미터는 파라미터의 이름을, 두 번쨰 파라미터는 테스트하고자 하는 값들의 튜플입니다.</li>
</ul>

<h3 id="mock-객체">Mock 객체</h3>
<ul>
  <li>시스템이 서비스 되기 위해서는 외부 서비스(DB, Storage, 외부 API, 클라우드)를 사용하게 됩니다.</li>
  <li>외부 서비스를 사용하며 발생하는 부작용을 최소화하기 위해 외부 요소를 분리하고, 인터페이스를 사용하여 추상화해야 합니다.</li>
  <li>Mock 객체는 원하지 않는 부작용으로부터 테스트 코드를 보호하는 방법 중 하나입니다.</li>
  <li>통햅테스트에서는 외부 서비스에 대한 테스트까지를 포함하지만, 단위 테스트에서는 모킹하는 것만으로 원하는 기능 위주로 테스트해야합니다.</li>
</ul>

<p><strong>Patch, Mock 사용시 주의사항</strong></p>
<ul>
  <li>간단한 테스트를 작성하기 위해 다양한 몽키패치(런타임 중 코드를 수정하는 것)과 모킹을 해야 한다면, 코드가 좋지 않다는 신호입니다.</li>
  <li>Patch란 import 중에 경로를 지정했던 원본 코드를 Mock 객체로 대체하는 것으로, 런타임 중에 코드가 바뀌고 처음에 있던 원래 코드와의 연결이 끊어집니다.</li>
</ul>

<h3 id="mock-사용">Mock 사용</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">unittest.mock</span> <span class="kn">import</span> <span class="n">MagicMock</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">List</span><span class="p">,</span> <span class="n">Dict</span>

<span class="k">class</span> <span class="nc">GitBranch</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">commits</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">]):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_commits</span> <span class="o">=</span> <span class="p">{</span> <span class="n">c</span><span class="p">[</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">]:</span> <span class="n">c</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">commits</span> <span class="p">}</span>
    
    <span class="k">def</span> <span class="nf">__getitem__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">commit_id</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_commits</span><span class="p">[</span><span class="n">commit_id</span><span class="p">]</span>
    
    <span class="k">def</span> <span class="nf">__len__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_commits</span><span class="p">)</span>
    
<span class="k">def</span> <span class="nf">author_by_id</span><span class="p">(</span><span class="n">commit_id</span><span class="p">,</span> <span class="n">branch</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">branch</span><span class="p">[</span><span class="n">commit_id</span><span class="p">][</span><span class="sh">"</span><span class="s">author</span><span class="sh">"</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">test_find_commit</span><span class="p">():</span>
    <span class="n">branch</span> <span class="o">=</span> <span class="nc">GitBranch</span><span class="p">([{</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">123</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">author</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">dev1</span><span class="sh">"</span><span class="p">}])</span>
    <span class="k">assert</span> <span class="nf">author_by_id</span><span class="p">(</span><span class="sh">"</span><span class="s">123</span><span class="sh">"</span><span class="p">,</span> <span class="n">branch</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">dev1</span><span class="sh">"</span>

<span class="k">def</span> <span class="nf">test_find_any</span><span class="p">():</span>
    <span class="n">mbranch</span> <span class="o">=</span> <span class="nc">MagicMock</span><span class="p">()</span>
    <span class="n">mbranch</span><span class="p">.</span><span class="n">__getitem__</span><span class="p">.</span><span class="n">return_value</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">author</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">test</span><span class="sh">"</span><span class="p">}</span>
    <span class="k">assert</span> <span class="nf">author_by_id</span><span class="p">(</span><span class="sh">"</span><span class="s">123</span><span class="sh">"</span><span class="p">,</span> <span class="n">mbranch</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">test</span><span class="sh">"</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">MagicMock</code>을 사용해서 <code class="language-plaintext highlighter-rouge">GitBranch</code> 객체를 모킹합니다. 이 떄, <code class="language-plaintext highlighter-rouge">GitBranch</code>는 매직메서드를 사용하기 때문에 <code class="language-plaintext highlighter-rouge">MagicMock</code>을 이용합니다.</li>
  <li>이 때, <code class="language-plaintext highlighter-rouge">mbarnch</code>는 <code class="language-plaintext highlighter-rouge">__getitem__</code>에 대한 반환 값만 지정했기 때문에, <code class="language-plaintext highlighter-rouge">commit_id</code>에 상관없이 출력값만 테스트합니다.</li>
</ul>

<h3 id="테스트-더블-사용-예시">테스트 더블 사용 예시</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># mock_2.py
</span><span class="kn">from</span> <span class="n">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>

<span class="kn">import</span> <span class="n">requests</span>
<span class="kn">from</span> <span class="n">constants</span> <span class="kn">import</span> <span class="n">STATUS_ENDPOINT</span>

<span class="k">class</span> <span class="nc">BuildStatus</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Continuous Integration  도구에서의 머지 리퀘스트 상태</span><span class="sh">"""</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">build_date</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">datetime</span><span class="p">.</span><span class="nf">utcnow</span><span class="p">().</span><span class="nf">isoformat</span><span class="p">()</span>
    
    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">notify</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">merge_request_id</span><span class="p">,</span> <span class="n">status</span><span class="p">):</span>
        <span class="n">build_status</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="n">merge_request_id</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="n">status</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">built_at</span><span class="sh">"</span><span class="p">:</span> <span class="n">cls</span><span class="p">.</span><span class="nf">build_date</span><span class="p">(),</span>
        <span class="p">}</span>
        <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="n">STATUS_ENDPOINT</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">build_status</span><span class="p">)</span>
        <span class="n">response</span><span class="p">.</span><span class="nf">raise_for_status</span><span class="p">()</span> <span class="c1"># 200이 아닐 경우에 예외 발생
</span>        <span class="k">return</span> <span class="n">response</span>
</code></pre></div></div>
<ul>
  <li>constants.py 모듈에는 <code class="language-plaintext highlighter-rouge">STATUS_ENDPOINT</code>를 test@example.com으로 설정해뒀습니다.</li>
  <li><code class="language-plaintext highlighter-rouge">notify</code> 메서드는 원하는 endpoint에 post 요청한 결과값을 받아옵니다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">unittest</span> <span class="kn">import</span> <span class="n">mock</span>

<span class="kn">from</span> <span class="n">constants</span> <span class="kn">import</span> <span class="n">STATUS_ENDPOINT</span>
<span class="kn">from</span> <span class="n">mock_2</span> <span class="kn">import</span> <span class="n">BuildStatus</span>

<span class="nd">@mock.patch</span><span class="p">(</span><span class="sh">"</span><span class="s">mock_2.requests</span><span class="sh">"</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">test_build_notification_sent</span><span class="p">(</span><span class="n">mock_requests</span><span class="p">):</span>
    <span class="n">build_date</span> <span class="o">=</span> <span class="sh">"</span><span class="s">2023-01-01T00:00:01</span><span class="sh">"</span> <span class="c1"># 반환값으로 사용할 build_date
</span>    <span class="k">with</span> <span class="n">mock</span><span class="p">.</span><span class="nf">patch</span><span class="p">(</span><span class="sh">"</span><span class="s">mock_2.BuildStatus.build_date</span><span class="sh">"</span><span class="p">,</span> <span class="n">return_value</span><span class="o">=</span><span class="n">build_date</span><span class="p">):</span>
        <span class="n">BuildStatus</span><span class="p">.</span><span class="nf">notify</span><span class="p">(</span><span class="mi">123</span><span class="p">,</span> <span class="sh">"</span><span class="s">OK</span><span class="sh">"</span><span class="p">)</span>
    
    <span class="n">expected_payload</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span> <span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">OK</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">built_at</span><span class="sh">"</span><span class="p">:</span> <span class="n">build_date</span><span class="p">}</span>
    <span class="n">mock_requests</span><span class="p">.</span><span class="n">post</span><span class="p">.</span><span class="nf">assert_called_with</span><span class="p">(</span>
        <span class="n">STATUS_ENDPOINT</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">expected_payload</span>
    <span class="p">)</span>
</code></pre></div></div>
<ul>
  <li>데코레이터는 테스트 함수 내에서 mock_2.requests를 호출하면 함수의 인자인 mock_requests라는 객체가 mock을 대신할 것이라고 알려줍니다.</li>
  <li><code class="language-plaintext highlighter-rouge">mock_2.BuildStatus.build_date</code> 메서드에 대한 반환값으로는 테스터 내에서 지정해준 <code class="language-plaintext highlighter-rouge">build_date</code>로 사용하도록 context를 구성하고, <code class="language-plaintext highlighter-rouge">notify</code> 메서드에 <code class="language-plaintext highlighter-rouge">id</code>와 <code class="language-plaintext highlighter-rouge">status</code>를 인자로 넣습니다.</li>
  <li><code class="language-plaintext highlighter-rouge">mock_requests</code>는 post 요청이 될 때 어떤 인자로 호출되었는지 테스트합니다.</li>
</ul>

<h3 id="리팩토링">리팩토링</h3>
<ul>
  <li>위와 같이 설계하는 경우, <code class="language-plaintext highlighter-rouge">notify</code> 메서드가 request 모듈에 직접 의존하는 문제가 있습니다.</li>
  <li>따라서, 테스터를 작성시에도 의존성을 고려해서 메서드와 객체에 대한 설정을 함께 생각하며 작성해야합니다.</li>
  <li>함수의 간의 의존성을 줄이는 방식으로 아래와 같이 리팩토링 할 수 있습니다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># mock_2_refactor.py
</span><span class="k">class</span> <span class="nc">BuildStatus</span><span class="p">:</span>
    <span class="n">endpoint</span> <span class="o">=</span> <span class="n">STATUS_ENDPOINT</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">transport</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">transport</span> <span class="o">=</span> <span class="n">transport</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">build_date</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">datetime</span><span class="p">.</span><span class="nf">utcnow</span><span class="p">().</span><span class="nf">isoformat</span><span class="p">()</span>
    
    <span class="k">def</span> <span class="nf">compose_payload</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">merge_request_id</span><span class="p">,</span> <span class="n">status</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="n">merge_request_id</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="n">status</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">built_at</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="nf">build_date</span><span class="p">(),</span>
        <span class="p">}</span>
    
    <span class="k">def</span> <span class="nf">deliver</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">payload</span><span class="p">):</span>
        <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="n">STATUS_ENDPOINT</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">payload</span><span class="p">)</span>
        <span class="n">response</span><span class="p">.</span><span class="nf">raise_for_status</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">response</span>
    
    <span class="k">def</span> <span class="nf">notify</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">merge_request_id</span><span class="p">,</span> <span class="n">status</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">deliver</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">compose_payload</span><span class="p">(</span><span class="n">merge_request_id</span><span class="p">,</span> <span class="n">status</span><span class="p">))</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">notify</code> 메서드를 <code class="language-plaintext highlighter-rouge">compose_payload</code>, <code class="language-plaintext highlighter-rouge">deliver</code> 메서드로 각각 분리하고 <code class="language-plaintext highlighter-rouge">requests</code> 모듈로 한정지어 구현하는 것이 아닌, 생성자 주입으로 처리합니다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># test_mock_2_refactor.py
</span><span class="kn">from</span> <span class="n">unittest</span> <span class="kn">import</span> <span class="n">mock</span>
<span class="kn">import</span> <span class="n">pytest</span>
<span class="kn">from</span> <span class="n">mock_2_refactor</span> <span class="kn">import</span> <span class="n">BuildStatus</span>


<span class="nd">@pytest.fixture</span>
<span class="k">def</span> <span class="nf">build_status</span><span class="p">():</span>
    <span class="c1"># NOTE: transport에 mock 객체를 주입합니다.
</span>    <span class="n">bstatus</span> <span class="o">=</span> <span class="nc">BuildStatus</span><span class="p">(</span><span class="n">mock</span><span class="p">.</span><span class="nc">Mock</span><span class="p">())</span>
    <span class="n">bstatus</span><span class="p">.</span><span class="n">build_date</span> <span class="o">=</span> <span class="n">mock</span><span class="p">.</span><span class="nc">Mock</span><span class="p">(</span><span class="n">return_value</span><span class="o">=</span><span class="sh">"</span><span class="s">2023-01-01T00:00:01</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">bstatus</span>

<span class="k">def</span> <span class="nf">test_build_notification_sent</span><span class="p">(</span><span class="n">build_status</span><span class="p">):</span>
    <span class="n">build_status</span><span class="p">.</span><span class="nf">notify</span><span class="p">(</span><span class="mi">123</span><span class="p">,</span> <span class="sh">"</span><span class="s">OK</span><span class="sh">"</span><span class="p">)</span>

    <span class="n">expected_payload</span> <span class="o">=</span> <span class="p">{</span>
        <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">OK</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">built_at</span><span class="sh">"</span><span class="p">:</span> <span class="n">build_status</span><span class="p">.</span><span class="nf">build_date</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="c1"># NOTE: transport 자리에 mock 객체가 주입되었기 때문에 아래와 같이 사용 가능합니다.
</span>    <span class="n">build_status</span><span class="p">.</span><span class="n">transport</span><span class="p">.</span><span class="n">post</span><span class="p">.</span><span class="nf">assert_called_with</span><span class="p">(</span>
        <span class="n">build_status</span><span class="p">.</span><span class="n">endpoint</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">expected_payload</span>
    <span class="p">)</span>
</code></pre></div></div>
<ul>
  <li>requests 모듈 등 호출을 담당하는 <code class="language-plaintext highlighter-rouge">transport</code> 자리에 Mock 객체를 주입하여 처리합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">BuildStatus</code>에 모킹 처리를 한 <code class="language-plaintext highlighter-rouge">build_status</code> fixture를 사용해서 테스트를 보다 깔끔하게 진행할 수 있습니다.</li>
</ul>]]></content><author><name>Yeham Kim</name></author><category term="Study" /><summary type="html"><![CDATA[Unit Test 단위 테스트란, 다른 코드의 일부분이 유효한지를 검사하는 코드입니다. 단위 테스트는 소프트웨어의 핵심이 되는 필수적인 기능으로서 일반 비즈니스 로직과 동일한 수준으로 다루어져야합니다. 격리: 단위 테스트는 독립적이며, 비즈니스 로직에만 집중합니다. 이전 상태에 관계없이 임의 순서로 실행될 수 있어야합니다. 성능: 신속하게 실행되어야 하며, 반복적으로 여러 번 실행될 수 있어야합니다. 자체 검증: 실행만으로 결과를 결정할 수 있어야 하며, 이를 위한 추가 단계(종속성)가 없어야합니다.]]></summary></entry><entry><title type="html">[Study] Python Clean Code - Descriptor</title><link href="http://localhost:4000/study/study-cleancode-descriptor/" rel="alternate" type="text/html" title="[Study] Python Clean Code - Descriptor" /><published>2023-07-17T10:05:07+09:00</published><updated>2023-07-17T10:05:07+09:00</updated><id>http://localhost:4000/study/study-cleancode-descriptor</id><content type="html" xml:base="http://localhost:4000/study/study-cleancode-descriptor/"><![CDATA[<h2 id="descriptor">Descriptor</h2>

<ul>
  <li>디스크립터를 구현하기 위해 두 가지 클래스(클라이언트 클래스, 디스크립터 클래스)가 필요합니다.</li>
</ul>

<p><strong>핵심 용어</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">client</code>: <code class="language-plaintext highlighter-rouge">ClientClass</code>의 인스턴스입니다.</li>
  <li><code class="language-plaintext highlighter-rouge">descriptor</code>: <code class="language-plaintext highlighter-rouge">DescriptorClass</code>의 인스턴스입니다.</li>
  <li><code class="language-plaintext highlighter-rouge">ClientClass</code>: 솔루션을 위해 생성한 일반적인 추상화 객체입니다. class attribute로 <code class="language-plaintext highlighter-rouge">discriptor</code>를 갖습니다. (필수)</li>
  <li><code class="language-plaintext highlighter-rouge">DescriptorClass</code>: 디스크립터 로직의 구현체로, 디스크립터 프로토콜을 구현한 클래스의 인스턴스입니다. 매직메서드 <code class="language-plaintext highlighter-rouge">__get__</code>, <code class="language-plaintext highlighter-rouge">__set__</code>, <code class="language-plaintext highlighter-rouge">__delete__</code>, <code class="language-plaintext highlighter-rouge">__set_name</code> 중 최소 하나 이상을 포함해야합니다.</li>
</ul>

<p><strong>동작 원리</strong></p>
<ul>
  <li>클래스 속성을 객체로 선언하면 디스크립터로 인식되고, 클라이언트에서 해당 속성을 호출하면 <code class="language-plaintext highlighter-rouge">__get__</code>의 결과를 반환합니다.
```python
class DescriptorClass:
  def <strong>get</strong>(self, instance, owner):
      if instance is None:
          return self
      logger.info(
          “Call: %s.<strong>get</strong>(%r, %r)”,
          self.<strong>class</strong>.<strong>name</strong>, instance, owner
      )</li>
</ul>

<p>class ClientClass:
    desciptor = DescriptorClass()</p>

<p>client = ClientClass()
logger.info(client.desciptor)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-  `ClientClass` 인스턴스의 `descriptor`에 접근하면, `DescriptorClass` 인스턴스를 반환하지 않고, `__get__`의 반환 값을 사용합니다.
- 이를 이용해, `__get__` 메서드 뒤쪽으로 모든 종류의 논리를 추상화하여 클라이언트에게 내용을 숨긴 채로 변환을 투명하게 실행할 수 있습니다. (캡슐화)

### 디스크립터 프로토콜의 메서드 탐색
- 디스크립터는 객체이기 때문에, self를 첫 번째 파라미터로 사용하며,  self는 객체 자신을 의미합니다.

`__get__(self, instance, owner)`  
- instance는 디스크립터를 호출한 객체입니다. (client 객체)
- owner는 해당 객체의 클래스를 의미합니다. (ClientClass 클래스)
- 즉, instance는 디스크립터가 행동을 취하려는 객체이며, owner는 인스턴스의 클래스입니다.

```python
class DescriptorClass:
    def __get__(self, instance, owner):
        if instance is None:
            return f"{self.__class__.__name__}.{owner.__name__}"
        return f"value for {instance}"

class ClientClass:
    descriptor = DescriptorClass()
</code></pre></div></div>
<ul>
  <li>위의 예제에서, <code class="language-plaintext highlighter-rouge">ClientClass.descriptor</code>로 호출하면 instance가 있는 형태로 호출하는 것이지만,</li>
  <li><code class="language-plaintext highlighter-rouge">ClientClass().descriptor</code>로 호출하면 instance를 None으로 인식하여 단순히 디스크립터 자체를 반한합니다.</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">__set__(self, instance, value)</code></p>
<ul>
  <li>꼭 구현할 필요는 없으며, 구현한 디스크립터에 대해서만 활성화됩니다.</li>
  <li><code class="language-plaintext highlighter-rouge">instance</code> 파라미터는 <code class="language-plaintext highlighter-rouge">client</code>이며 <code class="language-plaintext highlighter-rouge">value</code> 인자는 문자열을 갖습니다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Validation</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">validation_function</span><span class="p">,</span> <span class="n">error_msg</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">validation_function</span> <span class="o">=</span> <span class="n">validation_function</span>
        <span class="n">self</span><span class="p">.</span><span class="n">error_msg</span> <span class="o">=</span> <span class="n">error_msg</span>
    
    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">self</span><span class="p">.</span><span class="nf">validation_function</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">value</span><span class="si">!r}</span><span class="s"> </span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">error_msg</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    
<span class="k">class</span> <span class="nc">Field</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">*</span><span class="n">validations</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_name</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">self</span><span class="p">.</span><span class="n">validations</span> <span class="o">=</span> <span class="n">validations</span>
    
    <span class="k">def</span> <span class="nf">__set_name__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">owner</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_name</span> <span class="o">=</span> <span class="n">name</span>
    
    <span class="k">def</span> <span class="nf">__get__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">instance</span><span class="p">,</span> <span class="n">owner</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">instance</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">self</span>
        <span class="k">return</span> <span class="n">instance</span><span class="p">.</span><span class="n">__dict__</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">_name</span><span class="p">]</span>
    
    <span class="k">def</span> <span class="nf">validate</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">validation</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">validations</span><span class="p">:</span>
            <span class="nf">validation</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">__set__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">instance</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">validate</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
        <span class="n">instance</span><span class="p">.</span><span class="n">__dict__</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">_name</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>

<span class="k">class</span> <span class="nc">ClientClass</span><span class="p">:</span>
    <span class="n">descriptor</span> <span class="o">=</span> <span class="nc">Field</span><span class="p">(</span>
        <span class="nc">Validation</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">float</span><span class="p">)),</span> <span class="sh">"</span><span class="s">는 숫자가 아닙니다.</span><span class="sh">"</span><span class="p">),</span>
        <span class="nc">Validation</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">,</span> <span class="sh">"</span><span class="s">는 음수입니다.</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">)</span>

<span class="c1"># 사용 예시
</span><span class="n">client</span> <span class="o">=</span> <span class="nc">ClientClass</span><span class="p">()</span>
<span class="n">client</span><span class="p">.</span><span class="n">descriptor</span> <span class="o">=</span> <span class="mi">42</span>
<span class="n">client</span><span class="p">.</span><span class="n">descriptor</span> <span class="o">=</span> <span class="o">-</span><span class="mi">42</span> <span class="c1"># 음수이므로, Validation 에러 발생
</span><span class="n">client</span><span class="p">.</span><span class="n">descriptor</span> <span class="o">=</span> <span class="sh">"</span><span class="s">invalid value</span><span class="sh">"</span> <span class="c1"># 문자열이므로, Validation 발생
</span></code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">__set__()</code> 메서드가 @property.setter가 하던 일을 대신하게 됩니다.</li>
  <li>위와 같이, 프로퍼티 자리에 놓일 수 있는 부분은 디스크립터로 추상화가 가능합니다.</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">__delete__(self, instance)</code></p>
<ul>
  <li>
    <p>self는 descriptor 속성을 나타내며, instance는 client를 나타냅니다.
```python
class ProtctedAttribute:
  def <strong>init</strong>(self, requires_role=None) -&gt; None:
      self.permission_required = requires_role
      self._name = None</p>

    <p>def <strong>set_name</strong>(self, owner, name):
      self._name = name</p>

    <p>def <strong>set</strong>(self, user, value):
      if value is None:
          raise ValueError(f”{self._name}를 None으로 설정할 수 없습니다.”)
      user.<strong>dict</strong>[self._name] = value</p>

    <p>def <strong>delete</strong>(self, user):
      if self.permission_required in user.permissions:
          user.<strong>dict</strong>[self._name] = None
      else:
          raise ValueError(
              f”{user!s} 사용자는 {self.permission_required} 권한이 없습니다.”
          )</p>
  </li>
</ul>

<p>class User:
    “"”admin 권한을 가진 사용자만 이메일 주소를 제거할 수 있습니다.”””</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>email = ProtctedAttribute(requires_role="admin")

def __init__(self, username: str, email: str, permission_list: list = None) -&gt; None:
    self.username = username
    self.email = email
    self.permissions = permission_list or []

def __str__(self):
    return self.username
</code></pre></div></div>

<p>admin = User(“root”, “root@example.com”, [“admin”])
logger.info(admin.email)
del admin.email
logger.info(admin.email)</p>

<p>user = User(“user”, “user@example.com”, [“email”, “helpdesk”])
logger.info(user.email)
del user.email</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- User 클래스는 username과 email 파라미터를 필수로 받습니다. 
- email은 "admin" 권한이 있는 사용자만 제거할 수 있습니다.

`__set_name__(self, owner, name)`
- 디스크립터에 필요한 이름을 지정하기 위한 메서드입니다.
- 속성의 이름은 `__dict__`에서 `__get__`과 `__set__` 메서드로 읽고 쓸 때 사용됩니다.
```python
class DescriptorWithName:
    def __init__(self, name=None) -&gt; None:
        self.name = name
    
    def __set_name__(self, owner, name):
        self.name = name
        print(f'__set_name__(owner: {owner}, name: {name})')

class ClientClass:
    descriptor1 = DescriptorWithName() #1
    descriptor2 = DescriptorWithName() #2

logger.info(ClientClass())
</code></pre></div></div>
<ul>
  <li>위와 같이 사용하면, #1 Descriptor 이름은 <code class="language-plaintext highlighter-rouge">descriptor1</code>이 됩니다.</li>
  <li>즉, 필드명을 descriptor명이 되도록 동작시키는 역할이라고 볼 수 있습니다.</li>
</ul>

<h3 id="디스크립터의-유형">디스크립터의 유형</h3>
<p><strong>비데이터 디스크립터</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">__get__</code> 메서드만을 구현한 디스크립터입니다.
```python
class NonDataDescriptor:
  def <strong>get</strong>(self, instance, owner):
      if instance is None:
          return self
      return 42</li>
</ul>

<p>class ClientClass:
    descriptor = NonDataDescriptor()</p>

<p>client = ClientClass()</p>
<h1 id="vars-클래스의-__dict__를-반환합니다">vars(): 클래스의 __dict__를 반환합니다.</h1>
<p>logger.info(vars(client)) #1</p>

<p>client.descriptor = 43 #2
logger.info(vars(client)) #3</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- 비데이터 디스크립터의 경우, `__set__`과 `__delete__`를 구현하지 않기 때문에, #2와 같이 속성 값을 변경하는 경우, descriptor instance는 일반 정수로 변경됩니다.
- 따라서, #1의 결과는 비어있는 딕셔너리지만, #3의 결과는 descriptor 속성이 일반 정수 43으로 갖는 것으로 출력됩니다.
- 이 때, #2에서 지정한 descriptor를 `del client.descriptor`로 제거한다면, 원래 동작과(#1)과 같이 수행됩니다.

**데이터 디스크립터**
- `__set__`이나 `__delete__` 메서드를 구현한 경우입니다. 
```python
class DataDescriptor:
    def __get__(self, instance, owner):
        if instance is None:
            return self
        return 42
    
    def __set__(self, instance, value):
        logger.info("%s.descriptor를 %s 값으로 설정", instance, value)
        instance.__dict__["descriptor"] = value

class ClientClass:
    descriptor = DataDescriptor()

client = ClientClass()
logger.info(vars(client)) #1

client.descriptor = 43
logger.info(client.descriptor) #2
logger.info(vars(client)) #3
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">__set__</code> 메서드를 구현한 데이터 디스크립터의 경우, #2에서 출력 결과가 변경되지 않고 42임을 알 수 있습니다.</li>
  <li>하지만, <code class="language-plaintext highlighter-rouge">vars()</code> 메서드를 사용하여 속성을 분석하면, descriptor 속성이 추가되면서 값이 바뀌어 있게됩니다.</li>
  <li>데이터 디스크립터에서 속성을 조회하면 객체의 <code class="language-plaintext highlighter-rouge">__dict__</code>에서 조회하는 대신 클래스의 <code class="language-plaintext highlighter-rouge">descriptor</code>를 먼저 조회합니다.</li>
  <li>즉, 데이터 디스크립터는 인스턴스의 <code class="language-plaintext highlighter-rouge">__dict__</code>를 오버라이드하여 인스턴스 사전보다 높은 우선순위를 가지지만, 비데이터 디스크립터는 인스턴스 사전보다 낮은 우선순위를 가집니다.</li>
</ul>]]></content><author><name>Yeham Kim</name></author><category term="Study" /><summary type="html"><![CDATA[Descriptor]]></summary></entry><entry><title type="html">[Study] Python Clean Code - Decorator</title><link href="http://localhost:4000/study/study-cleancode-decorator/" rel="alternate" type="text/html" title="[Study] Python Clean Code - Decorator" /><published>2023-07-16T10:05:07+09:00</published><updated>2023-07-16T10:05:07+09:00</updated><id>http://localhost:4000/study/study-cleancode-decorator</id><content type="html" xml:base="http://localhost:4000/study/study-cleancode-decorator/"><![CDATA[<h2 id="decorator">Decorator</h2>
<ul>
  <li>원본 함수(외에도 메서드, 제너레이터, 클래스)를 직접 수정하지 않더라도, 간접적으로 기능을 수정할 수 있는 방법입니다.</li>
</ul>

<h3 id="함수-데코레이터">함수 데코레이터</h3>
<ul>
  <li>아래와 같은 방식으로 데코레이터의 형태를 구현할 수 있습니다.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">retry</span><span class="p">(</span><span class="n">operation</span><span class="p">):</span>
  <span class="nd">@wraps</span><span class="p">(</span><span class="n">operation</span><span class="p">)</span>
  <span class="k">def</span> <span class="nf">wrapped</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
      <span class="n">last_raised</span> <span class="o">=</span> <span class="bp">None</span>
      <span class="n">RETRIES_LIMIT</span> <span class="o">=</span> <span class="mi">3</span>
      <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">RETRIES_LIMIT</span><span class="p">):</span>
          <span class="k">try</span><span class="p">:</span>
              <span class="k">return</span> <span class="nf">operation</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
          <span class="k">except</span> <span class="n">ControlledException</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
              <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">retrying %s</span><span class="sh">"</span><span class="p">,</span> <span class="n">operation</span><span class="p">.</span><span class="n">__qualname__</span><span class="p">)</span>
              <span class="n">last_raised</span> <span class="o">=</span> <span class="n">e</span>
      <span class="k">raise</span> <span class="n">last_raised</span>
  <span class="k">return</span> <span class="n">wrapped</span>
</code></pre></div>    </div>
  </li>
  <li>특정 함수가 오류를 발생시킬 경우를 대비하여 정상적인 동작까지 3번은 무조건 실행시키는 방법입니다.</li>
  <li>위의 <code class="language-plaintext highlighter-rouge">retry</code> 데코레이터는 파라미터가 필요없기 때문에 어떤 함수에도 쉽게 적용할 수 있습니다.</li>
</ul>

<h3 id="클래스-데코레이터">클래스 데코레이터</h3>
<ul>
  <li>데코레이터 함수의 파라미터로 함수가 아닌 클래스를 받는 형태입니다.</li>
  <li>클래스 데코레이터를 사용하면 여러 클래스가 특정 기준을 따르도록 강제할 수 있으며, 단순한 클래스의 기능을 차차 보강해나갈 수 있습니다.</li>
</ul>

<h3 id="중첩-함수의-데코레이터">중첩 함수의 데코레이터</h3>
<ul>
  <li>다음과 같은 형식으로 구현할 수 있습니다.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nd">@retry</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">,</span> <span class="p">..)</span>

  <span class="c1"># @ 구문은 데코레이팅 객체에 대한 연산결과를 반환합니다. 따라서 이는 위의 코드와 같습니다.
</span>  <span class="o">&lt;</span><span class="n">original_function</span><span class="o">&gt;</span> <span class="o">=</span> <span class="nf">retry</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">,</span> <span class="p">...)(</span><span class="o">&lt;</span><span class="n">original_function</span><span class="o">&gt;</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>앞선 예제에서, 원하는 횟수를 추가하여 변수로 사용하고 싶다면, 아래와 같이 변경할 수 있습니다.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">def</span> <span class="nf">with_retry</span><span class="p">(</span><span class="n">retries_limit</span><span class="o">=</span><span class="n">RETRIES_LIMIT</span><span class="p">,</span> <span class="n">allowed_exceptions</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
      <span class="n">allowed_exceptions</span> <span class="o">=</span> <span class="n">allowed_exceptions</span> <span class="ow">or</span> <span class="p">(</span><span class="n">ControlledException</span><span class="p">,)</span>

      <span class="k">def</span> <span class="nf">retry</span><span class="p">(</span><span class="n">operation</span><span class="p">):</span>
          <span class="nd">@wraps</span><span class="p">(</span><span class="n">operation</span><span class="p">)</span>
          <span class="k">def</span> <span class="nf">wrapped</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
              <span class="n">last_raised</span> <span class="o">=</span> <span class="bp">None</span>
              <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">retries_limit</span><span class="p">):</span>
                  <span class="k">try</span><span class="p">:</span>
                      <span class="k">return</span> <span class="nf">operation</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
                  <span class="k">except</span> <span class="n">ControlledException</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
                      <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">retrying %s</span><span class="sh">"</span><span class="p">,</span> <span class="n">operation</span><span class="p">.</span><span class="n">__qualname__</span><span class="p">)</span>
                      <span class="n">last_raised</span> <span class="o">=</span> <span class="n">e</span>
              <span class="k">raise</span> <span class="n">last_raised</span>
          <span class="k">return</span> <span class="n">wrapped</span>
      <span class="k">return</span> <span class="n">retry</span>

  <span class="c1"># 실행방식
</span>  <span class="nd">@with_retry</span><span class="p">()</span>
  <span class="k">def</span> <span class="nf">run_operation</span><span class="p">(</span><span class="n">task</span><span class="p">):</span>
      <span class="k">return</span> <span class="n">task</span><span class="p">.</span><span class="nf">run</span><span class="p">()</span>

  <span class="nd">@with_retry</span><span class="p">(</span><span class="n">retries_limit</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">allowed_exceptions</span><span class="o">=</span><span class="p">(</span><span class="nb">ZeroDivisionError</span><span class="p">,</span> <span class="nb">AttributeError</span><span class="p">))</span>
  <span class="k">def</span> <span class="nf">run_with_custom_parameters</span><span class="p">(</span><span class="n">task</span><span class="p">):</span>
      <span class="k">return</span> <span class="n">task</span><span class="p">.</span><span class="nf">run</span><span class="p">()</span>
</code></pre></div>    </div>
    <ul>
      <li>반복 횟수 및 exception의 종류를 지정하여 원하는 함수를 여러 번 실행시킬 수 있습니다.</li>
    </ul>
  </li>
</ul>

<h3 id="데코레이터-객체">데코레이터 객체</h3>
<ul>
  <li>앞 선 예제에서는 세 단계나 되는 중첩함수가 필요합니다. 클래스를 사용하여 정의한다면, 더 깔끔하게 구현이 가능합니다.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">class</span> <span class="nc">WithRetry</span><span class="p">:</span>
      <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">retries_limit</span><span class="o">=</span><span class="n">RETRIES_LIMIT</span><span class="p">,</span> <span class="n">allowed_exceptions</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
          <span class="n">self</span><span class="p">.</span><span class="n">retries_limit</span> <span class="o">=</span> <span class="n">retries_limit</span>
          <span class="n">self</span><span class="p">.</span><span class="n">allowed_exceptions</span> <span class="o">=</span> <span class="n">allowed_exceptions</span> <span class="ow">or</span> <span class="p">(</span><span class="n">ControlledException</span><span class="p">,)</span>
        
      <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">operation</span><span class="p">):</span>
          <span class="nd">@wraps</span><span class="p">(</span><span class="n">operation</span><span class="p">)</span>
          <span class="k">def</span> <span class="nf">wrapped</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
              <span class="n">last_raised</span> <span class="o">=</span> <span class="bp">None</span>

              <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">retries_limit</span><span class="p">):</span>
                  <span class="k">try</span><span class="p">:</span>
                      <span class="k">return</span> <span class="nf">operation</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
                  <span class="k">except</span> <span class="n">self</span><span class="p">.</span><span class="n">allowed_exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
                      <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">retrying %s</span><span class="sh">"</span><span class="p">,</span> <span class="n">operation</span><span class="p">.</span><span class="n">__qualname__</span><span class="p">)</span>
                      <span class="n">last_raised</span> <span class="o">=</span> <span class="n">e</span>
                  <span class="k">raise</span> <span class="n">last_raised</span>

          <span class="k">return</span> <span class="n">wrapped</span>
    
  <span class="c1"># 사용 예시
</span>  <span class="nd">@WithRetry</span><span class="p">(</span><span class="n">retry_limit</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
  <span class="k">def</span> <span class="nf">run_with_custom_retries_limit</span><span class="p">(</span><span class="n">task</span><span class="p">):</span>
      <span class="k">return</span> <span class="n">task</span><span class="p">.</span><span class="nf">run</span><span class="p">()</span>
</code></pre></div>    </div>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">__init__</code> 메서드에 파라미터를 전달한 후, <code class="language-plaintext highlighter-rouge">__call__</code> 메서드에서 데코레이션 로직을 구현하는 방식입니다.</li>
      <li>@ 연산 전에 전달된 파라미터를 사용해 데코레이터 객체를 생성합니다.</li>
      <li><code class="language-plaintext highlighter-rouge">run_with_custom_retries_limit</code> 함수를 래핑하여 <code class="language-plaintext highlighter-rouge">__call__</code> 매직 메서드를 호출합니다.</li>
    </ul>
  </li>
</ul>

<h3 id="데코레이터-활용-우수-사례">데코레이터 활용 우수 사례</h3>
<ul>
  <li>원하는 API를 노출하기 위해 노출하고 싶지 않은 부분을 캡슐화하여 숨길 수 있습니다.</li>
  <li>파라미터와 함께 함수의 실행을 로깅하려는 경우 코드 추적을 위해 사용할 수 있습니다. (실행 경로 추적 / CPU 사용률 및 메모리 사용량 모니터링 / 함수 실행 시간 / 전달되는 파라미터 종류)</li>
  <li>파라미터의 유효성을 검사하는 경우</li>
  <li>재시도 로직을 구현하는 경우 및 일부 반복작업을 단순화하고자하는 경우</li>
</ul>

<h3 id="데코레이터-자주-발생하는-실수">데코레이터 자주 발생하는 실수</h3>
<ul>
  <li>데코레이터는 원본 객체 데이터를 보존해야합니다. 즉, 원래 함수의 어떤 것도 변ㄴ경하지 않아야 합니다.</li>
  <li>하지만, 코드에 결함이 있어서 이름이나 docstring을 변경하는 경우가 있습니다.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">def</span> <span class="nf">trace_decorator</span><span class="p">(</span><span class="n">function</span><span class="p">):</span>
      <span class="k">def</span> <span class="nf">wrapped</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
          <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">%s 실행</span><span class="sh">"</span><span class="p">,</span> <span class="n">function</span><span class="p">.</span><span class="n">__qualname__</span><span class="p">)</span>
          <span class="k">return</span> <span class="nf">function</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
      <span class="k">return</span> <span class="n">wrapped</span>

  <span class="nd">@trace_decorator</span>
  <span class="k">def</span> <span class="nf">process_account</span><span class="p">(</span><span class="n">account_id</span><span class="p">):</span>
      <span class="sh">"""</span><span class="s">id별 계정 처리</span><span class="sh">"""</span>
      <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">%s 계정 처리</span><span class="sh">"</span><span class="p">,</span> <span class="n">account_id</span><span class="p">)</span>

  <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="n">process_account</span><span class="p">.</span><span class="n">__qualname__</span><span class="p">)</span>
</code></pre></div>    </div>
    <ul>
      <li>위와 같이 출력하면, 출력값은 <code class="language-plaintext highlighter-rouge">trace_decorator.&lt;locals&gt;.wrapped</code>가 되어, 어떤 함수를 호출했는지 알 수 없습니다.</li>
    </ul>
  </li>
  <li>따라서, 이를 방지하기 위해, 데코레이터의 <code class="language-plaintext highlighter-rouge">wrapped</code> 함수 앞에 <code class="language-plaintext highlighter-rouge">@wraps</code> 데코레이터를 적용하여 실제로는 function 파라미터 함수를 래핑했음을 명시합니다.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kn">from</span> <span class="n">functools</span> <span class="kn">import</span> <span class="n">wraps</span>

  <span class="k">def</span> <span class="nf">trace_decorator</span><span class="p">(</span><span class="n">function</span><span class="p">):</span>
      <span class="nd">@wraps</span><span class="p">(</span><span class="n">function</span><span class="p">)</span>
      <span class="k">def</span> <span class="nf">wrapped</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
          <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">%s 실행</span><span class="sh">"</span><span class="p">,</span> <span class="n">function</span><span class="p">.</span><span class="n">__qualname__</span><span class="p">)</span>
          <span class="k">return</span> <span class="nf">function</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
      <span class="k">return</span> <span class="n">wrapped</span>

  <span class="nd">@trace_decorator</span>
  <span class="k">def</span> <span class="nf">process_account</span><span class="p">(</span><span class="n">account_id</span><span class="p">):</span>
      <span class="sh">"""</span><span class="s">id별 계정 처리</span><span class="sh">"""</span>
      <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">%s 계정 처리</span><span class="sh">"</span><span class="p">,</span> <span class="n">account_id</span><span class="p">)</span>

  <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="n">process_account</span><span class="p">.</span><span class="n">__qualname__</span><span class="p">)</span>
</code></pre></div>    </div>
    <ul>
      <li>위와 같이 <code class="language-plaintext highlighter-rouge">@wraps</code> 데코레이터를 추가하면 function 파라미터 함수를 래핑한 것임을 알려줄 수 있습니다.</li>
    </ul>
  </li>
  <li>아래와 같은 템플릿으로 데코레이터를 작성해야합니다.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">def</span> <span class="nf">decorator</span><span class="p">(</span><span class="n">origin_function</span><span class="p">):</span>
      <span class="nd">@wraps</span><span class="p">(</span><span class="n">origin_function</span><span class="p">)</span>
      <span class="k">def</span> <span class="nf">decorated_function</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
          <span class="c1"># 데코레이터에 의한 수정 작업
</span>          <span class="k">return</span> <span class="nf">origin_function</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
      <span class="k">return</span> <span class="n">decorated_function</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="데코레이터-부작용-처리">데코레이터 부작용 처리</h3>
<ul>
  <li>데코레이터 함수로 사용하기 위한 조건은 가장 안쪽에 정의된 함수여야 한다는 것입니다.</li>
  <li>다음 데코레이터는 문제가 있습니다.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">def</span> <span class="nf">traced_function_wrong</span><span class="p">(</span><span class="n">function</span><span class="p">):</span>
      <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">%s 함수 실행</span><span class="sh">"</span><span class="p">,</span> <span class="n">function</span><span class="p">)</span>
      <span class="n">start_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>

      <span class="nd">@wraps</span><span class="p">(</span><span class="n">function</span><span class="p">)</span>
      <span class="k">def</span> <span class="nf">wrapped</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
          <span class="n">result</span> <span class="o">=</span> <span class="nf">function</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
          <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span>
              <span class="sh">"</span><span class="s">함수 %s의 실행시간: %.2fs</span><span class="sh">"</span><span class="p">,</span> <span class="n">function</span><span class="p">,</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">start_time</span>
          <span class="p">)</span>
          <span class="k">return</span> <span class="n">result</span>
      <span class="k">return</span> <span class="n">wrapped</span>

  <span class="nd">@traced_function_wrong</span>
  <span class="k">def</span> <span class="nf">process_with_delay</span><span class="p">(</span><span class="n">callback</span><span class="p">,</span> <span class="n">delay</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
      <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">delay</span><span class="p">)</span>
      <span class="k">return</span> <span class="nf">callback</span><span class="p">()</span>
</code></pre></div>    </div>
    <ul>
      <li>해당 모듈의 함수를 임포트만 하더라도, 함수가 호출됩니다.</li>
      <li>함수를 여러번 호출하면, 처음 임포트하는 시점의 시간을 start_time으로 기억하게 되어, 누적된 시간이 결과가 되어 도출됩니다.</li>
    </ul>
  </li>
  <li>데코레이션은 <code class="language-plaintext highlighter-rouge">process_with_delay = traced_function_wrong(process_with_delay)</code>와 동작이 같습니다. 따라서, 모듈이 임포트될 떄, 이 구문이 실행됩니다.</li>
  <li>위 문제를 해결하기 위해, 아래와 같이 <code class="language-plaintext highlighter-rouge">start_time</code> 위치를 함수의 가장 안쪽에 넣어야합니다.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">def</span> <span class="nf">traced_function_wrong</span><span class="p">(</span><span class="n">function</span><span class="p">):</span>

      <span class="nd">@wraps</span><span class="p">(</span><span class="n">function</span><span class="p">)</span>
      <span class="k">def</span> <span class="nf">wrapped</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
          <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">%s 함수 실행</span><span class="sh">"</span><span class="p">,</span> <span class="n">function</span><span class="p">)</span>
          <span class="n">start_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>

          <span class="n">result</span> <span class="o">=</span> <span class="nf">function</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
          <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span>
              <span class="sh">"</span><span class="s">함수 %s의 실행시간: %.2fs</span><span class="sh">"</span><span class="p">,</span> <span class="n">function</span><span class="p">,</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">start_time</span>
          <span class="p">)</span>
          <span class="k">return</span> <span class="n">result</span>
      <span class="k">return</span> <span class="n">wrapped</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="어느-곳에서나-동작하는-데코레이터-만들기">어느 곳에서나 동작하는 데코레이터 만들기</h3>
<ul>
  <li>데코레이터를 만들 때는 일반적으로 재사용을 고려하여 함수뿐만 아니라 메서드에서도 동작하도록 하길 바랍니다.</li>
  <li>다음은, DB Driver에 따라 쿼리를 수행하는 데코레이터 예제입니다.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">class</span> <span class="nc">DBDriver</span><span class="p">:</span>
      <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dbstring</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
          <span class="n">self</span><span class="p">.</span><span class="n">dbstring</span> <span class="o">=</span> <span class="n">dbstring</span>
        
      <span class="k">def</span> <span class="nf">excute</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">query</span><span class="p">):</span>
          <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">dbstring</span><span class="si">}</span><span class="s">에서 쿼리 </span><span class="si">{</span><span class="n">query</span><span class="si">}</span><span class="s"> 실행</span><span class="sh">"</span>
        
  <span class="k">def</span> <span class="nf">inject_db_driver</span><span class="p">(</span><span class="n">function</span><span class="p">):</span>
      <span class="sh">"""</span><span class="s">데이터베이스 dns 문자열을 받아서 DBDriver 인스턴스를 생성
      </span><span class="sh">"""</span>
      <span class="nd">@wraps</span><span class="p">(</span><span class="n">function</span><span class="p">)</span>
      <span class="k">def</span> <span class="nf">wrapped</span><span class="p">(</span><span class="n">dbstring</span><span class="p">):</span>
          <span class="k">return</span> <span class="nf">function</span><span class="p">(</span><span class="nc">DBDriver</span><span class="p">(</span><span class="n">dbstring</span><span class="p">))</span>
      <span class="k">return</span> <span class="n">wrapped</span>

  <span class="nd">@inject_db_driver</span>
  <span class="k">def</span> <span class="nf">run_query</span><span class="p">(</span><span class="n">driver</span><span class="p">):</span>
      <span class="k">return</span> <span class="n">driver</span><span class="p">.</span><span class="nf">excute</span><span class="p">(</span><span class="sh">"</span><span class="s">test_function</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div>    </div>
    <ul>
      <li>메서드는 DB 정보 문자열을 받아서 DBDriver 인스턴스를 생성하고, 함수에 전달합니다.</li>
      <li>따라서, <code class="language-plaintext highlighter-rouge">run_query</code>를 호출할 때 DBDriver 인스턴스를 함께 대입해주지 않아도 됩니다.</li>
    </ul>
  </li>
  <li>하지만, 위의 예시의 경우 아래와 같은 클래스를 생성하고 내부 메서드를 사용한다면 오류가 발생합니다.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">class</span> <span class="nc">DataHandler</span><span class="p">:</span>
      <span class="nd">@inject_db_driver</span>
      <span class="k">def</span> <span class="nf">run_query</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">driver</span><span class="p">):</span>
          <span class="k">return</span> <span class="n">driver</span><span class="p">.</span><span class="nf">excute</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__name__</span><span class="p">)</span>
  <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="n">DataHandler</span><span class="p">.</span><span class="nf">run_query</span><span class="p">(</span><span class="sh">"</span><span class="s">test_fails</span><span class="sh">"</span><span class="p">))</span> <span class="c1"># 오류 발생
</span></code></pre></div>    </div>
    <ul>
      <li>하나의 파라미터만 받도록 설계된 <code class="language-plaintext highlighter-rouge">@inject_db_driver</code>는 문자열 자리에 self를 전달하고, 두 번쨰 파라미터에는 아무것도 전달하지 않아서 발생하는 에러입니다.</li>
    </ul>
  </li>
  <li>따라서, 이와 같은 데코레이터를 사용할 때는 <code class="language-plaintext highlighter-rouge">__get__</code> 메서드를 구현한 디스크립터 객체를 만들어야 합니다.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">class</span> <span class="nc">inject_db_driver</span><span class="p">:</span>
      <span class="sh">"""</span><span class="s">문자열을 DBDriver 인스턴스로 변환하여 래핑된 함수에 전달
      </span><span class="sh">"""</span>
      <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">function</span><span class="p">):</span>
          <span class="n">self</span><span class="p">.</span><span class="n">function</span> <span class="o">=</span> <span class="n">function</span>
          <span class="nf">wraps</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">function</span><span class="p">)(</span><span class="n">self</span><span class="p">)</span>
        
      <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dbstring</span><span class="p">):</span>
          <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">function</span><span class="p">(</span><span class="nc">DBDriver</span><span class="p">(</span><span class="n">dbstring</span><span class="p">))</span>

      <span class="k">def</span> <span class="nf">__get__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">instance</span><span class="p">,</span> <span class="n">owner</span><span class="p">):</span>
          <span class="k">if</span> <span class="n">instance</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
              <span class="k">return</span> <span class="n">self</span>
          <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">__class__</span><span class="p">(</span><span class="nc">MethodType</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">function</span><span class="p">,</span> <span class="n">instance</span><span class="p">))</span>
</code></pre></div>    </div>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">inject_db_driver</code> 데코레이터를 함수가 아닌 클래스 형태로 변경하였습니다.</li>
      <li>인스턴스에 <code class="language-plaintext highlighter-rouge">function</code>을 동적으로 bind하여 리턴한 결과를 <code class="language-plaintext highlighter-rouge">__class__</code>로 다시 래핑합니다.</li>
      <li>이를 사용하려는 클래스에 클래스 변수로 넣어주면, 호출될 때 <code class="language-plaintext highlighter-rouge">__get__</code>을 호출합니다.</li>
    </ul>
  </li>
</ul>

<h3 id="데코레이터와-관심사-분리">데코레이터와 관심사 분리</h3>
<ul>
  <li>코드 재사용이란, 함수 및 클래스는 최소한의 책임을 가져서 오직 한 가지 일만 해야합니다. 컴포넌트가 작을수록 재사용성이 높아집니다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">traced_function</span><span class="p">(</span><span class="n">function</span><span class="p">):</span>
    <span class="nd">@functools.wraps</span><span class="p">(</span><span class="n">function</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">wrapped</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">%s 함수 실행</span><span class="sh">"</span><span class="p">,</span> <span class="n">function</span><span class="p">.</span><span class="n">__qualname__</span><span class="p">)</span>
        <span class="n">start_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="n">result</span> <span class="o">=</span> <span class="nf">function</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span>
            <span class="sh">"</span><span class="s">함수 %s 처리 소요시간 %.2fs</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">function</span><span class="p">.</span><span class="n">__qualname__</span><span class="p">,</span>
            <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">start_time</span>
        <span class="p">)</span>
        <span class="k">return</span> <span class="n">result</span>
    <span class="k">return</span> <span class="n">wrapped</span>
</code></pre></div></div>
<ul>
  <li>위 함수는 어떤 함수가 호출되었는지 기록할 뿐 아니라, 함수의 소요시간을 함께 측정합니다.</li>
  <li>따라서, 한 가지 경우만 원할 때에도 두 가지 기능 모두를 사용해야합니다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">log_excution</span><span class="p">(</span><span class="n">function</span><span class="p">):</span>
    <span class="nd">@functools.wraps</span><span class="p">(</span><span class="n">function</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">wrapped</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">started execution of %s.</span><span class="sh">"</span><span class="p">,</span> <span class="n">function</span><span class="p">.</span><span class="n">__qualname__</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">function</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">wrapped</span>

<span class="k">def</span> <span class="nf">measure_time</span><span class="p">(</span><span class="n">function</span><span class="p">):</span>
    <span class="nd">@functools.wraps</span><span class="p">(</span><span class="n">function</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">wrapped</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="n">start_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="n">result</span> <span class="o">=</span> <span class="nf">function</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>

        <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span>
            <span class="sh">"</span><span class="s">function %s took %.2fs</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">function</span><span class="p">.</span><span class="n">__qualname__</span><span class="p">,</span>
            <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">start_time</span>
        <span class="p">)</span>
        <span class="k">return</span> <span class="nf">function</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">wrapped</span>

<span class="nd">@measure_time</span>
<span class="nd">@log_excution</span>
<span class="k">def</span> <span class="nf">operation</span><span class="p">():</span>
    <span class="bp">...</span>
</code></pre></div></div>
<ul>
  <li>위와 같이 재사용성이 더 높은 두 가지 데코레이터로 나누어 구현할 수 있습니다.</li>
  <li>이 때, 데코레이터가 적용되는 순서도 중요합니다.</li>
</ul>

<h3 id="좋은-데코레이터란">좋은 데코레이터란?</h3>
<ul>
  <li>캡슐화와 관심사의 분리: 실제로 하는 일과 데코레이팅하는 일의 책임이 명확히 구분됩니다. (데코레이터의 클라이언트는 데코레이터 함수를 블랙박스로 생각하게 됩니다.)</li>
  <li>독립성: 데코레이터의 동작은 독립적이며, 데코레이팅되는 객체와 최대한 분리되어야 합니다.</li>
  <li>재사용성: 데코레이터는 하나의 함수 인스턴스에만 적용되는 것이 아닌, 여러 유형에 적용 가능되도록 만들어야합니다.(데코레이터가 함수의 역할을 하는 경우도 있음)</li>
</ul>]]></content><author><name>Yeham Kim</name></author><category term="Study" /><summary type="html"><![CDATA[Decorator 원본 함수(외에도 메서드, 제너레이터, 클래스)를 직접 수정하지 않더라도, 간접적으로 기능을 수정할 수 있는 방법입니다.]]></summary></entry><entry><title type="html">[Study] Python Clean Code - OOP</title><link href="http://localhost:4000/study/study-osi-model/" rel="alternate" type="text/html" title="[Study] Python Clean Code - OOP" /><published>2023-07-10T10:05:07+09:00</published><updated>2023-07-10T10:05:07+09:00</updated><id>http://localhost:4000/study/study-osi-model</id><content type="html" xml:base="http://localhost:4000/study/study-osi-model/"><![CDATA[<h2 id="solid-원칙">SOLID 원칙</h2>
<ul>
  <li>S: 단일 책임 원칙 (Single Responsibility Principle)</li>
  <li>O: 개방/폐쇄의 원칙</li>
  <li>L: 리스코프(Liskov) 치환 원칙</li>
  <li>I: 인터페이스 분리 원칙 (Interface Segregation Principle)</li>
  <li>D: 의존성 역전 원칙 (Dependency Inversion Principle)</li>
</ul>

<h3 id="단일-책임-원칙">단일 책임 원칙</h3>
<ul>
  <li>SRP은 소프트웨어 컴포넌트가 단 하나의 책임을 져야한다는 원칙입니다.</li>
  <li>따라서, 구체적인 하나의 일을 담당해야하며, 변화해야할 이유는 단 하나뿐입니다.</li>
  <li>관계형 데이터베이스 설계에서의 정규화 개념과 유사합니다. 객체으 속성이나 메서드의 특성이 다른 그룹에서 발견되면 이들을 다른 곳으로 옮겨야합니다.</li>
</ul>

<h3 id="개방폐쇄-원칙">개방/폐쇄 원칙</h3>
<ul>
  <li>클래스를 디자인 할 때는 유지보수가 쉽도록 로직을 캡슐화하여, 확장에는 열려있고 수정에는 닫있도록 해야합니다.</li>
  <li>새로운 기능을 추가하다가 기존 코드를 수정했다면, 기존 로직이 잘못 디자인 되었음을 의미합니다.</li>
</ul>

<p><strong>좋지 않은 코드 예시</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Event</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">raw_data</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">raw_data</span> <span class="o">=</span> <span class="n">raw_data</span>
    
<span class="k">class</span> <span class="nc">UnkownEvent</span><span class="p">(</span><span class="n">Event</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">데이터만으로 식별할 수 없는 이벤트</span><span class="sh">"""</span>

<span class="k">class</span> <span class="nc">LoginEvent</span><span class="p">(</span><span class="n">Event</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">로그인 사용자에 의한 이벤트</span><span class="sh">"""</span>

<span class="k">class</span> <span class="nc">LogoutEvent</span><span class="p">(</span><span class="n">Event</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">로그아웃 사용자에 의한 이벤트</span><span class="sh">"""</span>

<span class="k">class</span> <span class="nc">SystemMonitor</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">시스템에서 발생한 이벤트 분류</span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">event_data</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">event_data</span> <span class="o">=</span> <span class="n">event_data</span>
    
    <span class="k">def</span> <span class="nf">identify_event</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">event_data</span><span class="p">[</span><span class="sh">"</span><span class="s">before</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">session</span><span class="sh">"</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span> \
            <span class="ow">and</span> <span class="n">self</span><span class="p">.</span><span class="n">event_data</span><span class="p">[</span><span class="sh">"</span><span class="s">after</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">session</span><span class="sh">"</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
            <span class="k">return</span> <span class="nc">LoginEvent</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">event_data</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">self</span><span class="p">.</span><span class="n">event_data</span><span class="p">[</span><span class="sh">"</span><span class="s">before</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">session</span><span class="sh">"</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span> \
            <span class="ow">and</span> <span class="n">self</span><span class="p">.</span><span class="n">event_data</span><span class="p">[</span><span class="sh">"</span><span class="s">after</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">session</span><span class="sh">"</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="nc">LogoutEvent</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">event_data</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="nc">UnkownEvent</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">event_data</span><span class="p">)</span>
</code></pre></div></div>
<ul>
  <li>위 코드들은, SystemMonitor를 생성할 때 <code class="language-plaintext highlighter-rouge">event_data</code> 딕셔너리 값에 따라서 반환하는 클래스가 달라집니다. 하지만, 몇가지 문제가 있습니다.</li>
  <li>이벤트 유형을 결정하는 논리가 일체형으로 중앙 집중화 되어있습니다. 이벤트가 늘어날수록 메서드도 커질 것 입니다.</li>
  <li>따라서, 한가지 일만 할 수 없을 뿐더러 한가지 일을 제대로 하지도 못합니다. 새로운 유형의 이벤트가 추가될 때마다 수정해야하므로, 수정에 닫혀있지 않습니다.</li>
</ul>

<p><strong>리팩토링된 코드</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Event</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">raw_data</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">raw_data</span> <span class="o">=</span> <span class="n">raw_data</span>
    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">meets_condition</span><span class="p">(</span><span class="n">event_data</span><span class="p">:</span> <span class="nb">dict</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">False</span>
    
<span class="k">class</span> <span class="nc">UnkownEvent</span><span class="p">(</span><span class="n">Event</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">데이터만으로 식별할 수 없는 이벤트</span><span class="sh">"""</span>

<span class="k">class</span> <span class="nc">LoginEvent</span><span class="p">(</span><span class="n">Event</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">로그인 사용자에 의한 이벤트</span><span class="sh">"""</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">meets_condition</span><span class="p">(</span><span class="n">event_data</span><span class="p">:</span> <span class="nb">dict</span><span class="p">):</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">event_data</span><span class="p">[</span><span class="sh">"</span><span class="s">before</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">session</span><span class="sh">"</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span> \
            <span class="ow">and</span> <span class="n">event_data</span><span class="p">[</span><span class="sh">"</span><span class="s">after</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">session</span><span class="sh">"</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span>
        <span class="p">)</span>

<span class="k">class</span> <span class="nc">LogoutEvent</span><span class="p">(</span><span class="n">Event</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">로그아웃 사용자에 의한 이벤트</span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">meets_condition</span><span class="p">(</span><span class="n">event_data</span><span class="p">:</span> <span class="nb">dict</span><span class="p">):</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">event_data</span><span class="p">[</span><span class="sh">"</span><span class="s">before</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">session</span><span class="sh">"</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span> \
            <span class="ow">and</span> <span class="n">event_data</span><span class="p">[</span><span class="sh">"</span><span class="s">after</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">session</span><span class="sh">"</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span>
        <span class="p">)</span>

<span class="k">class</span> <span class="nc">SystemMonitor</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">시스템에서 발생한 이벤트 분류</span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">event_data</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">event_data</span> <span class="o">=</span> <span class="n">event_data</span>
    
    <span class="k">def</span> <span class="nf">identify_event</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">event_cls</span> <span class="ow">in</span> <span class="n">Event</span><span class="p">.</span><span class="nf">__subclasses__</span><span class="p">():</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">event_cls</span><span class="p">.</span><span class="nf">meets_condition</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">event_data</span><span class="p">):</span>
                    <span class="k">return</span> <span class="nf">event_cls</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">event_data</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">KeyError</span><span class="p">:</span>
                <span class="k">continue</span>
        <span class="k">return</span> <span class="nc">UnkownEvent</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">event_data</span><span class="p">)</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">SystemMonitor</code>를 추상적인 이벤트와 협력하도록 변경하고, 이벤트에 대응하는 개별 로직은 각 이벤트 클래스에 위임합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">Event</code> 클래스 관련 인터페이스들은 <code class="language-plaintext highlighter-rouge">meets_condition</code> 메서드를 구현하여 다형성을 보장합니다.</li>
  <li>만약, 새로운 요구사항에 의해 사용자 트랜잭션에 대응하는 이벤트를 지원해야한다고 가정한다면, 아래와 같이 클래스 하나만 추가하면 됩니다.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">class</span> <span class="nc">TransactionEvent</span><span class="p">(</span><span class="n">Event</span><span class="p">):</span>
      <span class="sh">"""</span><span class="s">시스템에서 발생한 트랜잭션 이벤트</span><span class="sh">"""</span>
      <span class="nd">@staticmethod</span>
      <span class="k">def</span> <span class="nf">meets_condition</span><span class="p">(</span><span class="n">event_data</span><span class="p">:</span> <span class="nb">dict</span><span class="p">):</span>
          <span class="k">return</span> <span class="n">event_data</span><span class="p">[</span><span class="sh">"</span><span class="s">after</span><span class="sh">"</span><span class="p">].</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">transaction</span><span class="sh">"</span><span class="p">)</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="리스코프-치환-원칙lsp">리스코프 치환 원칙(LSP)</h3>
<ul>
  <li>설계 시 안전성을 유지하기 위해 객체 타입이 유지되어야 한다는 일련의 특성을 말합니다.</li>
  <li>만약 S가 T의 하위 타입이라면, 프로그램을 변경하지 않고 T 타입의 객체를 S 타입의 객체로 치환할 수 있어야 합니다.</li>
  <li>좋은 클래스는 명확하고 간결한 인터페이스를 가지고 있습니다.</li>
  <li>여러 타입의 객체를 사용하는 클라이언트 클래스가 있다면, 클라이언트는 어떤 인터페이스를 통해 객체와 상호작용하기를 원할 것입니다. 클라이언트 클래스에 추가적인 작업을 하지 않더라도, 모든 하위 클래스의 인스턴스로 작업할 수 있어야 합니다. (하위 클래스와 부모 클래스의 사용 시점을 변경핻봐도 문제가 없어야 합니다.)</li>
  <li>하위 클래스는 부모 클래스에 정의된 것보다 사전 조건을 엄격하게 만들면 안됩니다.</li>
  <li>하위 클래스는 부모 클래스에 정의된 것보다 약한 사후조건을 만들면 안됩니다.</li>
  <li>Mypy나 Pylint같은 모듈을 통해 위반하는 클래스를 검출할 수 있습니다.</li>
</ul>

<p><strong>리팩토링 코드</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Event</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">raw_data</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">raw_data</span> <span class="o">=</span> <span class="n">raw_data</span>
    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">meets_condition</span><span class="p">(</span><span class="n">event_data</span><span class="p">:</span> <span class="nb">dict</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">False</span>
    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">meets_condition_pre</span><span class="p">(</span><span class="n">event_data</span><span class="p">:</span> <span class="nb">dict</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">인터페이스 계약의 사전조건
        </span><span class="sh">'</span><span class="s">eveent_data</span><span class="sh">'</span><span class="s"> 파라미터의 유효성 검사
        </span><span class="sh">"""</span>
        <span class="k">assert</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">event_data</span><span class="p">,</span> <span class="nb">dict</span><span class="p">),</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">event_data</span><span class="si">!r}</span><span class="s"> is not a dict</span><span class="sh">"</span>
        <span class="k">for</span> <span class="n">moment</span> <span class="ow">in</span> <span class="p">(</span><span class="sh">"</span><span class="s">before</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">after</span><span class="sh">"</span><span class="p">):</span>
            <span class="k">assert</span> <span class="n">moment</span> <span class="ow">in</span> <span class="n">event_data</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">moment</span><span class="si">}</span><span class="s"> not in </span><span class="si">{</span><span class="n">event_data</span><span class="si">}</span><span class="sh">"</span>
            <span class="k">assert</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">event_data</span><span class="p">[</span><span class="n">moment</span><span class="p">],</span> <span class="nb">dict</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">False</span>
    
<span class="bp">...</span>

<span class="k">class</span> <span class="nc">SystemMonitor</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">시스템에서 발생한 이벤트 분류</span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">event_data</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">event_data</span> <span class="o">=</span> <span class="n">event_data</span>
    
    <span class="k">def</span> <span class="nf">identify_event</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">Event</span><span class="p">.</span><span class="nf">meets_condition_pre</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">event_data</span><span class="p">)</span>
        <span class="n">event_cls</span> <span class="o">=</span> <span class="nf">next</span><span class="p">(</span>
            <span class="p">(</span>
                <span class="n">event_cls</span> <span class="k">for</span> <span class="n">event_cls</span> <span class="ow">in</span> <span class="n">Event</span><span class="p">.</span><span class="nf">__subclasses__</span><span class="p">()</span>
                <span class="k">if</span> <span class="n">event_cls</span><span class="p">.</span><span class="nf">meets_condition</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">event_data</span><span class="p">)</span>
            <span class="p">),</span>
            <span class="n">UnkownEvent</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="k">return</span> <span class="nf">event_cls</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">event_data</span><span class="p">)</span>
</code></pre></div></div>
<ul>
  <li>사전조건에서 파라미터의 타입을 분석하기 때문에, 클라이언트는 KeyError를 받지 않으므로 발전된 캡슐화가 되었습니다.</li>
  <li>LSP는 다형성을 강조하기 때문에 좋은 디자인의 기초가 됩니다. 새로운 클래스가 원래의 계약과 호환되지 않는 확장을 하려면 클라이언트와의 계약이 깨집니다.. 이를 주의해서 설계해야 합니다.</li>
</ul>

<h3 id="인터페이스-분리-원칙">인터페이스 분리 원칙</h3>
<ul>
  <li>인터페이스는 객체가 노출하는 메서드의 집합입니다. 파이썬에서는 클래스 메서드의 형태를 보고 암시적으로 정해지며, 이는 덕타이핑 원리를 따릅니다.</li>
  <li>인터페이스는 각각 하나의 메서드를 가진 두 개의 다른 인터페이스로 분리하는 것이 좋습니다.</li>
  <li>예를 들어, <code class="language-plaintext highlighter-rouge">XMLEventParser</code>에서 파생된 클래스는 <code class="language-plaintext highlighter-rouge">from_xml()</code> 메서드만을 구현하면 되고, <code class="language-plaintext highlighter-rouge">JSONEventParser</code>에서 파생된 클래스는 <code class="language-plaintext highlighter-rouge">from_json()</code> 메서드만을 구현하면 됩니다.</li>
  <li>이 원칙을 준수하지 않으면 별개의 기능이 결합된 인터페이스가 만들어지며, 상속된 클래스는 SRP를 준수할 수 없게 됩니다.</li>
</ul>

<h3 id="의존성-역전">의존성 역전</h3>
<ul>
  <li>추상화를 통해 세부 사항에 의존하지 않도록 해야 하지만, 반대로 세부 사항 (구체적인 구현)은 추상화에 의존해야 한다.</li>
  <li>저수준 내용에 따라 고수준 클래스가 변경되는 것은 좋은 디자인이 아닙니다. 이를 해결하기 위해서는 고수준 클래스에서 저수준 클래스를 구체 클래스 형태가 아닌 인터페이스 형태로 담당하는 것입니다.</li>
  <li>상속은 is a 관계입니다. The apple is a fruit. 과 같이 표현할 수 있다면, apple은 fruit을 상속받을 수 있습니다.</li>
</ul>]]></content><author><name>Yeham Kim</name></author><category term="Study" /><summary type="html"><![CDATA[SOLID 원칙 S: 단일 책임 원칙 (Single Responsibility Principle) O: 개방/폐쇄의 원칙 L: 리스코프(Liskov) 치환 원칙 I: 인터페이스 분리 원칙 (Interface Segregation Principle) D: 의존성 역전 원칙 (Dependency Inversion Principle)]]></summary></entry><entry><title type="html">[Study] AWS 기본 개념</title><link href="http://localhost:4000/study/study-aws-concept/" rel="alternate" type="text/html" title="[Study] AWS 기본 개념" /><published>2023-07-10T10:05:07+09:00</published><updated>2023-07-10T10:05:07+09:00</updated><id>http://localhost:4000/study/study-aws-concept</id><content type="html" xml:base="http://localhost:4000/study/study-aws-concept/"><![CDATA[<h2 id="amazon-vpc">Amazon VPC</h2>
<ul>
  <li>AWS에 생성하는 가상의 네트워크(Virtual Private Cloud)를 의미합니다.</li>
  <li>EC2나 RDS의 경우, VPC를 먼저 선택해야합니다.</li>
  <li>VPC내에 서버를 설치하면 해당 네트워크에 소속되지만, 별도로 설정하지 않으면 격리된 네트워크입니다.</li>
  <li>외부와 통신하기 위해 인터넷 혹은 회사 LAN과 연결해야합니다.</li>
</ul>

<p><strong>기능</strong></p>
<ul>
  <li>네트워킹 환경을 설정합니다.</li>
  <li>IPv4, IPv6 둘 다 사용가능합니다.</li>
  <li>CIDR 블록, 서브넷 마스크를 설정할 수 있습니다.</li>
  <li>물리적인 라우터가 아닌 소프트웨어가 라우터의 역할을 수행하는 방식입니다.</li>
  <li>라우팅 테이블을 통해 여러 개의 서브넷과 연결합니다.</li>
  <li>서브넷 내에서의 통신은 라우터 없이 직접 가능합니다.</li>
</ul>

<p><strong>VPC 설정</strong></p>
<ul>
  <li>인터넷에 연결해야 한다면 인터넷 게이트웨이를 설정하고, 라우팅 테이블과 맵핑하여 라우팅을 설정합니다.</li>
  <li>오토 스케일링을 설정해야 한다면 IP 주소를 많이 확보해 두어야합니다.
    <ol>
      <li>VPC 생성: VPC 이름 설정 / CIDR 블록 설정 / 테넌시(하드웨어의 점유 여부) 선택</li>
      <li>서브넷 설정: 서브넷 이름 설정 / 대상 VPC 선택 / 가용 영역 선택 / CIDR 블록(서브넷) 설정</li>
      <li>인터넷 연결: 인터넷 게이트웨이 생성 / IGW와 VPC 연결 / 라우팅 설정</li>
    </ol>
  </li>
</ul>

<p><strong>서브넷과 DHCP: 사용 범위 선택</strong></p>
<ul>
  <li>서브넷: 커다란 네트워크를 작게 나눈 네트워크를 의미합니다.</li>
  <li>네트워크를 분할하여 직접 통신할 수 있는 범위 좁히며, 방화벽 설정을 통해 보안을 강화합니다.</li>
  <li>일반적인 네트워크의 경우, 서브넷끼리 통신하기 위해서는 라우팅이 필요하지만, VPC는 라우팅 없이도 통신 가능합니다.</li>
  <li>CIDR(class Inter-Domain Routing): 네트워크와 서브넷의 범위를 나누는 표기법입니다.</li>
  <li>/24이면 IP 주소의 수가 2의 (32-24)제곱개 입니다.</li>
  <li>기본 VPC는 /16인 B클래스로 설정되어 있습니다. /20 서브넷은 IP 주소 4096개를 가지므로, 오토 스케일링을 설정해도 될 만큼 충분히 많은 수의 IP 주소를 가집니다.</li>
  <li>DHCP (Dynamic Host Configuration Protocol): 각 호스트인 인스턴스에 IP 주소를 자동으로 할당합니다. 인스턴스가 추가될 때, 서브넷 범위의 IP 주소 중 하나가 할당됩니다.</li>
</ul>

<p><strong>라우팅과 NAT</strong></p>
<ul>
  <li>NAT(network Address Translation): 네트워크 주소 변환 방식으로,</li>
  <li>라우팅은 타겟 호스트에 바로 데이터를 전달하는 것이 아닌, 호스트에서 호스트로 데이터를 전달하는 방식을 의미합니다.</li>
  <li>라우터에는 타겟 호스트에 가장 빠르게 정보를 전달할 수 있는 정보가 포함되어있습니다.</li>
  <li>게이트웨이는 LAN에서 인터넷으로 데이터를 전송할 때, LAN 내부의 출입구가 됩니다.</li>
  <li>사설 IP 주소를 공인 IP 주소로 변환하고, 회사 내에서는 공인 IP 주소 하나를 공동으로 사용합니다.</li>
  <li>NAPT: Network Address Port Translation으로, IP 마스커레이드라고도 합니다. 주소 변환을 담당합니다.</li>
  <li>IP 마스커레이드를 사용하면, 내부에서 외부로 나가는 것은 가능하지만 외부에서 내부로 들어오는 것은 불가능합니다.</li>
  <li>NAT(Network Address Translation): NAT를 통해 사설 IP 주소가 공인 IP 주소로 변환됩니다.</li>
  <li>IP 마스커레이드는 일대다이며, NAT은 다대다입니다. IP 마스커레이드는 공인 IP 하나만 설정할 수 있습니다. 서버가 여러 대라면 공인 IP 주소를 여러개 설정할 수 있는 NAT을 사용해야합니다.</li>
</ul>

<p><strong>인터넷 게이트웨이, NAT 게이트웨이</strong></p>
<ul>
  <li>인터넷 게이트웨이: 인터넷 연결을 담당합니다. EC2 인스턴스와 인터넷을 연결합니다.</li>
  <li>NAT 게이트웨이: 서브넷에서 인터넷으로 접속할 수 있지만, 인터넷에서는 서브넷으로 접속하지 못하도록 합니다. (소프트웨어 업데이트시 이용)<br />
(단일 방향으로 EC2 인스턴스와 인터넷을 연결합니다.)</li>
  <li>EC2 인스턴스는 사설 IP 주소밖에 설정할 수 없기 때문에, 공인 IP 주소를 사설 IP 주소로 변환하는 인터넷 게이트웨이가 필수적입니다.</li>
</ul>

<p><strong>보안 그룹과 네트워크 ACL</strong></p>
<ul>
  <li>VPC의 가상 방화벽으로 보안 그룹과 네트워크 ACL 두 종류의 방화벽을 사용합니다.</li>
  <li>보안 그룹과 네트워크 ACL은 인바운드 트래픽과 아웃바운드 트래픽을 제어합니다.</li>
  <li>보안 그룹은 인스턴스에 대해 설정하며, 네트워크 ACL은 서브넷에 설정하기 때문에 개별 인스턴스에 설정하지 않아도 됩니다.</li>
  <li>참고: 데몬은 서버의 전원이 켜져있는 동안 계속해서 동작하고 있는 소프트웨어를 말합니다.</li>
</ul>

<p><strong>VPC 엔드포인트</strong></p>
<ul>
  <li>VPC 내부에서 VPC 외부로 접속하기 위한 연결점을 제공하는 서비스입니다.</li>
  <li>S3와 DynamoDB는 VPC를 사용하지 않는 서비스입니다. 따라서, 이와 같이 VPC 외부 서비스를 연결해주는 것이 엔드포인트 서비스입니다.</li>
  <li>VPC 엔드포인트는 가상 서비스로, 확장성과 고가용성을 지원합니다.</li>
  <li>네트워크 트래픽에 따라 자동으로 스케일링 됩니다.</li>
  <li>엔드포인트는 두 종류로, 인터페이스 엔드포인트와 게이트웨이 엔드포인트가 있습니다.</li>
  <li>인터페이스 엔드포인트는 네트워크 인터페이스로 구축하는 유형이며, 게이트웨이 엔드포인트는 라우팅 테이블에 설정된 내용을 라우팅하는 유형입니다.</li>
  <li>인터페이스 엔드포인트는 사설 IP 주소를 가진 ENI가 존재하며 각 서비스와 연결하는 출입구 역할을 합니다.</li>
  <li>AWS PrivateLink라는 방식을 사용하기 때문에, 타사 서비스가 PrivateLink를 지원한다면 사용 가능합니다.</li>
</ul>

<h2 id="amazon-elb">Amazon ELB</h2>
<ul>
  <li>AWS가 제공하는 로드 밸런서로, 집중되는 트래픽을 서버/네트워크에 분배하는 부하 분산 장치입니다.</li>
</ul>

<p><strong>ALB</strong></p>
<ul>
  <li>HTTP/HTTPS 프로토콜의 헤더를 보고 적절한 패킷으로 전송하므로, OSI 모형의 애플리케이션 계층(7계층)에서 동작합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">IP 주소 + 포트번호 + 패킷내용</code> 정보를 통해 스위칭합니다.</li>
  <li>L7단에서 지원하기 때문에 인스턴스와 로드 밸런서 사이에서 SSL이 적용된 암호화 통신이 가능합니다.</li>
  <li>IP 주소가 변동될 수 있기 때문에, Client는 DNS 주소로 접근하는 것이 좋습니다.<br />
(따라서, EIP를 ALB에 설정해두는 것이 좋습니다.)</li>
</ul>

<p><strong>NLB</strong></p>
<ul>
  <li>TCP/IP 프로토콜의 헤더를 보고 적절한 패킷으로 전송하므로, OSI 모형의 전송 계층(4계층)에서 동작합니다.<br />
(ALB보다 낮은 계층에서 동작하기 때문에 속도가 빠릅니다.)</li>
  <li><code class="language-plaintext highlighter-rouge">IP 주소 + 포트번호</code> 정보를 통해고 스위칭합니다.</li>
  <li>EIP를 이용할 수 있으며, DNS와 IP 주소 모두 사용 가능합니다. (SSL은 사용 불가능)</li>
</ul>

<h2 id="cloud-front">Cloud Front</h2>

<p><strong>Cloud Front의 원리</strong></p>
<ul>
  <li>web server란, 사용자 요청이 들어올 때, 미리 준비된 html 파일을 전송하는 것이 아닌, 프로그래밍 언어를 통해 동적으로 html 파일을 프로그래밍으로 생성하여 응답하는 방식입니다.</li>
  <li>따라서, 더 많은 시간과 비용이 발생합니다. Cloud Front의 첫 번째 역할은 캐시 서버로 사용하는 것입니다.</li>
  <li>전세계에 어디에 있든지 빠른 속도로 접속 가능하도록 해주는 기능을 CDN(Content Delivery Network)이라고 하는데, 전세계에 흩어져있는 AWS의 인프라를 이용하는 캐시서버로 동작하기도 합니다.</li>
  <li>우리의 Web Serve는 사용자를 직접 만나지 않고, Cloud Front를 통해서 만날 수 있습니다. Web Server는 Origin, Cloud Front는 Distribution이라고 말합니다. (AWS 용어)</li>
</ul>

<p><strong>캐시 제어</strong></p>
<ul>
  <li>Cloud Front를 연결하여 캐싱하면, 주기적으로 사이트에 접속할 때 빠른 속도로 리소스를 가져올 수 있지만, Origin 도메인의 데이터가 변경되는 것을 실시간으로 감지할 수 없습니다. (캐싱된 정보만 가져옴)</li>
  <li>이는, Origin 도메인인 Web Serve로 부터, 헤더값 <code class="language-plaintext highlighter-rouge">Cache-Control: max-age=60</code>으로 받아오기 때문입니다. 이는 60초 동안은 정보가 유용하므로 그 시간동안은 요청하지 말라는 것을 의미합니다.</li>
  <li>Cloud Front의 Object Caching 옵션 → Customize로 아래와 같이 설정하여, Cache-Control 헤더의 범위값을 제한할 수 있고, 설정되지 않은 경우 기본 값을 설정할 수 있습니다.<br />
(Minimum TTL: 5 / Maximum TTL: 15 / Default 10)</li>
</ul>]]></content><author><name>Yeham Kim</name></author><category term="Study" /><summary type="html"><![CDATA[Amazon VPC AWS에 생성하는 가상의 네트워크(Virtual Private Cloud)를 의미합니다. EC2나 RDS의 경우, VPC를 먼저 선택해야합니다. VPC내에 서버를 설치하면 해당 네트워크에 소속되지만, 별도로 설정하지 않으면 격리된 네트워크입니다. 외부와 통신하기 위해 인터넷 혹은 회사 LAN과 연결해야합니다.]]></summary></entry><entry><title type="html">[Server] Github action을 활용한 CI/CD 구성</title><link href="http://localhost:4000/server/server-githubaction/" rel="alternate" type="text/html" title="[Server] Github action을 활용한 CI/CD 구성" /><published>2023-07-08T16:05:07+09:00</published><updated>2023-07-08T16:05:07+09:00</updated><id>http://localhost:4000/server/server-githubaction</id><content type="html" xml:base="http://localhost:4000/server/server-githubaction/"><![CDATA[<h2 id="github-action">Github action</h2>

<p><strong>Work Flow 구성</strong></p>
<ul>
  <li>github action에서는 아래 템플릿을 기본적으로 제공합니다.<br />
(Repository -&gt; Actions -&gt; New workflow [배너] -&gt; 원하는 Framework 검색)</li>
  <li>템플릿은 해당 프로젝트 리파지토리의 <code class="language-plaintext highlighter-rouge">/.github/workflows/</code> 디렉토리에 <code class="language-plaintext highlighter-rouge">.yaml</code> 형식으로 작성합니다.</li>
  <li>이 때, <code class="language-plaintext highlighter-rouge">.env</code> 파일 내의 정보는 보안상 workflow에 기입할 수 없으므로, 각각 github repository settings에서 관리합니다.<br />
(Repository -&gt; Settings -&gt; Secrets and variables [Actions])</li>
</ul>

<h3 id="ci-구성">CI 구성</h3>
<ul>
  <li>Django 기본 템플릿을 응용하여 아래와 같이 Github Action 템플릿을 작성합니다.</li>
  <li>간단하게, <code class="language-plaintext highlighter-rouge">feat/</code>으로 시작하는 브랜치에 push/pull 하는 경우 github action이 동작하도록 합니다.</li>
  <li>steps 디렉티브에서 명시한 순서대로 실행 명령어를 수행합니다. 작성한 테스트를 동작시키고, 이상이 있는 경우 작동을 중지합니다.</li>
</ul>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">CI</span>
<span class="na">on</span><span class="pi">:</span>
<span class="na">push</span><span class="pi">:</span>
    <span class="na">branches</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">feat/**'</span>
<span class="na">pull_request</span><span class="pi">:</span>
    <span class="na">branches</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">feat/**'</span>
<span class="na">jobs</span><span class="pi">:</span>
<span class="na">build</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">strategy</span><span class="pi">:</span>
    <span class="na">max-parallel</span><span class="pi">:</span> <span class="m">4</span>
    <span class="na">matrix</span><span class="pi">:</span>
        <span class="c1"># python-version: [3.7, 3.8, 3.9]</span>
        <span class="na">python-version</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">3.9</span><span class="pi">]</span>
    <span class="na">env</span><span class="pi">:</span>
    <span class="na">working-directory</span><span class="pi">:</span> <span class="s">./web/apps/</span>

    <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v3</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Set up Python $</span>
    <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-python@v3</span>
    <span class="na">with</span><span class="pi">:</span>
        <span class="na">python-version</span><span class="pi">:</span> <span class="s">$</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install Dependencies</span>
    <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
        <span class="s">python3 -m pip install --upgrade pip</span>
        <span class="s">pip install -r requirements.txt</span>
    <span class="na">working-directory</span><span class="pi">:</span> <span class="s">$</span>
    
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run Tests</span>
    <span class="na">env</span><span class="pi">:</span>
        <span class="na">DJANGO_SECRET_KEY</span><span class="pi">:</span> <span class="s">$</span>
        <span class="na">DJANGO_SETTINGS_MODULE</span><span class="pi">:</span> <span class="s">$</span>
    <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
        <span class="s">python3 manage.py test</span>
    <span class="na">working-directory</span><span class="pi">:</span> <span class="s">$</span>
</code></pre></div></div>]]></content><author><name>Yeham Kim</name></author><category term="Server" /><summary type="html"><![CDATA[Github action]]></summary></entry><entry><title type="html">[Server] AWS ECS를 사용한 기본적인 배포환경 구성</title><link href="http://localhost:4000/server/server-aws-ecs/" rel="alternate" type="text/html" title="[Server] AWS ECS를 사용한 기본적인 배포환경 구성" /><published>2023-07-08T16:05:07+09:00</published><updated>2023-07-08T16:05:07+09:00</updated><id>http://localhost:4000/server/server-aws-ecs</id><content type="html" xml:base="http://localhost:4000/server/server-aws-ecs/"><![CDATA[<h3 id="최종-목표">최종 목표</h3>
<ul>
  <li>ECS 내에서 nginx와 django를 사용한 서버 구성</li>
  <li>참고: <a href="https://github.com/yamkant/aws-ecs">git repository</a> - 구체적인 코드 및 이미지를 볼 수 있습니다.</li>
  <li>이 후 포스팅: VPC 구성 / ALB 구성 / Network Bridge 모드에서 Namespace 사용</li>
</ul>

<p><strong>순서</strong></p>
<ol>
  <li>AWS ECS CLI 설치 및 계정 생성</li>
  <li>Docker 구성 및 테스트</li>
  <li>ECR 생성 및 업로드</li>
  <li>ECS 클러스터 생성 및 서비스 생성</li>
</ol>

<h3 id="aws-ecs-cli-설치-및-계정-생성">AWS ECS CLI 설치 및 계정 생성</h3>
<ul>
  <li>aws ecs를 위한 CLI를 설치합니다.
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c"># aws ecs를 위한 CLI를 설치합니다.</span>
  <span class="nv">$ </span>curl <span class="s2">"https://awscli.amazonaws.com/AWSCLIV2.pkg"</span> <span class="nt">-o</span> <span class="s2">"AWSCLIV2.pkg"</span>
  <span class="nv">$ </span><span class="nb">sudo </span>installer <span class="nt">-pkg</span> AWSCLIV2.pkg <span class="nt">-target</span> /
</code></pre></div>    </div>
  </li>
  <li>AWS CLI에 접근하기 위해 아래 값들을 설정합니다.
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nv">$ </span>aws configure
  AWS Access Key ID <span class="o">[</span>None]: ACCESS_KEY_ID
  AWS Secret Access Key <span class="o">[</span>None]: SECRET_ACCESS_KEY
  Default region name <span class="o">[</span>None]: ap-northeast-2
  Default output format <span class="o">[</span>None]: json
</code></pre></div>    </div>
  </li>
  <li>
    <p>configure 설정이 끝나면 <code class="language-plaintext highlighter-rouge">~/.aws/credentials</code> 폴더가 생성됩니다.</p>
  </li>
  <li>ECS CLI를 사용하기 위해 IAM 권한을 가진 계정을 생성합니다.<br />
(위에서 configure에 등록한 계정은 <code class="language-plaintext highlighter-rouge">iam:CreateUser</code> 권한 필요 - <code class="language-plaintext highlighter-rouge">IAMUserFullAccess</code> 정책을 부여했습니다.)
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nv">$ </span>aws iam create-user <span class="nt">--user-name</span> ecs-user
  <span class="o">&gt;</span> <span class="s2">"Arn"</span>: <span class="s2">"arn:aws:iam::301869408653:user/ecs-user"</span>

  <span class="nv">$ </span>aws iam create-access-key <span class="nt">--user-name</span> ecs-user
  <span class="o">&gt;</span> <span class="s2">"AccessKeyId"</span>: <span class="s2">"AKIAUMSGRUGGXHHX6257"</span>,
  <span class="o">&gt;</span> <span class="s2">"SecretAccessKey"</span>: <span class="s2">"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"</span>

  <span class="c"># ECS 접근을 위한 정책들을 설정합니다.</span>
  <span class="nv">$ </span>aws iam attach-user-policy <span class="se">\</span>
      <span class="nt">--policy-arn</span> arn:aws:iam::aws:policy/AmazonEC2FullAccess <span class="nt">--user-name</span> ecs-user
  <span class="nv">$ </span>aws iam attach-user-policy <span class="se">\</span>
      <span class="nt">--policy-arn</span> arn:aws:iam::aws:policy/AmazonECS_FullAccess <span class="nt">--user-name</span> ecs-user
  <span class="nv">$ </span>aws iam attach-user-policy <span class="se">\</span>
      <span class="nt">--policy-arn</span> arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess <span class="nt">--user-name</span> ecs-user

  <span class="c"># 아래 json 파일을 생성한 후, 해당 경로에서 명령어를 실행하여 정책을 추가합니다.</span>
  <span class="nv">$ </span>aws iam create-policy <span class="nt">--policy-name</span> ecsUserPolicy <span class="nt">--policy-document</span> file://ecs-user-policy.json
  <span class="o">&gt;</span> <span class="s2">"PolicyId"</span>: <span class="s2">"ANPAUMSGRUGG5Z2CWN5G3"</span>,
  <span class="o">&gt;</span> <span class="s2">"Arn"</span>: <span class="s2">"arn:aws:iam::301869408653:policy/ecsUserPolicy"</span>,

  <span class="nv">$ </span>aws iam attach-user-policy <span class="se">\</span>
      <span class="nt">--policy-arn</span> arn:aws:iam::301869408653:policy/ecsUserPolicy <span class="se">\</span>
      <span class="nt">--user-name</span> ecs-user
    
  <span class="c"># 위에서 생성한 ecs-user로 access key와 secret key를 등록하여 다시 인증합니다.</span>
  <span class="nv">$ </span>aws configure
</code></pre></div>    </div>
    <p>ecs-user 추가적인 권한 설정을 위한 정책</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  # ecs-user-policy.json
  {
      "Version": "2012-10-17",
      "Statement": [{
          "Effect": "Allow",
          "Action": [
              "iam:PassRole"
          ],
          "Resource": "arn:aws:iam::301869408653:role/ApplicationAutoscalingECSRole"
      }, {
          "Effect": "Allow",
          "Action": [
              "ec2:DescribeAddresses",
              "ec2:AllocateAddress",
              "ec2:DescribeInstances",
              "ec2:AssociateAddress"
              "ecr:CreateRepository"
          ],
          "Resource": "*"
      }]
  }
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="docker-구성-및-ecr-업로드">Docker 구성 및 ECR 업로드</h3>
<p><strong>간단한 설명</strong></p>
<ul>
  <li>ecs에서의 최소 단위는 “태스크”이며, 하나의 태스크 내에는 다수의 이미지 파일을 사용할 수 있습니다.</li>
  <li>하나의 “태스크”를 구성할 때 빌드시킬 도커 이미지는 ECR이라고 하는 저장소에 push 해야합니다.</li>
</ul>

<p><strong>ECR 등록 및 업로드</strong></p>
<ul>
  <li>ECR 로그인
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nv">$ </span>aws ecr get-login-password  <span class="se">\</span>
      <span class="nt">--region</span> ap-northeast-2 | docker login <span class="nt">--username</span> AWS <span class="se">\</span>
      <span class="nt">--password-stdin</span> 301869408653.dkr.ecr.ap-northeast-2.amazonaws.com
</code></pre></div>    </div>
  </li>
  <li>ECR Repository 생성
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nv">$ </span>aws ecr create-repository <span class="nt">--repository-name</span> my-web
  <span class="o">&gt;</span> <span class="s2">"repositoryUri"</span>: <span class="s2">"301869408653.dkr.ecr.ap-northeast-2.amazonaws.com/my-web"</span>
  <span class="nv">$ </span>aws ecr create-repository <span class="nt">--repository-name</span> my-nginx
  <span class="o">&gt;</span> <span class="s2">"repositoryArn"</span>: <span class="s2">"arn:aws:ecr:ap-northeast-2:301869408653:repository/my-nginx"</span>
</code></pre></div>    </div>
  </li>
  <li><a href="https://github.com/yamkant/aws-ecs/tree/main/srcs/ecr">Docker 구성 및 테스트</a>를 참고하여 ecr 업로드 전 실행을 확인합니다.</li>
  <li>ECR 등록을 위한 이미지 태깅 및 docker push. 결과: <a href="https://github.com/yamkant/aws-ecs/blob/main/srcs/images/ecs-ecr-setting.png">ECR 이미지 구성 예시</a>
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c"># nginx 이미지 태그 및 업로드</span>
  <span class="nv">$ </span>docker tag my-nginx:latest 301869408653.dkr.ecr.ap-northeast-2.amazonaws.com/my-nginx:latest
  <span class="nv">$ </span>docker push 301869408653.dkr.ecr.ap-northeast-2.amazonaws.com/my-nginx:latest

  <span class="c"># web 이미지 태그 및 업로드</span>
  <span class="nv">$ </span>docker tag my-web:latest 301869408653.dkr.ecr.ap-northeast-2.amazonaws.com/my-web:latest
  <span class="nv">$ </span>docker push 301869408653.dkr.ecr.ap-northeast-2.amazonaws.com/my-web:latest
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="ecs-클러스터-및-서비스-구성">ECS 클러스터 및 서비스 구성</h3>
<p><a href="https://github.com/yamkant/aws-ecs/blob/main/srcs/images/ecs-cluster-setting.png">ECS cluster 생성 예시</a></p>
<ul>
  <li>빠른 구현을 위해 <code class="language-plaintext highlighter-rouge">VPC</code>는 기본으로, EC2를 이용한 서버 구성으로 진행합니다. (프리티어 사용 가능)</li>
  <li>일정 시간이 지나고, 클러스터가 생성된 직 후, EC2 대시보드를 보면 인스턴스도 함께 생성됩니다.</li>
  <li>새로 생성된 인스턴스 특징: <code class="language-plaintext highlighter-rouge">IAM: ecsInstanceRole</code>, <code class="language-plaintext highlighter-rouge">AMI: ami-ecs</code>, <code class="language-plaintext highlighter-rouge">ASG(Auto Scailing Group) 설정됨</code>, <code class="language-plaintext highlighter-rouge">기본 보안 그룹 설정</code></li>
  <li>따라서, 만약 ECS에 등록된 인스턴스를 추가하고자 하면, 위의 설정을 그대로 EC2를 생성하면 됩니다.</li>
</ul>

<h3 id="태스크-정의-생성-host-모드">태스크 정의 생성 (host 모드)</h3>
<p><strong>컨테이너 - 1</strong></p>
<ul>
  <li>이름: web</li>
  <li>이미지 URI: 301869408653.dkr.ecr.ap-northeast-2.amazonaws.com/my-web</li>
  <li>컨테이너 포트: 8000</li>
  <li>환경 파일 추가: S3에서 호스팅된 파일의 ARN 경로를 기입합니다.</li>
</ul>

<p><strong>컨테이너 - 2</strong></p>
<ul>
  <li>이름: nginx</li>
  <li>이미지 URI: 301869408653.dkr.ecr.ap-northeast-2.amazonaws.com/my-nginx</li>
  <li>컨테이너 포트: 80</li>
</ul>

<p><strong>환경, 스토리지, 모니터링 및 태그 구성</strong></p>
<ul>
  <li>앱 환경: Amazon EC2 인스턴스</li>
  <li>CPU: 0.125 vCPU / 메모리: 0.25 GB</li>
  <li>태스크 실행 역할: ecsTaskExcutionRole</li>
  <li>네트워크 모드: host</li>
</ul>

<p><strong>태스크 정의에 대한 설명</strong></p>
<ul>
  <li>ecs의 네트워크 모드를 host로 하면, 태스크 정의 내의 모든 컨테이너는 host의 네트워크와 같은 주소를 가집니다.</li>
  <li>따라서, nginx 내에서 127.0.0.1:8000으로 <code class="language-plaintext highlighter-rouge">web</code> 컨테이너와 통신할 수 있습니다.</li>
  <li>태스크 실행 역할의 경우, 처음 생성할 때 자동으로 부여됩니다. S3를 사용하기 위해서는 접근 권한이 필요한데, <code class="language-plaintext highlighter-rouge">ecsTaskExcutionRole</code> 역할에 <code class="language-plaintext highlighter-rouge">AmazonS3FullAccess</code> 정책을 추가할 수 있습니다.</li>
</ul>

<h3 id="서비스-생성-ec2-인스턴스-기반">서비스 생성 (EC2 인스턴스 기반)</h3>
<p><strong>환경</strong></p>
<ul>
  <li>컴퓨팅 옵션: 시작유형</li>
  <li>시작 유형: EC2</li>
</ul>

<p><strong>배포 구성</strong></p>
<ul>
  <li>애플리케이션 유형: 서비스</li>
  <li>패밀리: 위에서 생성한 태스크 정의</li>
  <li>서비스 유형: 복제본</li>
</ul>

<p><strong>서비스 생성에 대한 설명</strong></p>
<ul>
  <li>시작유형을 EC2로 하는 기본적인 서비스를 실행합니다.</li>
  <li>서비스 연결을 통한 네임스페이스 사용과 로드밸런싱 추가 부분은 위 동작이 정상적으로 작동하면 추가하는 방식으로 진행합니다.</li>
  <li>생성이 완료되면, 태스크가 동작하고 있는 EC2에 연결하여 <code class="language-plaintext highlighter-rouge">docker</code> 관련 명령어를 통해 상태를 모니터링 할 수 있습니다.</li>
  <li>또한, 해당 EC2의 보안 그룹에 설정된 인바운드 규칙에 따라 포트가 개방되며, EC2의 퍼블릭 IP로 서비스가 호스팅하는 웹사이트에 접속 가능합니다.</li>
</ul>]]></content><author><name>Yeham Kim</name></author><category term="Server" /><summary type="html"><![CDATA[최종 목표 ECS 내에서 nginx와 django를 사용한 서버 구성 참고: git repository - 구체적인 코드 및 이미지를 볼 수 있습니다. 이 후 포스팅: VPC 구성 / ALB 구성 / Network Bridge 모드에서 Namespace 사용]]></summary></entry><entry><title type="html">[Django] 테스트는 어떻게 수행할까?</title><link href="http://localhost:4000/django%20strategy/django-test/" rel="alternate" type="text/html" title="[Django] 테스트는 어떻게 수행할까?" /><published>2023-06-09T10:05:07+09:00</published><updated>2023-06-09T10:05:07+09:00</updated><id>http://localhost:4000/django%20strategy/django-test</id><content type="html" xml:base="http://localhost:4000/django%20strategy/django-test/"><![CDATA[<h3 id="작성이유-및-목표">작성이유 및 목표</h3>
<ul>
  <li>흔히 리팩토링을 위해서, 발생할 법할 문제들을 미리 파악하기 위해서, 어떤 방식으로 사용하는지 명시하기 위해서 테스트를 작성합니다.</li>
  <li>알고리즘 문제를 풀면서 또한 테스트 케이스의 중요성과 백엔드 개발자들이 왜 테스트 커버리지를 채워나가는데 집착하는지를 느끼게 됩니다.</li>
  <li>해당 게시글에서는 Django를 통해 e2e, integration 테스트를 하기 위한 간단한 예시를 작성합니다.</li>
  <li>커스텀 유저를 위한 members 도메인을 예시로 설명합니다.</li>
</ul>

<h3 id="폴더-경로">폴더 경로</h3>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>web/
<span class="p">-</span> apps/
<span class="p">  -</span> config/
<span class="p">  -</span> core/
<span class="p">    -</span> tests.py
<span class="p">  -</span> members/
<span class="p">    -</span> tests/
<span class="p">      -</span> integration.py
<span class="p">      -</span> e2e.py
</code></pre></div></div>

<h2 id="integration-test">Integration test</h2>
<p>외부 라이브러리와 같이 의존적인 부분을 함께 테스트합니다. Django에서는 test DB를 수월하게 만들고 수정하게 할 수 있습니다.</p>

<h3 id="기본-테스트-클래스-설명">기본 테스트 클래스 설명</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># apps/core/tests.py
</span>
<span class="kn">from</span> <span class="n">django.test</span> <span class="kn">import</span> <span class="n">TestCase</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Dict</span>
<span class="kn">from</span> <span class="n">django.core.serializers.base</span> <span class="kn">import</span> <span class="n">Serializer</span>

<span class="kn">from</span> <span class="n">django.db</span> <span class="kn">import</span> <span class="n">connection</span><span class="p">,</span> <span class="n">reset_queries</span>
<span class="kn">from</span> <span class="n">django.test</span> <span class="kn">import</span> <span class="n">TestCase</span><span class="p">,</span> <span class="n">override_settings</span>

<span class="k">class</span> <span class="nc">TestSerializerHelper</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">serializer</span><span class="p">:</span> <span class="n">Serializer</span><span class="p">,</span> <span class="n">queryCnt</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">0</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">serializer</span> <span class="o">=</span> <span class="n">serializer</span>
        <span class="n">self</span><span class="p">.</span><span class="n">queryCnt</span> <span class="o">=</span> <span class="n">queryCnt</span>

    <span class="k">def</span> <span class="nf">_create</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="n">serializer</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">serializer</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">serializer</span><span class="p">.</span><span class="nf">is_valid</span><span class="p">():</span>
            <span class="n">instance</span> <span class="o">=</span> <span class="n">serializer</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">instance</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">serializer</span><span class="p">.</span><span class="nf">is_valid</span><span class="p">(</span><span class="n">raise_exception</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">create</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="n">createData</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_create</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">queryCnt</span><span class="p">:</span>
            <span class="n">createData</span> <span class="o">=</span> <span class="nf">wrapFunctionForQueryCount</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">queryCnt</span><span class="p">)(</span><span class="n">self</span><span class="p">.</span><span class="n">_create</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">createData</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">]):</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">serializer</span><span class="p">.</span><span class="n">serializer_type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">create</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">IntegrationSerializerTestCase</span><span class="p">(</span><span class="n">TestCase</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">serializer_test</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">expectedQueryCount</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">expectedResult</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">bool</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="o">**</span><span class="n">data</span><span class="p">,</span>
    <span class="p">):</span>
        <span class="n">testSerializerHelper</span> <span class="o">=</span> <span class="nc">TestSerializerHelper</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">serializer</span><span class="p">,</span> <span class="n">expectedQueryCount</span><span class="p">)</span>

        <span class="n">instance</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">instance</span> <span class="o">=</span> <span class="n">testSerializerHelper</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span><span class="n">expectedResult</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span><span class="n">expectedResult</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">instance</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">IntegrationSerializerTestCase</code>는 serializer의 integration 테스트를 위해 구성한 <code class="language-plaintext highlighter-rouge">TestCase</code> 클래스입니다.</li>
  <li>테스트를 수행하기 위해 이를 상속한 클래스에서 테스트를 위한 <code class="language-plaintext highlighter-rouge">serializer</code>를 클래스 변수로 지정하면 해당 <code class="language-plaintext highlighter-rouge">TestCase</code>에서 이를 활용하는 방식입니다.
(상속하여 사용하는 방식 이 후 설명)</li>
  <li>얼마나 많은 sql query를 호출했는지 평가하기 위해 DB 호출 부분을 <code class="language-plaintext highlighter-rouge">wrapFunctionForQueryCount</code>로 감싸서 사용합니다.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="bp">...</span>
  <span class="kn">from</span> <span class="n">django.db</span> <span class="kn">import</span> <span class="n">connection</span><span class="p">,</span> <span class="n">reset_queries</span>
  <span class="bp">...</span>

  <span class="k">def</span> <span class="nf">wrapFunctionForQueryCount</span><span class="p">(</span><span class="n">count</span><span class="p">):</span>
  <span class="k">def</span> <span class="nf">decorator</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
      <span class="nd">@override_settings</span><span class="p">(</span><span class="n">DEBUG</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
      <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
          <span class="nf">reset_queries</span><span class="p">()</span>
          <span class="n">ret</span> <span class="o">=</span> <span class="nf">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
          <span class="n">queries</span> <span class="o">=</span> <span class="n">connection</span><span class="p">.</span><span class="n">queries</span>
          <span class="k">for</span> <span class="n">query</span> <span class="ow">in</span> <span class="n">queries</span><span class="p">:</span>
              <span class="c1"># TODO: Logger 사용하여 출력결과 저장
</span>              <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">QUERY: </span><span class="si">{</span><span class="n">query</span><span class="p">[</span><span class="sh">'</span><span class="s">sql</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="s">, TIME: </span><span class="si">{</span><span class="n">query</span><span class="p">[</span><span class="sh">'</span><span class="s">time</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
          <span class="k">assert</span> <span class="nf">len</span><span class="p">(</span><span class="n">queries</span><span class="p">)</span> <span class="o">==</span> <span class="n">count</span><span class="p">,</span> <span class="sh">"</span><span class="s">QUERY COUNT:%d != %d</span><span class="sh">"</span> <span class="o">%</span> <span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">queries</span><span class="p">),</span> <span class="n">count</span><span class="p">)</span>
          <span class="k">return</span> <span class="n">ret</span>
      <span class="k">return</span> <span class="n">wrapper</span>
  <span class="k">return</span> <span class="n">decorator</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><strong>Serializer 구성</strong></p>
<ul>
  <li>저는 생성을 위해 사용하는 <code class="language-plaintext highlighter-rouge">ExampleCreateSerializer</code>는 <code class="language-plaintext highlighter-rouge">core.serializers.CreateSerializer</code>를 상속받도록 생성합니다.</li>
  <li>따라서, 내부에 어떤 타입의 serializer인지 명시하기 때문에, <code class="language-plaintext highlighter-rouge">TestSerialize.run()</code>과 같이 사용할 수 있습니다.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1"># core.sesrializers.CreateSerializer
</span>  <span class="kn">from</span> <span class="n">rest_framework</span> <span class="kn">import</span> <span class="n">serializers</span>

  <span class="k">class</span> <span class="nc">CreateSerializer</span><span class="p">(</span><span class="n">serializers</span><span class="p">.</span><span class="n">ModelSerializer</span><span class="p">):</span>
      <span class="n">representation_serializer_class</span> <span class="o">=</span> <span class="bp">None</span>
      <span class="n">serializer_type</span> <span class="o">=</span> <span class="sh">"</span><span class="s">create</span><span class="sh">"</span>

      <span class="k">def</span> <span class="nf">to_representation</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">instance</span><span class="p">):</span>
          <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">representation_serializer_class</span><span class="p">(</span><span class="n">instance</span><span class="o">=</span><span class="n">instance</span><span class="p">).</span><span class="n">data</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="기본-테스트-클래스를-상속받는-테스트-예시">기본 테스트 클래스를 상속받는 테스트 예시</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># apps/members/tests.integration.py
</span><span class="kn">from</span> <span class="n">django.urls</span> <span class="kn">import</span> <span class="n">reverse</span>
<span class="kn">from</span> <span class="n">core.tests</span> <span class="kn">import</span> <span class="n">IntegrationSerializerTestCase</span>
<span class="kn">from</span> <span class="n">members.serializers</span> <span class="kn">import</span> <span class="n">MemberCreateSerializer</span>

<span class="k">class</span> <span class="nc">MemberCreateSerializerTest</span><span class="p">(</span><span class="n">IntegrationSerializerTestCase</span><span class="p">):</span>
    <span class="n">serializer</span> <span class="o">=</span> <span class="n">MemberCreateSerializer</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">setUpTestData</span><span class="p">(</span><span class="n">cls</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">pass</span>

    <span class="c1"># 1st query: unique phone number check
</span>    <span class="c1"># 2nd query: insert new member
</span>    
    <span class="k">def</span> <span class="nf">test_success</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">instance</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">serializer_test</span><span class="p">(</span>
            <span class="n">expectedQueryCount</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span>
            <span class="n">expectedResult</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
            <span class="n">phone</span><span class="o">=</span><span class="sh">"</span><span class="s">01050175933</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">password</span><span class="o">=</span><span class="sh">"</span><span class="s">5933</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">password2</span><span class="o">=</span><span class="sh">"</span><span class="s">5933</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span><span class="n">instance</span><span class="p">.</span><span class="n">phone</span><span class="p">,</span> <span class="sh">"</span><span class="s">01050175933</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">test_mismatch_password</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">instance</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">serializer_test</span><span class="p">(</span>
            <span class="n">expectedQueryCount</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
            <span class="n">expectedResult</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
            <span class="n">phone</span><span class="o">=</span><span class="sh">"</span><span class="s">01050175933</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">password</span><span class="o">=</span><span class="sh">"</span><span class="s">5933</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">password2</span><span class="o">=</span><span class="sh">"</span><span class="s">59332</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">)</span>

    <span class="k">def</span> <span class="nf">test_empty_phone</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">instance</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">serializer_test</span><span class="p">(</span>
            <span class="n">expectedQueryCount</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
            <span class="n">expectedResult</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
            <span class="n">phone</span><span class="o">=</span><span class="sh">""</span><span class="p">,</span>
            <span class="n">password</span><span class="o">=</span><span class="sh">"</span><span class="s">5933</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">password2</span><span class="o">=</span><span class="sh">"</span><span class="s">59333</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">)</span>

    <span class="k">def</span> <span class="nf">test_register_repeated_phone</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">instance</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">serializer_test</span><span class="p">(</span>
            <span class="n">expectedResult</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
            <span class="n">phone</span><span class="o">=</span><span class="sh">"</span><span class="s">01050175933</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">password</span><span class="o">=</span><span class="sh">"</span><span class="s">5933</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">password2</span><span class="o">=</span><span class="sh">"</span><span class="s">5933</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="n">instance</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">serializer_test</span><span class="p">(</span>
            <span class="n">expectedQueryCount</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
            <span class="n">expectedResult</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
            <span class="n">phone</span><span class="o">=</span><span class="sh">"</span><span class="s">01050175933</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">password</span><span class="o">=</span><span class="sh">"</span><span class="s">5933</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">password2</span><span class="o">=</span><span class="sh">"</span><span class="s">5933</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">)</span>
</code></pre></div></div>
<ul>
  <li>위와 같이, member 생성 테스트를 위한 테스트 클래스는 앞서 설명한 기본 테스트 클래스를 상속받습니다.</li>
  <li>기대하는 결과(생성이므로 생성되었는지)가 잘 반환되었는지, 테스트 중 오류는 없는지 확인할 수 있습니다.</li>
</ul>]]></content><author><name>Yeham Kim</name></author><category term="Django Strategy" /><summary type="html"><![CDATA[작성이유 및 목표 흔히 리팩토링을 위해서, 발생할 법할 문제들을 미리 파악하기 위해서, 어떤 방식으로 사용하는지 명시하기 위해서 테스트를 작성합니다. 알고리즘 문제를 풀면서 또한 테스트 케이스의 중요성과 백엔드 개발자들이 왜 테스트 커버리지를 채워나가는데 집착하는지를 느끼게 됩니다. 해당 게시글에서는 Django를 통해 e2e, integration 테스트를 하기 위한 간단한 예시를 작성합니다. 커스텀 유저를 위한 members 도메인을 예시로 설명합니다.]]></summary></entry><entry><title type="html">Django Custom User</title><link href="http://localhost:4000/django-custom-user/" rel="alternate" type="text/html" title="Django Custom User" /><published>2023-06-04T00:00:00+09:00</published><updated>2023-06-04T00:00:00+09:00</updated><id>http://localhost:4000/django-custom-user</id><content type="html" xml:base="http://localhost:4000/django-custom-user/"><![CDATA[<p>Django custom user 생성을 위한 설정 추가</p>

<p><strong>작업을 위한 Directory Level</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>web
- apps/
  - config/
    - settings/
      - base.py
      - development.py
      - production.py
    ...
  - core/
    - serializers.py
    - models.py
    ...
  - members/
    - urls/
      - members.py
    - models.py
    - serializers.py
    - views.py
    ...
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config.settings.base.py
</span><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="bp">...</span>
    <span class="sh">'</span><span class="s">members</span><span class="sh">'</span><span class="p">,</span>
<span class="p">]</span>

<span class="n">AUTH_USER_MODEL</span> <span class="o">=</span> <span class="sh">'</span><span class="s">members.Member</span><span class="sh">'</span>

</code></pre></div></div>
<ul>
  <li>config 앱의 base setting 파일에서 members 앱을 추가하고, AUTH_USER를 Member 모델로 대체하기 위한 작업을 수행합니다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># members.models.py
</span>
<span class="kn">from</span> <span class="n">core.models</span> <span class="kn">import</span> <span class="n">BaseModel</span>
<span class="kn">from</span> <span class="n">django.contrib.auth.models</span> <span class="kn">import</span> <span class="n">AbstractUser</span><span class="p">,</span> <span class="n">BaseUserManager</span>
<span class="kn">from</span> <span class="n">django.core.validators</span> <span class="kn">import</span> <span class="n">RegexValidator</span>
<span class="kn">from</span> <span class="n">django.db</span> <span class="kn">import</span> <span class="n">models</span>

<span class="k">class</span> <span class="nc">MemberManager</span><span class="p">(</span><span class="n">BaseUserManager</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">createMember</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">phone</span><span class="p">,</span> <span class="n">password</span><span class="p">):</span>
        <span class="n">member</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">model</span><span class="p">(</span><span class="n">phone</span><span class="o">=</span><span class="n">phone</span><span class="p">)</span>
        <span class="n">member</span><span class="p">.</span><span class="nf">set_password</span><span class="p">(</span><span class="n">password</span><span class="p">)</span>
        <span class="n">member</span><span class="p">.</span><span class="nf">save</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">member</span>

<span class="k">class</span> <span class="nc">Member</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">,</span> <span class="n">AbstractUser</span><span class="p">):</span>
    <span class="n">username</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="n">phone</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">CharField</span><span class="p">(</span>
        <span class="n">unique</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
        <span class="n">max_length</span><span class="o">=</span><span class="mi">11</span><span class="p">,</span>
        <span class="n">validators</span><span class="o">=</span><span class="p">[</span>
            <span class="nc">RegexValidator</span><span class="p">(</span>
                <span class="sa">r</span><span class="sh">"</span><span class="s">^01[016789][0-9]{7,8}$</span><span class="sh">"</span><span class="p">,</span>
                <span class="n">message</span><span class="o">=</span><span class="sh">"</span><span class="s">This phone number format is invalid.</span><span class="sh">"</span><span class="p">,</span>
            <span class="p">)</span>
        <span class="p">]</span>
    <span class="p">)</span>
    <span class="n">objects</span> <span class="o">=</span> <span class="nc">MemberManager</span><span class="p">()</span>

    <span class="n">USERNAME_FIELD</span> <span class="o">=</span> <span class="sh">"</span><span class="s">phone</span><span class="sh">"</span>

    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">managed</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="n">db_table</span> <span class="o">=</span> <span class="sh">'</span><span class="s">members</span><span class="sh">'</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Member</code> 모델은 <code class="language-plaintext highlighter-rouge">USERNAME_FIELD</code>를 핸드폰 번호로 대체합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">Member.objects</code>의 메서드를 추가하기 위해 MemberManager(Django 기본 유저를 제어하기 위해 사용하는 BaseUserManager 상속)를 생성합니다.</li>
  <li>따라서, <code class="language-plaintext highlighter-rouge">Member.objects.createMember</code> phone와 password 필드를 각각 설정합니다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># core.serailizers.py
</span><span class="kn">from</span> <span class="n">rest_framework</span> <span class="kn">import</span> <span class="n">serializers</span>

<span class="k">class</span> <span class="nc">CreateSerializer</span><span class="p">(</span><span class="n">serializers</span><span class="p">.</span><span class="n">ModelSerializer</span><span class="p">):</span>
    <span class="n">representation_serializer_class</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">to_representation</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">instance</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">representation_serializer_class</span><span class="p">(</span><span class="n">instance</span><span class="o">=</span><span class="n">instance</span><span class="p">).</span><span class="n">data</span>
</code></pre></div></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># members.serializers.py
</span><span class="kn">from</span> <span class="n">rest_framework</span> <span class="kn">import</span> <span class="n">serializers</span>
<span class="kn">from</span> <span class="n">core.serializers</span> <span class="kn">import</span> <span class="n">CreateSerializer</span>

<span class="kn">from</span> <span class="n">members.models</span> <span class="kn">import</span> <span class="n">Member</span>

<span class="k">class</span> <span class="nc">MemberSerializer</span><span class="p">(</span><span class="n">serializers</span><span class="p">.</span><span class="n">ModelSerializer</span><span class="p">):</span>
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">Member</span>
        <span class="n">fields</span> <span class="o">=</span> <span class="p">[</span>
            <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">phone</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">]</span>
        <span class="n">read_only_fields</span> <span class="o">=</span> <span class="n">fields</span>

<span class="k">class</span> <span class="nc">MemberCreateSerializer</span><span class="p">(</span><span class="n">CreateSerializer</span><span class="p">):</span>
    <span class="n">representation_serializer_class</span> <span class="o">=</span> <span class="n">MemberSerializer</span>
    <span class="n">password2</span> <span class="o">=</span> <span class="n">serializers</span><span class="p">.</span><span class="nc">CharField</span><span class="p">(</span><span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">Member</span>
        <span class="n">fields</span> <span class="o">=</span> <span class="p">(</span>
            <span class="sh">"</span><span class="s">phone</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">password</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">password2</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">validate</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">password</span><span class="sh">'</span><span class="p">]</span> <span class="o">!=</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">password2</span><span class="sh">'</span><span class="p">]:</span>
            <span class="k">raise</span> <span class="n">serializers</span><span class="p">.</span><span class="nc">ValidationError</span><span class="p">({</span><span class="sh">"</span><span class="s">password2</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">This is different with password.</span><span class="sh">"</span><span class="p">})</span>
        <span class="k">return</span> <span class="n">data</span>
    
    <span class="k">def</span> <span class="nf">create</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">validated_data</span><span class="p">):</span>
        <span class="n">validated_data</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="sh">'</span><span class="s">password2</span><span class="sh">'</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">Member</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">createMember</span><span class="p">(</span><span class="o">**</span><span class="n">validated_data</span><span class="p">)</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">core.serializers.CreateSerializer</code>를 상속하여 <code class="language-plaintext highlighter-rouge">to_representation</code>을 통해 내부에서 <code class="language-plaintext highlighter-rouge">ModelSerializer</code>를 직렬화하여 사용합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">view</code>에서 <code class="language-plaintext highlighter-rouge">member</code>를 생성하기 위해 호출할 <code class="language-plaintext highlighter-rouge">serializer</code>를 추가합니다.</li>
  <li>일반적으로 <code class="language-plaintext highlighter-rouge">MemberSerializer</code>를 통해서 <code class="language-plaintext highlighter-rouge">Member</code> 모델의 <code class="language-plaintext highlighter-rouge">id</code> 값과 <code class="language-plaintext highlighter-rouge">phone(로그인 아이디)</code> 값을 사용합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">MemberCreateSerializer</code>는 <code class="language-plaintext highlighter-rouge">password2</code>를 추가적으로 정의하고, 그 외의 필드는 <code class="language-plaintext highlighter-rouge">MemberSerializer</code>에서 serialize하여 사용합니다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># members.views.py
</span>
<span class="kn">from</span> <span class="n">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span>

<span class="c1"># Create your views here.
</span><span class="kn">from</span> <span class="n">rest_framework.generics</span> <span class="kn">import</span> <span class="n">CreateAPIView</span>
<span class="kn">from</span> <span class="n">rest_framework.permissions</span> <span class="kn">import</span> <span class="n">AllowAny</span>
<span class="kn">from</span> <span class="n">members.serializers</span> <span class="kn">import</span> <span class="n">MemberCreateSerializer</span>

<span class="kn">from</span> <span class="n">drf_spectacular.types</span> <span class="kn">import</span> <span class="n">OpenApiTypes</span>
<span class="kn">from</span> <span class="n">drf_spectacular.utils</span> <span class="kn">import</span> <span class="n">OpenApiExample</span><span class="p">,</span> <span class="n">OpenApiParameter</span><span class="p">,</span> <span class="n">extend_schema_view</span>
<span class="kn">from</span> <span class="n">drf_spectacular.utils</span> <span class="kn">import</span> <span class="n">extend_schema</span>
<span class="kn">from</span> <span class="n">members.serializers</span> <span class="kn">import</span> <span class="n">MemberCreateSerializer</span>

<span class="nd">@extend_schema</span><span class="p">(</span>
    <span class="n">tags</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">사용자</span><span class="sh">"</span><span class="p">],</span>
    <span class="n">summary</span><span class="o">=</span><span class="sh">"</span><span class="s">새로운 사용자를 추가합니다.</span><span class="sh">"</span><span class="p">,</span>
<span class="p">)</span>
<span class="k">class</span> <span class="nc">MemberCreateAPIView</span><span class="p">(</span><span class="n">CreateAPIView</span><span class="p">):</span>
    <span class="n">permission_classes</span> <span class="o">=</span> <span class="p">[</span><span class="n">AllowAny</span><span class="p">]</span>
    <span class="n">serializer_class</span> <span class="o">=</span> <span class="n">MemberCreateSerializer</span>
</code></pre></div></div>
<ul>
  <li>간단히 generic view를 사용하여 새로운 유저를 생성하는 방식을 추가합니다.</li>
</ul>

<hr />

<h2 id="jwt-인증-방식-추가-설정하는-방법">JWT 인증 방식 추가 설정하는 방법</h2>

<p>jwt access token 및 refresh token을 관리하는 모듈을 설치합니다.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>pip <span class="nb">install </span>djangorestframework-simplejwt
</code></pre></div></div>

<p>settings.py에서 <code class="language-plaintext highlighter-rouge">DEFALT_AUTHENTICATION_CLASSES</code>와 <code class="language-plaintext highlighter-rouge">DEFAULT_PERMISSIONS_CLASSES</code>를 정의합니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config.settings.base.py
</span>
<span class="bp">...</span>

<span class="c1"># 기본 스키마는 drf-spectacular를 사용하고 있습니다.
</span><span class="n">REST_FRAMEWORK</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">'</span><span class="s">DEFAULT_SCHEMA_CLASS</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">drf_spectacular.openapi.AutoSchema</span><span class="sh">'</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">DEFAULT_AUTHENTICATION_CLASSES</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span>
        <span class="sh">"</span><span class="s">rest_framework_simplejwt.authentication.JWTAuthentication</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">),</span>
    <span class="sh">"</span><span class="s">DEFAULT_PERMISSION_CLASSES</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span>
        <span class="sh">"</span><span class="s">rest_framework.permissions.IsAuthenticated</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">],</span>
    <span class="bp">...</span>
<span class="p">}</span>
</code></pre></div></div>

<p>기존 simlejwt 모듈의 제너릭뷰를 그대로 사용합니다. (필요에 따라서 auth 앱을 추가적으로 만들어 사용합니다.)</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># members.views.py
</span>
<span class="bp">...</span>
<span class="kn">from</span> <span class="n">rest_framework_simplejwt</span> <span class="kn">import</span> <span class="n">views</span> <span class="k">as</span> <span class="n">jwt_views</span>

<span class="bp">...</span>
<span class="k">class</span> <span class="nc">TokenCreateAPIView</span><span class="p">(</span><span class="n">jwt_views</span><span class="p">.</span><span class="n">TokenObtainPairView</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="k">class</span> <span class="nc">TokenRefreshAPIView</span><span class="p">(</span><span class="n">jwt_views</span><span class="p">.</span><span class="n">TokenRefreshView</span><span class="p">):</span>
    <span class="k">pass</span>
    
<span class="k">class</span> <span class="nc">TokenBlackListAPIView</span><span class="p">(</span><span class="n">jwt_views</span><span class="p">.</span><span class="n">TokenBlacklistView</span><span class="p">):</span>
    <span class="k">pass</span>
</code></pre></div></div>

<p>jwt 관련 라우팅을 위해 url을 설정합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># members.urls.auth.py
</span><span class="kn">from</span> <span class="n">django.urls</span> <span class="kn">import</span> <span class="n">path</span>
<span class="kn">from</span> <span class="n">members.views</span> <span class="kn">import</span> <span class="n">TokenBlackListAPIView</span><span class="p">,</span> <span class="n">TokenCreateAPIView</span><span class="p">,</span> <span class="n">TokenRefreshAPIView</span>

<span class="n">app_name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">auth</span><span class="sh">"</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="nf">path</span><span class="p">(</span><span class="sh">"</span><span class="s">tokens/</span><span class="sh">"</span><span class="p">,</span> <span class="n">TokenCreateAPIView</span><span class="p">.</span><span class="nf">as_view</span><span class="p">()),</span>
    <span class="nf">path</span><span class="p">(</span><span class="sh">"</span><span class="s">tokens/refresh/</span><span class="sh">"</span><span class="p">,</span> <span class="n">TokenRefreshAPIView</span><span class="p">.</span><span class="nf">as_view</span><span class="p">()),</span>
    <span class="nf">path</span><span class="p">(</span><span class="sh">"</span><span class="s">tokens/blacklist/</span><span class="sh">"</span><span class="p">,</span> <span class="n">TokenBlackListAPIView</span><span class="p">.</span><span class="nf">as_view</span><span class="p">()),</span>
<span class="p">]</span>
</code></pre></div></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config.urls.py
</span>
<span class="kn">from</span> <span class="n">django.urls</span> <span class="kn">import</span> <span class="n">path</span><span class="p">,</span> <span class="n">include</span>

<span class="kn">from</span> <span class="n">drf_spectacular.views</span> <span class="kn">import</span> <span class="n">SpectacularJSONAPIView</span>
<span class="kn">from</span> <span class="n">drf_spectacular.views</span> <span class="kn">import</span> <span class="n">SpectacularRedocView</span>
<span class="kn">from</span> <span class="n">drf_spectacular.views</span> <span class="kn">import</span> <span class="n">SpectacularSwaggerView</span>
<span class="kn">from</span> <span class="n">drf_spectacular.views</span> <span class="kn">import</span> <span class="n">SpectacularYAMLAPIView</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="bp">...</span>
    <span class="nf">path</span><span class="p">(</span><span class="sh">'</span><span class="s">auth/</span><span class="sh">'</span><span class="p">,</span> <span class="nf">include</span><span class="p">(</span><span class="sh">'</span><span class="s">members.urls.auth</span><span class="sh">'</span><span class="p">)),</span>
<span class="p">]</span>

<span class="n">urlpatterns</span> <span class="o">+=</span> <span class="p">[</span>
    <span class="nf">path</span><span class="p">(</span><span class="sh">"</span><span class="s">docs/json/</span><span class="sh">"</span><span class="p">,</span> <span class="n">SpectacularJSONAPIView</span><span class="p">.</span><span class="nf">as_view</span><span class="p">(),</span> <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">schema-json</span><span class="sh">"</span><span class="p">),</span>
    <span class="nf">path</span><span class="p">(</span><span class="sh">"</span><span class="s">docs/yaml/</span><span class="sh">"</span><span class="p">,</span> <span class="n">SpectacularYAMLAPIView</span><span class="p">.</span><span class="nf">as_view</span><span class="p">(),</span> <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">swagger-yaml</span><span class="sh">"</span><span class="p">),</span>
    <span class="nf">path</span><span class="p">(</span><span class="sh">"</span><span class="s">docs/swagger/</span><span class="sh">"</span><span class="p">,</span> <span class="n">SpectacularSwaggerView</span><span class="p">.</span><span class="nf">as_view</span><span class="p">(</span><span class="n">url_name</span><span class="o">=</span><span class="sh">"</span><span class="s">schema-json</span><span class="sh">"</span><span class="p">),</span> <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">swagger-ui</span><span class="sh">"</span><span class="p">,),</span>
    <span class="nf">path</span><span class="p">(</span><span class="sh">"</span><span class="s">docs/redoc/</span><span class="sh">"</span><span class="p">,</span> <span class="n">SpectacularRedocView</span><span class="p">.</span><span class="nf">as_view</span><span class="p">(</span><span class="n">url_name</span><span class="o">=</span><span class="sh">"</span><span class="s">schema-json</span><span class="sh">"</span><span class="p">),</span> <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">redoc</span><span class="sh">"</span><span class="p">,),</span>
<span class="p">]</span>
</code></pre></div></div>]]></content><author><name>Yeham Kim</name></author><summary type="html"><![CDATA[Django custom user 생성을 위한 설정 추가]]></summary></entry></feed>