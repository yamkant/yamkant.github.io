<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-08-16T21:30:36+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Yam’s Dev Logs</title><subtitle>An amazing website.</subtitle><author><name>Yeham Kim</name></author><entry><title type="html">[Study] 개발 용어 정리</title><link href="http://localhost:4000/study/study-dev-term/" rel="alternate" type="text/html" title="[Study] 개발 용어 정리" /><published>2023-08-16T00:05:07+09:00</published><updated>2023-08-16T00:05:07+09:00</updated><id>http://localhost:4000/study/study-dev-term</id><content type="html" xml:base="http://localhost:4000/study/study-dev-term/"><![CDATA[<h3 id="apm">APM</h3>
<ul>
  <li>Application Performance Management의 줄임말로, 응용 소프트웨어의 성능과 서비스 이용성을 감시하고 관리하는 시스템 관리 방법론입니다.</li>
  <li>운영 중인 시스템의 성능을 모니터링하고 분석하여, 시스템의 가용성 및 안정성을 돕습니다.</li>
</ul>

<p>핀포인트</p>

<h3 id="feign">Feign</h3>
<ul>
  <li>Spring Boot 진영에서 사용하는 Netflix의 오픈소스입니다.</li>
  <li>선언적 방식(어노테이션 사용)으로 외부 API를 RESTful하게 호출할 수 있도록 추상화하여 제공합니다.</li>
  <li>interface와 annotation만으로 HTTP API 클라이언트를 구현합니다.</li>
  <li>세부적인 내용 없이 사용할 수 있기 때문에, 코드 복잡도가 낮습니다.</li>
</ul>]]></content><author><name>Yeham Kim</name></author><category term="Study" /><summary type="html"><![CDATA[APM Application Performance Management의 줄임말로, 응용 소프트웨어의 성능과 서비스 이용성을 감시하고 관리하는 시스템 관리 방법론입니다. 운영 중인 시스템의 성능을 모니터링하고 분석하여, 시스템의 가용성 및 안정성을 돕습니다.]]></summary></entry><entry><title type="html">[Study] Network - OSI 계층</title><link href="http://localhost:4000/study/study-cs-network-osi/" rel="alternate" type="text/html" title="[Study] Network - OSI 계층" /><published>2023-08-16T00:05:07+09:00</published><updated>2023-08-16T00:05:07+09:00</updated><id>http://localhost:4000/study/study-cs-network-osi</id><content type="html" xml:base="http://localhost:4000/study/study-cs-network-osi/"><![CDATA[<h3 id="osi-7계층">OSI 7계층</h3>
<p><strong>7 계층 - Application Layer</strong></p>
<ul>
  <li>사용자에게 보이는 부분으로, 최종 사용자에게 가장 가까운 계층으로, 사용자와 직접적으로 상호작용합니다.</li>
  <li>애플리케이션 목적에 맞는 통신 방법을 제공합니다.</li>
  <li>HTTP, DNS, SMTP, FTP등의 대표적인 프로토콜이 해당 레이어에 속합니다.</li>
</ul>

<p><strong>6 계층 - Presentation Layer</strong></p>
<ul>
  <li>애플리케이션 통신에서 메시지 포맷을 관리하는 계층입니다.</li>
  <li>데이터를 안전하게 전송하기 위해 암호화, 복호화하여 소통합니다.</li>
</ul>

<p><strong>5 게층 - Session Layer</strong></p>
<ul>
  <li>애플리케이션 통신에서 세션을 관리하는 계층입니다.</li>
  <li>예시로 RPC(remote procedure call)가 있습니다.</li>
</ul>

<p><strong>4 계층 - Transport Layer</strong></p>
<ul>
  <li>애플리케이션 통신을 담당하며, 실제로 목적지 애필리케이션으로 데이터를 전송합니다.</li>
  <li>TCP, UDP 프로토콜을 사용합니다.</li>
  <li>TCP: 안정적이고 신뢰할 수 있는 데이터 전송을 보장합니다.</li>
  <li>UDP: 데이터가 중간에 유실되거나 순서가 꼬일 수 있지만, 데이터를 무조건 전송합니다.</li>
  <li>Network Layer의 기능을 사용하여 데이터를 전송합니다.</li>
</ul>

<p><strong>3 계층 - Network Layer</strong></p>
<ul>
  <li>호스트 간의 통신을 담당합니다. (IP 프로토콜)</li>
  <li>목적지 호스트로 데이터를 전송합니다.</li>
  <li>네트워크 간의 최적의 경로를 결정합니다.</li>
  <li>Data Link Layer의 기능을 사용하여 기능을 구현합니다.</li>
</ul>

<p><strong>2 계층 - Data Link Layer</strong></p>
<ul>
  <li>IP 주소가 아닌 MAC 주소 기반으로 통신합니다.</li>
  <li>ARP: IP 주소를 MAC 주소로 변환하는 프로토콜입니다.</li>
</ul>

<p><strong>1 계층 - Physical Layer</strong></p>
<ul>
  <li>
    <p>bits 단위로 데이터를 전송합니다.</p>
  </li>
  <li>서로 다른 컴퓨터가 통신을 할 떄 역시, 7계층을 기반으로 통신합니다.</li>
  <li>라우터는 Network Layer, Data Link Layer, Physical Layer에 있는 프로토콜을 구현합니다.</li>
  <li>유튜브 댓글 작성시 유튜브 서버까지 어떻게 전달되는지 살펴보기
    <ol>
      <li>애플리케이션 레이어에 메시지를 전송하기 위해 처리과정을 거칩니다. 부가적인 정보들을 애플리케이션 헤더에 담습니다.</li>
      <li>presentation layer 관련 데이터들을 헤더에 담고, 담긴 정보를 Session Layer로 보냅니다.</li>
    </ol>
  </li>
</ul>

<h2 id="구글을-주소창에서-입력하면-일어나는-일">구글을 주소창에서 입력하면 일어나는 일</h2>
<ul>
  <li>DNS (Domain Name System Servers): URL들의 이름과 IP 주소를 저장하고 있는 데이터 베이스로, 웹사이트를 위한 주소록입니다. 숫자로된 IP를 사용자가 편리한 주소로 맵핑합니다. 최종적으로 사용자를 어떤 서버에 연결할 것인지 제어하는 요청을 쿼리라고 부릅니다.</li>
  <li>DNS query: DNS 서버들을 검색해서 해당 사이트의 IP 주소를 찾습니다. 재귀적으로 서로 다른 DNS 서버를 오가며 에러가 날 때까지 반복적으로 요청합니다. (recursive search)</li>
  <li>TCIP/IP (Transmission Control Protocol / Internet Protocol): 이를 따른다는 것은, IP 주소 체계를 따르며 TCP의 특성을 활용해 송신자와 수신자의 논리적 연결을 생성하고 신뢰성을 유지할 수 있도록 하겠다는 의미입니다.</li>
  <li>HTTP(Hypertext Transfer Protocol):</li>
</ul>

<ol>
  <li>사용자가 웹브라우저 검색창에 www.google.com을 입력</li>
  <li>웹브라우저는 캐싱된 DNS 기록들을 통해 도메인 주소와 대응하는 IP 주소응답 (캐시에 없다면 3, 있다면 4로)</li>
  <li>웹브라우저가 HTTP를 사용하여 DNS에 입력된 도메인 주소 요청 및 IP 주소 응답</li>
  <li>웹브라우저가 웹서버에게 IP 주소를 통해 html 문서를 요청합니다. (TCP/IP)</li>
  <li>웹어플리케이션서버(WAS)와 데이터베이스에서 우선적으로 웹페이지 작업을 처리합니다.</li>
  <li>처리된 작업의 결과를 웹서버로 전송합니다.</li>
  <li>웹서버는 브라우저에게 html 문셔 결과를 응답합니다.</li>
  <li>웹브라우저는 화면에 웹페이지 내용을 출력합니다.</li>
</ol>

<h2 id="웹서버--어플리케이션-서버--웹컨테이너">웹서버 / 어플리케이션 서버 / 웹컨테이너</h2>
<p><strong>웹서버</strong></p>
<ul>
  <li>웹서버 소프트웨어와 HTML, CSS, JavaScript파일과 같은 정적 파일들을 저장하는 하드웨어</li>
  <li>Client가 어떻게 호스트 파일들에 접근하는지 관리하는 소프트웨어</li>
  <li>URI(Uniform Resource Identifier)와 HTTP(브라우저가 웹 페이지를 보여주기 위해 사용하는 프로토콜) 소프트웨어의 일부</li>
  <li>HTTP를 통해 웹브라우저에서 요청하는 HTML 문서나 오브젝트들을 전송해주는 서비스 프로그램을 말합니다. 이 때, 다른 가공없이 파일을 그대로 전송하기만 하면 되기 때문에 정적(static)이라고 합니다.</li>
  <li>단순히 데이터만 반환하면 되기 떄문에 처리 속도가 빠르며, 트래픽의 과부하를 잘 처리할 수 있습니다.
<strong>애플리케이션 서버</strong></li>
  <li>웹 서비스가 복잡해지고 기능이 다양함에 따라서 데이터를 가공해서 처리하는 비즈니스 로직이 필요하게 됩니다.</li>
  <li>웹서버 하나에서 다른 로직까지 처리하기에 부하가 크기 때문에, 로직을 처리하는 서버가 필요하게 되어 만들어집니다.</li>
  <li>애플리케이션 서버가 HTTP 서버를 통해 브라우저에게 요청된 데이터를 전송하기 전에, 애플리케이션 서버가 데이터를 가공하기 때문에 동적이라고 부릅니다.
<strong>웹 컨테이너</strong></li>
  <li>웹 서버에서 동적인 데이터를 반환하려면 요청에 알맞는 프로그램이 필요합니다. 또한, 그 프로그램에 인자를 전달하기 위한 규약이 필요합니다.</li>
  <li>CGI(Common Gateway Interface)는 프로그램 사이에 데이터를 전달하는 중간자 역할에 필요한 통신규약을 의미합니다.</li>
  <li></li>
</ul>

<h3 id="django에서의-wsgi-cgi">Django에서의 wsgi, cgi</h3>
<p><strong>CGI(Common Gateway Interface)</strong></p>
<ul>
  <li>www 서버와 서버 상에 등장하는 다른 프로그램등 HTML에서는 불가능한 동적인 요소를 홈페이지에 받아들여 쓸 수 있도록하는 웹서버와 웹어플리케이션 사이를 이어주는 미들웨어입니다.</li>
  <li>CGI는 요청이 들어올 때마다 스레드를 생성하여 웹 어플리케이션을 동작시키게 됩니다. 이는 부하가 너무 크고, 10000개 이상의 동시 요청을 처리할 수 없다는 단점이 있습니다.</li>
</ul>

<p><strong>WSGI(Web Server Gateway Interface)</strong></p>
<ul>
  <li>웹 서버 소프트웨어와 파이썬으로 작성된 스크립트(웹 응용 프로그램) 간 통신을 위한 표준 인터페이스입니다.</li>
  <li>즉, Nginx로 들어오는 http request를 파이썬이 이해할 수 있도록 통역합니다.</li>
  <li>CGI의 단점을 보완하여 클라이언트 요청에 대해 멀티 스레드를 생성하여 효율적으로 처리합니다.</li>
  <li>Django 진영에서는 uwsgi, gunicon 등을 사용하고 있습니다.</li>
  <li>동작 과정: 클라이언트 요청 -&gt; server side에서 middleware component 호출 -&gt; middleware component가 application side의 application 호출</li>
</ul>

<p><strong>uWSGI와 Gunicorn</strong><br />
uWSGI</p>
<ul>
  <li>C 언어로 작성된 웹서버이며, 파이썬 애플리케이션을 외부 웹서버와 연결하여 오청을 처리하는 방식입니다.</li>
  <li>다양한 프로그래밍 언어를 지원하며 고성능 및 확장성이 뛰어납니다.</li>
  <li>여러 프로세스 또는 스레드를 사용하여 동시에 여러 요청을 처리할 수 있습니다.</li>
  <li>초기설정 옵션이 다양하지만 복잡합니다. 유연성과 강력한 기능을 제공합니다.</li>
  <li>다양한 플러그인과 확장 기능을 제공하여 다양한 요구 사항에 대응할 수 있습니다.</li>
</ul>

<p>Gunicorn</p>
<ul>
  <li>Python으로 작성된 웹서버이며, 독자적으로 애플리케이션을 실행하고 관리하는 단일서버로, 프론트엔드 웹서버와 직접 연결하여 사용합니다.</li>
  <li>단일 프로세스에서 동작하며, 작은 규모의 애플리케이션을 처리하는데 적합합니다.</li>
  <li>간단하고 설정이 쉽습니다. 추가설정 없이도 동작합니다.</li>
  <li>파이썬 애플리케이션에 초점을 맞춘 경량 웹서버입니다.</li>
</ul>

<p>참고 블로그</p>
<ul>
  <li>biunx님: <a href="https://binux.tistory.com/32">웹서버와 웹어플리케이션서버</a></li>
  <li>waonderboy님: <a href="https://velog.io/@waoderboy/%EC%9B%B9-%EC%84%9C%EB%B2%84-WAS-%EC%9B%B9-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88">웹 서버, WAS, 웹 컨테이너</a></li>
  <li>stg0123님: <a href="https://stg0123.github.io/study/41/">uwsgi를 django와 연결하기</a></li>
  <li>elastic7327님: <a href="https://elastic7327.medium.com/python%EA%B0%9C%EB%B0%9C%EC%9E%90-uwsgi%EB%A5%BC-%EB%B2%84%EB%A6%AC%EA%B3%A0-gunicorn%EC%9C%BC%EB%A1%9C-%EA%B0%88%EC%95%84%ED%83%80%EB%8B%A4-df1c95f220c5">uwsgi를 버린 이유</a></li>
</ul>]]></content><author><name>Yeham Kim</name></author><category term="Study" /><summary type="html"><![CDATA[OSI 7계층 7 계층 - Application Layer 사용자에게 보이는 부분으로, 최종 사용자에게 가장 가까운 계층으로, 사용자와 직접적으로 상호작용합니다. 애플리케이션 목적에 맞는 통신 방법을 제공합니다. HTTP, DNS, SMTP, FTP등의 대표적인 프로토콜이 해당 레이어에 속합니다.]]></summary></entry><entry><title type="html">[Study] Network - OSI 계층</title><link href="http://localhost:4000/study/study-cs-network-tcp/" rel="alternate" type="text/html" title="[Study] Network - OSI 계층" /><published>2023-08-16T00:05:07+09:00</published><updated>2023-08-16T00:05:07+09:00</updated><id>http://localhost:4000/study/study-cs-network-tcp</id><content type="html" xml:base="http://localhost:4000/study/study-cs-network-tcp/"><![CDATA[<h3 id="osi-7계층">OSI 7계층</h3>
<p><strong>7 계층 - Application Layer</strong></p>
<ul>
  <li>사용자에게 보이는 부분으로, 최종 사용자에게 가장 가까운 계층으로, 사용자와 직접적으로 상호작용합니다.</li>
  <li>애플리케이션 목적에 맞는 통신 방법을 제공합니다.</li>
  <li>HTTP, DNS, SMTP, FTP등의 대표적인 프로토콜이 해당 레이어에 속합니다.</li>
</ul>

<p><strong>6 계층 - Presentation Layer</strong></p>
<ul>
  <li>애플리케이션 통신에서 메시지 포맷을 관리하는 계층입니다.</li>
  <li>데이터를 안전하게 전송하기 위해 암호화, 복호화하여 소통합니다.</li>
</ul>

<p><strong>5 게층 - Session Layer</strong></p>
<ul>
  <li>애플리케이션 통신에서 세션을 관리하는 계층입니다.</li>
  <li>예시로 RPC(remote procedure call)가 있습니다.</li>
</ul>

<p><strong>4 계층 - Transport Layer</strong></p>
<ul>
  <li>애플리케이션 통신을 담당하며, 실제로 목적지 애필리케이션으로 데이터를 전송합니다.</li>
  <li>TCP, UDP 프로토콜을 사용합니다.</li>
  <li>TCP: 안정적이고 신뢰할 수 있는 데이터 전송을 보장합니다.</li>
  <li>UDP: 데이터가 중간에 유실되거나 순서가 꼬일 수 있지만, 데이터를 무조건 전송합니다.</li>
  <li>Network Layer의 기능을 사용하여 데이터를 전송합니다.</li>
</ul>

<p><strong>3 계층 - Network Layer</strong></p>
<ul>
  <li>호스트 간의 통신을 담당합니다. (IP 프로토콜)</li>
  <li>목적지 호스트로 데이터를 전송합니다.</li>
  <li>네트워크 간의 최적의 경로를 결정합니다.</li>
  <li>Data Link Layer의 기능을 사용하여 기능을 구현합니다.</li>
</ul>

<p><strong>2 계층 - Data Link Layer</strong></p>
<ul>
  <li>IP 주소가 아닌 MAC 주소 기반으로 통신합니다.</li>
  <li>ARP: IP 주소를 MAC 주소로 변환하는 프로토콜입니다.</li>
</ul>

<p><strong>1 계층 - Physical Layer</strong></p>
<ul>
  <li>
    <p>bits 단위로 데이터를 전송합니다.</p>
  </li>
  <li>서로 다른 컴퓨터가 통신을 할 떄 역시, 7계층을 기반으로 통신합니다.</li>
  <li>라우터는 Network Layer, Data Link Layer, Physical Layer에 있는 프로토콜을 구현합니다.</li>
  <li>유튜브 댓글 작성시 유튜브 서버까지 어떻게 전달되는지 살펴보기
    <ol>
      <li>애플리케이션 레이어에 메시지를 전송하기 위해 처리과정을 거칩니다. 부가적인 정보들을 애플리케이션 헤더에 담습니다.</li>
      <li>presentation layer 관련 데이터들을 헤더에 담고, 담긴 정보를 Session Layer로 보냅니다.</li>
    </ol>
  </li>
</ul>

<h2 id="구글을-주소창에서-입력하면-일어나는-일">구글을 주소창에서 입력하면 일어나는 일</h2>
<ul>
  <li>DNS (Domain Name System Servers): URL들의 이름과 IP 주소를 저장하고 있는 데이터 베이스로, 웹사이트를 위한 주소록입니다. 숫자로된 IP를 사용자가 편리한 주소로 맵핑합니다. 최종적으로 사용자를 어떤 서버에 연결할 것인지 제어하는 요청을 쿼리라고 부릅니다.</li>
  <li>DNS query: DNS 서버들을 검색해서 해당 사이트의 IP 주소를 찾습니다. 재귀적으로 서로 다른 DNS 서버를 오가며 에러가 날 때까지 반복적으로 요청합니다. (recursive search)</li>
  <li>TCIP/IP (Transmission Control Protocol / Internet Protocol): 이를 따른다는 것은, IP 주소 체계를 따르며 TCP의 특성을 활용해 송신자와 수신자의 논리적 연결을 생성하고 신뢰성을 유지할 수 있도록 하겠다는 의미입니다.</li>
  <li>HTTP(Hypertext Transfer Protocol):</li>
</ul>

<ol>
  <li>사용자가 웹브라우저 검색창에 www.google.com을 입력</li>
  <li>웹브라우저는 캐싱된 DNS 기록들을 통해 도메인 주소와 대응하는 IP 주소응답 (캐시에 없다면 3, 있다면 4로)</li>
  <li>웹브라우저가 HTTP를 사용하여 DNS에 입력된 도메인 주소 요청 및 IP 주소 응답</li>
  <li>웹브라우저가 웹서버에게 IP 주소를 통해 html 문서를 요청합니다. (TCP/IP)</li>
  <li>웹어플리케이션서버(WAS)와 데이터베이스에서 우선적으로 웹페이지 작업을 처리합니다.</li>
  <li>처리된 작업의 결과를 웹서버로 전송합니다.</li>
  <li>웹서버는 브라우저에게 html 문셔 결과를 응답합니다.</li>
  <li>웹브라우저는 화면에 웹페이지 내용을 출력합니다.</li>
</ol>

<h2 id="웹서버--어플리케이션-서버--웹컨테이너">웹서버 / 어플리케이션 서버 / 웹컨테이너</h2>
<p><strong>웹서버</strong></p>
<ul>
  <li>웹서버 소프트웨어와 HTML, CSS, JavaScript파일과 같은 정적 파일들을 저장하는 하드웨어</li>
  <li>Client가 어떻게 호스트 파일들에 접근하는지 관리하는 소프트웨어</li>
  <li>URI(Uniform Resource Identifier)와 HTTP(브라우저가 웹 페이지를 보여주기 위해 사용하는 프로토콜) 소프트웨어의 일부</li>
  <li>HTTP를 통해 웹브라우저에서 요청하는 HTML 문서나 오브젝트들을 전송해주는 서비스 프로그램을 말합니다. 이 때, 다른 가공없이 파일을 그대로 전송하기만 하면 되기 때문에 정적(static)이라고 합니다.</li>
  <li>단순히 데이터만 반환하면 되기 떄문에 처리 속도가 빠르며, 트래픽의 과부하를 잘 처리할 수 있습니다.
<strong>애플리케이션 서버</strong></li>
  <li>웹 서비스가 복잡해지고 기능이 다양함에 따라서 데이터를 가공해서 처리하는 비즈니스 로직이 필요하게 됩니다.</li>
  <li>웹서버 하나에서 다른 로직까지 처리하기에 부하가 크기 때문에, 로직을 처리하는 서버가 필요하게 되어 만들어집니다.</li>
  <li>애플리케이션 서버가 HTTP 서버를 통해 브라우저에게 요청된 데이터를 전송하기 전에, 애플리케이션 서버가 데이터를 가공하기 때문에 동적이라고 부릅니다.
<strong>웹 컨테이너</strong></li>
  <li>웹 서버에서 동적인 데이터를 반환하려면 요청에 알맞는 프로그램이 필요합니다. 또한, 그 프로그램에 인자를 전달하기 위한 규약이 필요합니다.</li>
  <li>CGI(Common Gateway Interface)는 프로그램 사이에 데이터를 전달하는 중간자 역할에 필요한 통신규약을 의미합니다.</li>
  <li></li>
</ul>

<h3 id="django에서의-wsgi-cgi">Django에서의 wsgi, cgi</h3>
<p><strong>CGI(Common Gateway Interface)</strong></p>
<ul>
  <li>www 서버와 서버 상에 등장하는 다른 프로그램등 HTML에서는 불가능한 동적인 요소를 홈페이지에 받아들여 쓸 수 있도록하는 웹서버와 웹어플리케이션 사이를 이어주는 미들웨어입니다.</li>
  <li>CGI는 요청이 들어올 때마다 스레드를 생성하여 웹 어플리케이션을 동작시키게 됩니다. 이는 부하가 너무 크고, 10000개 이상의 동시 요청을 처리할 수 없다는 단점이 있습니다.</li>
</ul>

<p><strong>WSGI(Web Server Gateway Interface)</strong></p>
<ul>
  <li>웹 서버 소프트웨어와 파이썬으로 작성된 스크립트(웹 응용 프로그램) 간 통신을 위한 표준 인터페이스입니다.</li>
  <li>즉, Nginx로 들어오는 http request를 파이썬이 이해할 수 있도록 통역합니다.</li>
  <li>CGI의 단점을 보완하여 클라이언트 요청에 대해 멀티 스레드를 생성하여 효율적으로 처리합니다.</li>
  <li>Django 진영에서는 uwsgi, gunicon 등을 사용하고 있습니다.</li>
  <li>동작 과정: 클라이언트 요청 -&gt; server side에서 middleware component 호출 -&gt; middleware component가 application side의 application 호출</li>
</ul>

<p><strong>uWSGI와 Gunicorn</strong><br />
uWSGI</p>
<ul>
  <li>C 언어로 작성된 웹서버이며, 파이썬 애플리케이션을 외부 웹서버와 연결하여 오청을 처리하는 방식입니다.</li>
  <li>다양한 프로그래밍 언어를 지원하며 고성능 및 확장성이 뛰어납니다.</li>
  <li>여러 프로세스 또는 스레드를 사용하여 동시에 여러 요청을 처리할 수 있습니다.</li>
  <li>초기설정 옵션이 다양하지만 복잡합니다. 유연성과 강력한 기능을 제공합니다.</li>
  <li>다양한 플러그인과 확장 기능을 제공하여 다양한 요구 사항에 대응할 수 있습니다.</li>
</ul>

<p>Gunicorn</p>
<ul>
  <li>Python으로 작성된 웹서버이며, 독자적으로 애플리케이션을 실행하고 관리하는 단일서버로, 프론트엔드 웹서버와 직접 연결하여 사용합니다.</li>
  <li>단일 프로세스에서 동작하며, 작은 규모의 애플리케이션을 처리하는데 적합합니다.</li>
  <li>간단하고 설정이 쉽습니다. 추가설정 없이도 동작합니다.</li>
  <li>파이썬 애플리케이션에 초점을 맞춘 경량 웹서버입니다.</li>
</ul>

<p>참고 블로그</p>
<ul>
  <li>biunx님: <a href="https://binux.tistory.com/32">웹서버와 웹어플리케이션서버</a></li>
  <li>waonderboy님: <a href="https://velog.io/@waoderboy/%EC%9B%B9-%EC%84%9C%EB%B2%84-WAS-%EC%9B%B9-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88">웹 서버, WAS, 웹 컨테이너</a></li>
  <li>stg0123님: <a href="https://stg0123.github.io/study/41/">uwsgi를 django와 연결하기</a></li>
  <li>elastic7327님: <a href="https://elastic7327.medium.com/python%EA%B0%9C%EB%B0%9C%EC%9E%90-uwsgi%EB%A5%BC-%EB%B2%84%EB%A6%AC%EA%B3%A0-gunicorn%EC%9C%BC%EB%A1%9C-%EA%B0%88%EC%95%84%ED%83%80%EB%8B%A4-df1c95f220c5">uwsgi를 버린 이유</a></li>
</ul>]]></content><author><name>Yeham Kim</name></author><category term="Study" /><summary type="html"><![CDATA[OSI 7계층 7 계층 - Application Layer 사용자에게 보이는 부분으로, 최종 사용자에게 가장 가까운 계층으로, 사용자와 직접적으로 상호작용합니다. 애플리케이션 목적에 맞는 통신 방법을 제공합니다. HTTP, DNS, SMTP, FTP등의 대표적인 프로토콜이 해당 레이어에 속합니다.]]></summary></entry><entry><title type="html">[Study] Django - 코딩 스타일</title><link href="http://localhost:4000/django%20study/study-django-coding-style/" rel="alternate" type="text/html" title="[Study] Django - 코딩 스타일" /><published>2023-08-15T00:05:07+09:00</published><updated>2023-08-15T00:05:07+09:00</updated><id>http://localhost:4000/django%20study/study-django-coding-style</id><content type="html" xml:base="http://localhost:4000/django%20study/study-django-coding-style/"><![CDATA[<h3 id="pre-commit-checks">Pre-commit checks</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">flake8</code> 모듈을 사용하여 코딩 컨벤션을 확인하는 방법도 있습니다.</li>
  <li><code class="language-plaintext highlighter-rouge">git hook</code>: git과 관련된 이벤트 발생시, 특정 스크립트를 실행할 수 있도록 하는 기능입니다.</li>
  <li><code class="language-plaintext highlighter-rouge">pre-commit</code>은 pre-commit hook들을 관리하는 프레임워크로, 이를 통해 리뷰를 위한 코드 커밋 전, 간단한 이슈들을 확인할 수 있습니다.</li>
</ul>

<h3 id="python-style">Python style</h3>
<ul>
  <li>모든 파일은 <code class="language-plaintext highlighter-rouge">black auto-fomatter</code>를 사용하여 포맷되어야합니다.</li>
  <li>프로젝트 레포지토리는 <code class="language-plaintext highlighter-rouge">.editorconfig</code> 파일을 포함해야합니다.</li>
  <li>장고 운영진은 whitespace 이슈들을 피하기 위해 <code class="language-plaintext highlighter-rouge">EditorConfig</code>와 함께 텍스트 에디터를 사용하는 것을 추천합니다.</li>
  <li>만약 구체적으로 정한 부분이 없으면 대체적으로, <code class="language-plaintext highlighter-rouge">PEP 8</code> 따릅니다.</li>
  <li>스트링 값은 <code class="language-plaintext highlighter-rouge">%-formatting</code>, <code class="language-plaintext highlighter-rouge">f-string</code>, <code class="language-plaintext highlighter-rouge">str.format()</code> 형태로 사용하는 것을 권장합니다. (가독성) 또한, <code class="language-plaintext highlighter-rouge">f-string</code> 사용시 plain variable로 사용해야합니다.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1"># Disallowed
</span>  <span class="sa">f</span><span class="sh">"</span><span class="s">hello </span><span class="si">{</span><span class="nf">get_user</span><span class="p">()</span><span class="si">}</span><span class="sh">"</span>
    
  <span class="c1"># Allowed
</span>  <span class="n">user</span> <span class="o">=</span> <span class="nf">get_user</span><span class="p">()</span>
  <span class="sa">f</span><span class="sh">"</span><span class="s">hello </span><span class="si">{</span><span class="n">user</span><span class="si">}</span><span class="sh">""</span><span class="s">
</span></code></pre></div>    </div>
  </li>
  <li>camel 표기법 보다 snake 표기법을 권장합니다.</li>
  <li>docstring은 <code class="language-plaintext highlighter-rouge">PEP 257</code> 스타일을 따릅니다.</li>
  <li>테스트 수행 시, <code class="language-plaintext highlighter-rouge">assertRaises()</code>를 사용하기 보다, <code class="language-plaintext highlighter-rouge">assertRaisesMessage()</code>와 <code class="language-plaintext highlighter-rouge">assertWarnsMessage()</code>를 사용하여, 예외에 대한 경고 메시지까지 함꼐 봅니다.</li>
  <li><code class="language-plaintext highlighter-rouge">assertRaisesRegex()</code>와 <code class="language-plaintext highlighter-rouge">assertWarnsRegex()</code>는 정규식 매칭이 필요한 경우에만 사용합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">assertTrue()</code>와 <code class="language-plaintext highlighter-rouge">assertFalse()</code> 보다 <code class="language-plaintext highlighter-rouge">assertIs(..., True/False)</code>를 사용합니다.</li>
</ul>

<h3 id="imports">Imports</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">isort</code> 모듈을 사용하여 import를 자동으로 소팅합니다.</li>
  <li>아래와 같이 그룹별로 모듈을 묶어서 import 합니다.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1"># future
</span>  <span class="bp">...</span>
  <span class="c1"># standard library
</span>  <span class="bp">...</span>
  <span class="c1"># third-party
</span>  <span class="bp">...</span>
  <span class="c1"># Django
</span>  <span class="bp">...</span>
  <span class="c1"># local Django
</span>  <span class="bp">...</span>
  <span class="c1"># try/except
</span>  <span class="bp">...</span>
</code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">import ...</code>만 사용하는 경우를 <code class="language-plaintext highlighter-rouge">from ... import ...</code>로 모듈을 호출하는 경우들보다 상위에 위치시킵니다.</li>
  <li>알파벳 순서로 모듈을 호출하는 것을 권장합니다.</li>
  <li>너무 긴 모듈 호출은 끊어서 구분합니다. (4 space와 trailing comma 사용)</li>
</ul>

<h3 id="template-style">Template style</h3>
<ul>
  <li>중괄호 사이의 tag comment들 사이에는 공백을 삽입합니다.
(<code class="language-plaintext highlighter-rouge"> -&gt; </code>)</li>
</ul>

<h3 id="view-style">View style</h3>
<ul>
  <li>view 함수의 첫 번째 파라미터는 <code class="language-plaintext highlighter-rouge">req</code>가 아닌 <code class="language-plaintext highlighter-rouge">request</code>로 확실히 표기합니다.</li>
</ul>

<h3 id="model-style">Model style</h3>
<ul>
  <li>필드명은 소문자 snake 표기법을 사용하여 정의합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">class Meta</code>는 필드 정의 뒤에 single line을 공백으로 둔 후, 정의합니다.</li>
  <li>모델 메서드의 정의 순서는 아래와 같습니다.
    <ul>
      <li>All database fields</li>
      <li>Custom manager attributes</li>
      <li><code class="language-plaintext highlighter-rouge">class Meta</code></li>
      <li><code class="language-plaintext highlighter-rouge">def __str__()</code></li>
      <li><code class="language-plaintext highlighter-rouge">def save()</code></li>
      <li><code class="language-plaintext highlighter-rouge">def get_absolute_url()</code></li>
      <li>Any custom method</li>
    </ul>
  </li>
</ul>

<h3 id="djangoconfsettings-사용하기"><code class="language-plaintext highlighter-rouge">django.conf.settings</code> 사용하기</h3>
<ul>
  <li>모듈들은 일반적으로 최상위 레벨의 <code class="language-plaintext highlighter-rouge">django.conf.settings</code>에 저장된 설정들을 사용하지 않도록 해야합니다.</li>
  <li>환경변수인 <code class="language-plaintext highlighter-rouge">DJANGO_SETTINGS_MODULE</code>에 의존하지 않도록 설정해야합니다.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kn">from</span> <span class="n">django.conf</span> <span class="kn">import</span> <span class="n">settings</span>
  <span class="n">setting</span><span class="p">.</span><span class="nf">configure</span><span class="p">({},</span> <span class="n">SOME_SETTING</span><span class="o">=</span><span class="sh">"</span><span class="s">foo</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ul>]]></content><author><name>Yeham Kim</name></author><category term="Django Study" /><summary type="html"><![CDATA[Pre-commit checks flake8 모듈을 사용하여 코딩 컨벤션을 확인하는 방법도 있습니다. git hook: git과 관련된 이벤트 발생시, 특정 스크립트를 실행할 수 있도록 하는 기능입니다. pre-commit은 pre-commit hook들을 관리하는 프레임워크로, 이를 통해 리뷰를 위한 코드 커밋 전, 간단한 이슈들을 확인할 수 있습니다.]]></summary></entry><entry><title type="html">[Study] Django - 설계 철학</title><link href="http://localhost:4000/django%20study/study-django-philosophy/" rel="alternate" type="text/html" title="[Study] Django - 설계 철학" /><published>2023-08-15T00:05:07+09:00</published><updated>2023-08-15T00:05:07+09:00</updated><id>http://localhost:4000/django%20study/study-django-philosophy</id><content type="html" xml:base="http://localhost:4000/django%20study/study-django-philosophy/"><![CDATA[<h3 id="기본을-충실히-하자">기본을 충실히 하자!</h3>
<ul>
  <li>구현을 서둘러 하다보니, 기본적인 프레임워크의 철학과 기본기를 돌아볼 여유가 없어왔던 것 같습니다.</li>
  <li>프레임워크에 대해서나 왜 사용하게 되었는지를 생각해 볼 때 설득력있는 설명을 할 수 있는 방법이 궁금했습니다.</li>
</ul>

<h2 id="설계-철학">설계 철학</h2>

<h3 id="django를-선택하는-이유">Django를 선택하는 이유</h3>
<ul>
  <li>개발이 빠릅니다. Django는 포괄적인 도구와 라이브러리를 제공하여 새로운 프로젝트를 신속하게 구축할 수 있도록 합니다.</li>
  <li>확장성이 좋습니다. 트래픽이 증가하는 등 요구사항이 증가함에 따라 쉽게 확장할 수 있도록 설계되어있습니다.</li>
  <li>보안에 대해 강조합니다. 사이트 간 스크립팅(XSS), 요청 위조(CSRF), SQL 인젝션 등과 같은 취약점에 대해 내장된 보호 기능을 갖추고 있습니다.</li>
  <li>서드파티 패키지나 플러그인을 함께 사용하기 편리합니다.</li>
</ul>

<h3 id="일반">일반</h3>
<ul>
  <li>Django는 Python을 사용한 견고하고 확장 가능한 웹어플리케이션을 개발하기 위한 고수준 오픈소스 웹 프레임워크입니다.</li>
  <li>Django 스택의 근본적인 목표는, 느슨한 결합과 탄탄한 응집으로 프레임워크의 각 계층이 서로 알지 못하도록 하는 것이 기본 원칙입니다.</li>
  <li>Django는 가능한 한 최소한의 코드를 사용하고, 틀에 박힌 코드를 배제하며, Python의 동적인 기능(ex. introspection)을 최대한 활용합니다.
    <blockquote>
      <p>introspection이란, 런타임 동안 객체의 타입을 결정하는 능력입니다. 파이썬의 모든 것은 객체이고, 객체가 지원하는 내장 함수와 모듈들이 있습니다.</p>
    </blockquote>
  </li>
  <li>DRY: 중복성을 최소화하고, 최소한의 것들을 가지고 최대한의 것을 만들어내도록 합니다.</li>
  <li>명시적인 것이 묵시적인 것보다 낫다는 PEP20을 따릅니다.</li>
  <li>프레임워크는 모든 수준에서 일관적이어야 합니다. 이는 저수준(python code style)에서 고수준(django framework)에 이르기까지 적용됩니다.</li>
</ul>

<h3 id="모델">모델</h3>
<ul>
  <li>명시적인 것이 묵시적인 것보다 나음으로, 필드의 성질은 키워드 인자에 근거해야 하며, 경우에 따라서는 필드의 유형에 근거해야합니다.</li>
  <li>활성 레코드 디자인 패턴에 따라 “객체”의 모든 aspect를 캡슐화해야합니다.</li>
  <li>데이터를 모델로 표현하고, 모델을 이해하는 데 요구되는 모든 정보가 모델 내에 있어야 합니다.</li>
</ul>

<h3 id="데이터베이스-api">데이터베이스 API</h3>
<ul>
  <li>SQL문은 가능한 적은 횟수로 실행해야 하며, 내부적으로 최적화해야합니다.</li>
  <li>프레임워크에서 <code class="language-plaintext highlighter-rouge">save()</code>를 조용히 처리하는 것이 아닌, 개발자가 명시적으로 <code class="language-plaintext highlighter-rouge">save()</code>를 호출하도록 되어 있습니다.</li>
  <li><code class="language-plaintext highlighter-rouge">join</code> 명령어가 요구될 때에는 겉으로 드러나지 않게 자동으로 수행되어야 합니다.</li>
  <li>모든 객체는 시스템의 모든 관련 객체에 접근할 수 있어야 하며, 이러한 접근은 양방향이어야합니다.</li>
  <li>필요할 경우에 SQL 문을 직접 작성하기 쉽게 설계해야합니다.</li>
</ul>

<h3 id="url-설계">URL 설계</h3>
<ul>
  <li>Django 앱의 URL을 Python 함수 이름과 같게 만드는 것은 좋지 않습니다.</li>
  <li>웹페이지 URL에 파일 확장자를 넣는 것은 지양해야합니다.</li>
  <li>기술적으로 <code class="language-plaintext highlighter-rouge">foo.com/bar</code>와 <code class="language-plaintext highlighter-rouge">foo.com/bar/</code>는 서로 다른 URL이며, 검색 엔진 로봇은 이를 별도로 취급합니다.</li>
  <li>따라서, APPEND_SLASH 설정을 True로 하는 경우, <code class="language-plaintext highlighter-rouge">/</code>가 붙지 않더라도 리다이렉션 시킵니다.
    <blockquote>
      <p>주의: POST 메서드를 사용하는 경우 리다이렉트를 사용해버리면 데이터가 소실될 가능성도 있습니다.</p>
    </blockquote>
  </li>
</ul>

<h3 id="django의-mvt-아키텍처-model-view-template">Django의 MVT 아키텍처 (Model View Template)</h3>

<p><strong>Model</strong></p>
<ul>
  <li>데이터의 구조를 나타내며, CRUD에 대해 정의합니다.</li>
  <li>테이블의 구조와 각 테이블 간의 관계를 정의하는 Python 클래스입니다.</li>
</ul>

<p><strong>View</strong></p>
<ul>
  <li>사용자 요청을 처리하고 적절한 응답을 반환합니다.</li>
  <li>데이터를 검색한 뒤, HTTP 응답을 반환하는 Python 함수로, Template이나 Json을 반환합니다.</li>
</ul>

<p><strong>Template</strong></p>
<ul>
  <li>클라이언트로 전송되는 HTML의 구조와 레이아웃을 정의합니다.</li>
  <li>텍스트 파일로서, HTML 구조를 응용하여 동적 컨텐츠를 포함할 수 있도록합니다.</li>
</ul>

<h3 id="template">Template</h3>
<ul>
  <li>표현과 로직을 분리해야합니다.</li>
  <li>대다수의 동적인 웹사이트는 공통 헤더, 푸터, 네비게이션 바와 같은 사이트의 공통 디자인을 갖습니다. Django 템플릿 시스템은 이러한 요소를 한 곳에 저장하기 쉽게하여 중복 코드를 없애야합니다.</li>
  <li>템플릿은 HTML 뿐만 아니라, 텍스트 기반 포맷 또는 일반 텍스트도 잘 생성할 수 있어야 합니다.</li>
  <li>XML을 템플릿 언어로 사용하지 않아야 합니다.</li>
  <li>템플릿은 데이터베이스의 레코드를 삭제하는 명령과 같은 악의적인 코드를 포함할 수 없어야 합니다.</li>
</ul>

<h3 id="view">View</h3>
<ul>
  <li>함수로 처리할 수 있는 일을 하기 위해 클래스의 인스턴스를 굳이 생성하지 않아도 됩니다.</li>
  <li>글로벌 변수의 요청 데이터에 접근하는 것이 아닌 뷰 함수에 전달된 요청 객체에 각각 접근해야합니다.</li>
  <li>뷰는 개발자가 어떤 템플릿을 사용하는지에 무관해야합니다.</li>
</ul>]]></content><author><name>Yeham Kim</name></author><category term="Django Study" /><summary type="html"><![CDATA[기본을 충실히 하자! 구현을 서둘러 하다보니, 기본적인 프레임워크의 철학과 기본기를 돌아볼 여유가 없어왔던 것 같습니다. 프레임워크에 대해서나 왜 사용하게 되었는지를 생각해 볼 때 설득력있는 설명을 할 수 있는 방법이 궁금했습니다.]]></summary></entry><entry><title type="html">[Study] Django - ORM Basic</title><link href="http://localhost:4000/django%20study/study-django-orm-basic/" rel="alternate" type="text/html" title="[Study] Django - ORM Basic" /><published>2023-08-12T00:05:07+09:00</published><updated>2023-08-12T00:05:07+09:00</updated><id>http://localhost:4000/django%20study/study-django-orm-basic</id><content type="html" xml:base="http://localhost:4000/django%20study/study-django-orm-basic/"><![CDATA[<h2 id="orm이란-무엇인가">ORM이란 무엇인가?</h2>

<ul>
  <li>객체지향 프로그래밍은 클래스를 사용하지만, 관계형 데이터베이스는 테이블을 사용하기 때문에, 객체 모델과 관계형 모델 간에 불일치가 발생합니다.</li>
  <li>ORM은 SQL문을 자동으로 생성하여 이러한 불일치를 해결할 수 있습니다.</li>
</ul>

<h2 id="orm의-장단점">ORM의 장단점</h2>

<h3 id="장점">장점</h3>

<ul>
  <li>완벽한 객체지향적인 코드
    <ul>
      <li>SQL문이 아닌 클래스의 메서드를 통한 데이터베이스 조작이 가능하기 때문에, 개발자가 객체 모델만을 이용해서 프로그래밍을하는데 집중할 수 있습니다.</li>
      <li>SQL문을 사용하며 함께 필요한 선언문, 할당, 종료와 같은 부수적인 코드가 사라지거나 줄어들게 됩니다.</li>
    </ul>
  </li>
  <li>재사용, 유지보수, 리팩토링이 용이합니다.</li>
  <li>DBMS에 대한 종속성이 줄어듭니다.
    <ul>
      <li>객체 간의 관계를 바탕으로 SQL문을 자동으로 생성하며, 객체의 자료형 타입까지 사용할 수 있습니다.</li>
      <li>따라서, RDBMS의 데이터 구조와 객체지향 모델 사이의 간격을 좁힐 수 있습니다.</li>
    </ul>
  </li>
</ul>

<h3 id="단점">단점</h3>

<ul>
  <li>프로젝트의 복잡성이 커질수록 난이도도 올라가고, 잘못 구현되는 경우 속도 저하가 발생합니다. 일관성을 무너뜨리게 될 수도 있습니다.</li>
  <li>잘못된 사용으루 N+1 문제와 같은 비효율적인 동작을 야기할 수 있습니다.</li>
  <li>대형 SQL문은 속도를 위해 별도의 튜닝이 필요하므로, 결국 SQL문법을 사용해야할 때가 생깁니다.</li>
  <li>쿼리문이 복잡한 경우, SQL문 사용이 직관적이고 효율적일 수 있습니다.</li>
</ul>

<h3 id="orm을-적절하게-사용하는-방법">ORM을 적절하게 사용하는 방법</h3>

<p><strong>타겟 DB를 이해하기</strong></p>

<ul>
  <li>SQL 및 DB의 locking 모델을 무시하면 안됩니다.</li>
  <li>ORM 적용 환경에서 발생하는 많은 부류의 문제들은 DB와 SQL의 문제를 간과함에서 발생합니다.</li>
</ul>

<p><strong>필요한 경우 SQL을 사용하기</strong></p>

<ul>
  <li>Hibernate, TopLink와 같은 ORM들은 SQL 쿼리 작성 기능을 제공하지만, 경우에 따라 SQL문을 직접 작성해야합니다.</li>
</ul>

<p><strong>O-R 매핑 제품을 선택하기 전에 충분히 검토하기</strong></p>

<ul>
  <li>모든 ORM 제품이 동일한 수준의 기능을 제공하지 않기 때문에, 요구 사항을 반영하는 환경을 구축하고 제품들을 비교, 테스트 해야합니다.</li>
  <li>엔터프라이즈 개발 과정의 다른 요소들과 마찬가지로, 프로젝트 라이프사이클 초기 단계에서 성능과 관련된 리스크를 최소화하는 것이 중요합니다.</li>
  <li>매핑 기능에 과도한 오버헤드가 수반되지 않는지 분석해야 합니다.</li>
</ul>

<p><strong>ORM이 적절히 사용될 수 있는 상황을 이해하기</strong></p>

<ul>
  <li>ORM은 엔티티를 개별적으로 업데이트하고 간헐적으로 셋 기반 작업을 수행하는 OLTP 애플리케이션이 적합합니다.</li>
</ul>

<p><strong>ORM이 적합하지 않은 경우</strong></p>

<ul>
  <li>많은 수의 레코드에 대해 잦은 빈도로 bulk 업데이트를 수행하는 애플리케이션(OLAP 애플리케이션)</li>
  <li>데이터 마이닝을 위해 사용되는 애플리케이션에서는 이미 데이터를 본래의 엔티티 상태로 사용하기 어렵습니다.</li>
  <li>데이터의 인출 및 업데이트를 위해 핸드코딩으로 작성된 SQL 및 저장 프로시저를 이용하는 DB 환경</li>
  <li>순수 SQL 기반 접근 방법을 적용하는 것이 적절한 애플리케이션
    <ul>
      <li>비즈니스 로직의 대부분이 DB에 이미 구현되어 있거나, 데이터베이스 무결성 제약(integrity constraint)이 적용된 경우 등입니다.</li>
      <li>이러한 애플리케이션에서는 오브젝트 또는 ORM의 활용 여지가 적으며, 데이터베이스 테이블을 도메인 오브젝트로 모델링 함으로써 기대할 수 있는 효과가 거의 없습니다.</li>
    </ul>
  </li>
</ul>

<h2 id="django-orm의-특징">Django ORM의 특징</h2>

<h3 id="queryset">QuerySet</h3>

<ul>
  <li>Django ORM을 통해 생성된 자료형으로, 데이터베이스의 테이블로부터 가져온 객체의 목록입니다.</li>
</ul>

<h3 id="lazy-loading">Lazy Loading</h3>

<ul>
  <li>필요한 시점에만 SQL을 호출하는 Lazy한 특성이 있습니다.</li>
  <li><code class="language-plaintext highlighter-rouge">users=User.objects.all()</code> 문법을 사용하더라도, 이 때 DB를 호출하는 것이 아닌, <code class="language-plaintext highlighter-rouge">user=users[0]</code>, <code class="language-plaintext highlighter-rouge">list(users)</code>와 같이 실제 파이썬에서 해당 데이터를 사용할 때 호출됩니다.</li>
  <li>따라서, <code class="language-plaintext highlighter-rouge">Result Cache</code>를 통해 미리 데이터를 캐싱해두는 것이 더 효율적입니다. <code class="language-plaintext highlighter-rouge">user_list=list(User.objects.all())</code></li>
  <li>지연 로딩의 또 다른 문제는, 외래키 관계에 있는 데이터를 참조해서 호출할 때 발생합니다. lazy-loading은 쿼리문이 날라갈 때 당장 필요하지 않기 때문에 참조모델의 데이터는 가지고 오지 않고 해당 모델이 갖는 한개의 데이터를 가져옵니다.</li>
  <li>따라서, 외래키 값을 호출할 때 한 번 더 쿼리가 날라가는 <code class="language-plaintext highlighter-rouge">N+1 문제</code>가 발생하게 됩니다.</li>
</ul>

<h3 id="eager-loading">Eager Loading</h3>

<ul>
  <li>N+1 문제를 해결하기 위해, <code class="language-plaintext highlighter-rouge">select_related()</code>와 <code class="language-plaintext highlighter-rouge">prefetch_related()</code> 메서드로 즉시 로딩할 수 있습니다.</li>
  <li><code class="language-plaintext highlighter-rouge">select_related()</code>는 join을 통해 데이터를 즉시 로딩하는 방법으로, 정참조 외래키에서 사용됩니다.</li>
  <li><code class="language-plaintext highlighter-rouge">prefetch_related()</code>: 추가 쿼리를 수행해서 데이터를 즉시 로딩하는 방법으로, 역참조 외래키에서 사용됩니다.</li>
</ul>

<h2 id="참고">참고</h2>
<ul>
  <li><a href="https://bentist.tistory.com/109">bentist님의 블로그</a></li>
</ul>]]></content><author><name>Yeham Kim</name></author><category term="Django Study" /><summary type="html"><![CDATA[ORM이란 무엇인가?]]></summary></entry><entry><title type="html">[Study] Python Clean Code - Good Code</title><link href="http://localhost:4000/study/study-cleancode-goodcode/" rel="alternate" type="text/html" title="[Study] Python Clean Code - Good Code" /><published>2023-08-12T00:05:07+09:00</published><updated>2023-08-12T00:05:07+09:00</updated><id>http://localhost:4000/study/study-cleancode-goodcode</id><content type="html" xml:base="http://localhost:4000/study/study-cleancode-goodcode/"><![CDATA[<h2 id="계약에-의한-디자인">계약에 의한 디자인</h2>
<ul>
  <li>계약: 소프트웨어 컴포넌트 간의 통신 중에 반드시 지켜져야 하는 규칙을 강제하는 것입니다.</li>
  <li>사전조건: 코드가 실행되기 전에 확인해야 할 조건들로, 유효성 검사, DB 및 파일 등에 대한 것들로, 서버가 담당할 부분입니다.</li>
  <li>사후조건: 코드 실행 이후에 함수 반환 값의 유효성 검사로, 클라이언트가 담당할 부분입니다.</li>
  <li>위의 두 가지 조건을 통해, 책임소재를 신속히 파악할 수 있습니다. 사전조건 검증에 실패한다면 클라이언트의 결함, 사후조건에 실패하면 컴포넌트의 결함입니다.</li>
</ul>

<h3 id="사전조건precondition">사전조건(precondition)</h3>
<ul>
  <li>함수나 메서드가 제대로 동작하기 위해 보장해야 하는 모든 것을 의미하며, 적절한 데이터를 전달해야 합니다.</li>
  <li>파이썬은 동적으로 타입이 결정되기 때문에, 전달된 데이터가 적절한 타입인지 확인하는 경우도 있습니다.</li>
  <li>클라이언트가 함수를 호출하기 전, 모든 유효성을 검사하는 방식은 tolerant 접근법으로, 함수가 어떤 값이라도 수용하게 됩니다.</li>
  <li>하지만, 함수가 자체적으로 로직을 실행하기 전에 검사하도록 한다면 demanding 접근 방법입니다.</li>
  <li>DRY 원칙에 의해, 이때도 검증 로직은 클라이언트에 두거나 함수 자체에 두어야 합니다.</li>
</ul>

<h3 id="사후조건postcondition">사후조건(postcondition)</h3>
<ul>
  <li>메서드 또는 함수가 반환된 후의 상태를 강제하는 계약의 일부입니다.</li>
  <li>사후조건 검증에 통과하고 클라이언트는 반환 객체를 아무 문제 없이 사용할 수 있어야 합니다.</li>
</ul>

<h2 id="방어적-프로그래밍">방어적 프로그래밍</h2>
<ul>
  <li>방어적 프로그래밍은 계약에 의한 디자인과 다른 접근방식을 따릅니다.</li>
  <li>계약에서 예외를 발생시키고 실패하게 되는 조건을 기술하는 대신, 코드의 모든 부분을 유효하지 않은 것으로부터 스스로 보호할 수 있도록 합니다.</li>
  <li>에러핸들링(예상할 수 있는 시나리오의 오류를 처리하는 방법)과 어썰션(발생하지 않아야 하는 오류를 처리하는 방법)을 사용합니다.</li>
</ul>

<h3 id="에러-핸들링">에러 핸들링</h3>
<ul>
  <li>예상되는 에러에 대해 실행할 수 있을지, 프로그램을 중단할지를 판단하기 위한 절차입니다.</li>
</ul>

<p><strong>값 대체</strong></p>
<ul>
  <li>일부 시나리오에서 오류에 의해 소프트웨어가 잘못된 값을 생성하거나 전체가 종료될 위험이 있는 경우, 결괏값을 다른 값으로 대체합니다.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">DBPORT</span><span class="sh">"</span><span class="p">,</span> <span class="mi">5432</span><span class="p">)</span> <span class="c1"># "DBPORT"가 env에 없는 경우 5432 반환
</span><span class="k">def</span> <span class="nf">connect_database</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="sh">"</span><span class="s">localhost</span><span class="sh">"</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">5432</span><span class="p">):</span>
    <span class="bp">...</span>
</code></pre></div>    </div>
  </li>
  <li>데이터가 누락될 경우 None 때문에 발생하게 되는 오류를 방지합니다.</li>
</ul>

<p><strong>예외 처리</strong></p>
<ul>
  <li>함수 호출 실패는 외부 컴포넌트 중 하나의 문제로 인한 것일 수 있습니다.</li>
  <li>함수는 심각한 오류에 대해 명확하고 분명하게 알려주어 적절하게 해결할 수 있도록 해야 합니다.</li>
  <li>예외가 많을수록 호출자는 함수에 대해 더 많은 것을 알아야 하므로, 캡슐화를 약화시킵니다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">DataTransport</span><span class="p">:</span>
    <span class="n">retry_threshold</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">5</span>
    <span class="n">retry_n_times</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">3</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">connector</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_connector</span> <span class="o">=</span> <span class="n">connector</span>
        <span class="n">self</span><span class="p">.</span><span class="n">connection</span> <span class="o">=</span> <span class="bp">None</span>
      
    <span class="k">def</span> <span class="nf">deliver_event</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">connect</span><span class="p">()</span>
            <span class="n">data</span> <span class="o">=</span> <span class="n">event</span><span class="p">.</span><span class="nf">decode</span><span class="p">()</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">ConnectionError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">연결 실패: %s</span><span class="sh">"</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span>
            <span class="k">raise</span>
        <span class="k">except</span> <span class="nb">ValueError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">logger</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="sh">"</span><span class="s">%r 잘못된 데이터 포함: %s</span><span class="sh">"</span><span class="p">,</span> <span class="n">event</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span>
            <span class="k">raise</span>
    
    <span class="k">def</span> <span class="nf">connect</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">retry_n_times</span><span class="p">):</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">connection</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_connector</span><span class="p">.</span><span class="nf">connect</span><span class="p">()</span>
            <span class="k">except</span> <span class="nb">ConnectionError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
                <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">%s: 새로운 연결 시도 %is</span><span class="sh">"</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">retry_threshold</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
              <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">connection</span>
        <span class="k">raise</span> <span class="nc">ConnectionError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">retry_n_times</span><span class="si">}</span><span class="s"> 번째 재시도 연결 실패</span><span class="sh">"</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">send</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">deliver_event</code>의 경우, 두 가지의 예외상황이 발생할 수 있습니다. <code class="language-plaintext highlighter-rouge">connect</code> 메서드를 사용할 때 혹은 <code class="language-plaintext highlighter-rouge">decode()</code> 메서드를 사용할 때의 경우로, 구현을 수정할 필요가 있습니다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">connection_with_retry</span><span class="p">(</span><span class="n">connector</span><span class="p">,</span> <span class="n">retry_n_times</span><span class="p">,</span> <span class="n">retry_threshold</span><span class="o">=</span><span class="mi">5</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">retry_n_times</span><span class="p">):</span>
      <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">connector</span><span class="p">.</span><span class="nf">connect</span><span class="p">()</span>
      <span class="k">except</span> <span class="nb">ConnectionError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
          <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">%s: 새로운 연결 시도 %is</span><span class="sh">"</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">retry_threshold</span><span class="p">)</span>
          <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">retry_threshold</span><span class="p">)</span>
      <span class="n">exc</span> <span class="o">=</span> <span class="nc">ConnectionError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">retry_n_times</span><span class="si">}</span><span class="s"> 번째 재시도 연결 실패</span><span class="sh">"</span><span class="p">)</span>
      <span class="n">logger</span><span class="p">.</span><span class="nf">exception</span><span class="p">(</span><span class="n">exc</span><span class="p">)</span>
      <span class="k">raise</span> <span class="n">exc</span>

<span class="k">class</span> <span class="nc">DataTransport</span><span class="p">:</span>
    <span class="n">retry_threshold</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">5</span>
    <span class="n">retry_n_times</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">3</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">connector</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_connector</span> <span class="o">=</span> <span class="n">connector</span>
        <span class="n">self</span><span class="p">.</span><span class="n">connection</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">deliver_event</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">connection</span> <span class="o">=</span> <span class="nf">connection_with_retry</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_connector</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">retry_n_times</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">retry_threshold</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">send</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="nf">decode</span><span class="p">())</span>
        <span class="k">except</span> <span class="nb">ValueError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">logger</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="sh">"</span><span class="s">%r 잘못된 데이터 포함: %s</span><span class="sh">"</span><span class="p">,</span> <span class="n">event</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span>
            <span class="k">raise</span>
    <span class="bp">...</span>
</code></pre></div></div>
<ul>
  <li>연결과 연결 예외까지를 담당하는 <code class="language-plaintext highlighter-rouge">connection_with_retry</code> 메서드를 독립적으로 구현합니다.</li>
  <li>위와 같이 방식을 변경하면, 예외처리를 <code class="language-plaintext highlighter-rouge">deliver_event</code>에서 따로 관리할 필요가 없게 되고, 의도적으로 예외가 발생하도록 내버려 둘 수 있습니다.</li>
</ul>

<h3 id="예외처리시-주의사항">예외처리시 주의사항</h3>
<p><strong>Traceback 노출 금지</strong></p>
<ul>
  <li>예외 처리시 발생하는 오류가 전파되었을 때, 세부사항을 사용자에게 보이지 않도록 해야 합니다.</li>
  <li>파이썬에서의 traceback은 중요 정보들을 유출하게될 가능성이 있기 때문입니다.</li>
</ul>

<p><strong>비어있는 except 블록 사용 금지</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span><span class="p">:</span>
    <span class="nf">process_data</span><span class="p">()</span>
<span class="k">except</span><span class="p">:</span>
    <span class="k">pass</span>
</code></pre></div></div>
<ul>
  <li>파이썬의 철학은, “에러는 조용히 전달되어서는 안된다는 것”입니다. 위와 같은 방식은 코드를 숨기고 에러 수정을 어렵게 합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">Exception</code>과 같이 광범위한 예외 보다는 <code class="language-plaintext highlighter-rouge">보다 구체적인 예외</code>를 사용해야합니다.</li>
</ul>

<p><strong>원본 예외 포함</strong></p>
<ul>
  <li>오류 처리 과정에서 다른 오류를 발생시키고 메시지를 변경하는 경우가 있을 수 있습니다.</li>
  <li>이 때, 원본의 예외를 포함하는 것이 좋습니다.
```python
class InternalDataError(Exception):
  “"”업무 도메인 데이터의 예외”””</li>
</ul>

<p>def process(data_dictionary, record_id):
    try:
        return data_dictionary[record_id]
    except KeyError as e:
      raise InternalDataError(“Record not present”) from e</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- 위와 같이, 기본 예외를 상속받아, 커스텀 예외로 처리하는 방식도 있습니다.

### 파이썬에서 어썰션 사용하기
- 절대로 일어나지 않아야하는 상황에서 사용됩니다. 따라서, assert 문이 작동하면, 소프트웨어에 결함이 있음을 의미합니다.
- 따라서, 프로그램을 중단해야할 가능성이 있는 오류로, 결함을 수정하기 위해 프로그램을 중지하는 것이 좋습니다.
```python
result = condition.holds()
assert result &gt; 0, "에러 {0}".format(result)
</code></pre></div></div>

<h2 id="관심사의-분리">관심사의 분리</h2>
<ul>
  <li>프로그램의 각 부분은 기능의 일부분(관심사)에 대해서만 책임을 지며, 나머지 부분에 대해서는 알 필요가 없습니다.</li>
  <li>소프트웨어의 관심사를 분리하는 목표는 파급 효과(한 지점의 변화가 전체로 전파되는 것)를 최소화하여 유지보수성을 향상시키는데 있습니다.</li>
</ul>

<h3 id="응집력">응집력</h3>
<ul>
  <li>객체는 작고 잘 정의된 목적을 가져야 하며, 가능하면 작아야 합니다.</li>
  <li>객체의 응집력이 높을수록 더 유용하고 재사용성이 높아지므로, 더 좋은 디자인입니다.</li>
</ul>

<h3 id="결합력">결합력</h3>
<ul>
  <li>두 개 이상의 객체가 서로 어떻게 의존하는지를 나타냅니다.</li>
  <li>객체 또는 메서드의 두 부분이 서로 너무 의존적이라면, 다음과 같은 결과를 가져옵니다.</li>
  <li>
    <ol>
      <li>낮은 재사용성: 어떤 함수가 특정 객체에 지나치게 의존하거나 너무 많은 파라미터를 가진다면, 해당 객체에 결합하게 됩니다.</li>
    </ol>
  </li>
  <li>
    <ol>
      <li>파급효과: 너무 가깝게 붙어있게 되면, 두 부분 중 하나를 변경할 때 다른 부분에도 영향을 미칩니다.</li>
    </ol>
  </li>
  <li>
    <ol>
      <li>낮은 수준의 추상화: 두 함수가 너무 가깝게 관련되어 있으면, 서로 다른 추상화 레벨에서 문제를 해결하기 어렵습니다.</li>
    </ol>
  </li>
</ul>

<h2 id="컴포지션과-상속">컴포지션과 상속</h2>

<h3 id="상속의-좋은-예시">상속의 좋은 예시</h3>
<ul>
  <li>public 메서드와 속성 인터페이스를 정의한 컴포넌트를 그대로 물려받으면서 추가 기능을 더하려고 하는 경우 및 특정 기능을 수정하는 경우에 좋습니다.</li>
  <li>예를 들어, <code class="language-plaintext highlighter-rouge">http.server</code> 패키지에서 <code class="language-plaintext highlighter-rouge">BaseHTTPRequsetHandler</code> 기본 클래스와, 이를 변경한 <code class="language-plaintext highlighter-rouge">SimpleHTTPRequestHandler</code>가 있습니다.</li>
  <li>예외처리를 담당하는 <code class="language-plaintext highlighter-rouge">Exception</code> 클래스의 경우, 상속을 사용하는 것이 좋습니다.</li>
</ul>

<h3 id="상속의-안티패턴">상속의 안티패턴</h3>
<ul>
  <li>도메인 문제를 해결하기 위해, 적절한 데이터 구조를 만든 후, 이를 사용하는 객체를 만들지 않고 데이터 구조(딕셔너리/셋/리스트 등) 자체를 객체로 만드는 경우입니다.</li>
  <li>또한, public 인터페이스를 통해 노출된 public 메서드를 사용하게 되기 때문에, 필요없는 메서드에도 접근할 수 있는 coupling에 대한 문제가 발생합니다.
```python
class TransactionPolicy(collections.UserDict):
  “"”잘못된 상속 예시”””
  def change_in_policy(self, customer_id, <strong>new_policy_data):
      self[customer_id].update(</strong>new_policy_data)</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- 올바른 해결책은 컴포지션을 사용하는 것입니다. `TransactionalPolicy` 자체가 딕셔너리가 되는 것이 아니라 딕셔너리를 활용하는 것입니다.
- 사전을 private 속성에 저장하고 `__getitem__()`으로 사전의 프록시를 만들고 나머지 필요한 public 메서드를 추가적으로 구현하는 것입니다.
```python
class TransactionPolicy:
    """컴포지션을 사용한 리팩토링 예시"""
    def __init__(self, policy_data, **extra_data):
        self._data = {**policy_data, **extra_data}
    
    def change_in_policy(self, customer_id, **new_policy_data):
        self._data[customer_id].update(**new_policy_data)

    def __getitem__(self, customer_id):
        return self._data[customer_id]
    
    def __len__(self):
        return len(self._data)
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">TransacctionalPolicy</code> 자체가 딕셔너리가 되는 것이 아닌, 딕셔너리를 활용하는 것입니다. 즉, 딕셔너리를 private 속성에 저장하고 <code class="language-plaintext highlighter-rouge">__getitem__()</code>으로 딕셔너리의 프록시를 생성합니다.</li>
  <li>이 방법은 개념적으로 정확하며, 현재 딕셔너리의 데이터 구조를 변경하더라도 인터페이스만 유지하면, 사용자는 영향을 받지 않습니다.</li>
</ul>

<h3 id="파이썬-다중상속">파이썬 다중상속</h3>
<ul>
  <li>파이썬은 다중상속을 지원하지만, 이를 잘못 사용하면 큰 문제를 초래할 수 있습니다.</li>
  <li>다중 상속의 올바른 해결책으로는 믹스인(mixin)을 활용한 디자인 패턴이 있습니다.</li>
</ul>

<p><strong>믹스인(mixin)</strong></p>
<ul>
  <li>믹스인은 코드를 재사용하기 위해, 일반적인 행동을 캡슐화한 기본 클래스입니다.</li>
  <li>
    <p>믹스인 클래스는 그 자체로는 유용하지 않으며, 대부분이 클래스에 정의된 메서드나 속성에 의존하기 때문에 확장에서는 동작하지 않습니다.
```python
class BaseTokenizer:
  def <strong>init</strong>(self, str_token):
      self.str_token = str_token</p>

    <p>def <strong>iter</strong>(self):
      yield from self.str_token.split(“-“)</p>
  </li>
</ul>

<p>class UpperIterableMixin:
  def <strong>iter</strong>(self):
      return map(str.upper, super().<strong>iter</strong>())</p>

<p>class Tokenizer(UpperIterableMixin, BaseTokenizer):
    pass</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>tk = BaseTokenizer(“28a2320b-fd3f-4627-9792-a2b38e3c46b0”)
list(tk)
[‘28a2320b’, ‘fd3f’, ‘4627’, ‘9792’, ‘a2b38e3c46b0’]
```</p>
      <ul>
        <li>위에서 mixin과 함께 <code class="language-plaintext highlighter-rouge">BaseTokenizer</code>를 사용한 <code class="language-plaintext highlighter-rouge">Tokenizer</code> 클래스의 경우, 일종의 데코레이터 역할을 합니다.</li>
        <li>믹스인에서 <code class="language-plaintext highlighter-rouge">__iter__</code>를 호출하고 다시 <code class="language-plaintext highlighter-rouge">super()</code>를 호출하여 <code class="language-plaintext highlighter-rouge">BaseTokenizer</code>에 위임합니다.</li>
      </ul>
    </blockquote>
  </blockquote>
</blockquote>

<h3 id="파이썬의-함수-인자-동작방식">파이썬의 함수 인자 동작방식</h3>
<ul>
  <li>파이썬의 첫 번째 규칙은 모든 인자가 passed by a value 된다는 것입니다. 따라서, 함수 인자에 있는 변수를 할당하고 나중에 사용합니다.</li>
  <li>함수의 인자가 mutable한지 immutable한지에 따라서 함수 내부에서 값이 의도치 않게 변형되는 경우가 발생할 수 있습니다.
<strong>가변인자</strong></li>
  <li>파이썬에서 가변인자를 사용하려면 해당 인자를 packing할 변수 이름 앞에 <code class="language-plaintext highlighter-rouge">*</code>를 붙입니다.
```python
    <h1 id="packing-예시">packing 예시</h1>
    <p>def f(first, second):
  print(first, second)</p>
  </li>
</ul>

<blockquote>
  <blockquote>
    <blockquote>
      <p>l = [1, 2]
f(*l)
1 2</p>
    </blockquote>
  </blockquote>
</blockquote>

<h1 id="unpacking-예시">unpacking 예시</h1>
<blockquote>
  <blockquote>
    <blockquote>
      <p>a, b = [1, 2]
print(a, b)
1 2
```</p>
      <ul>
        <li>인자를 딕셔너리로 패킹하려면 변수 이름 앞에 <code class="language-plaintext highlighter-rouge">**</code>를 붙입니다.
```python
def function(**kwargs):
  print(kwargs)</li>
      </ul>
    </blockquote>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <blockquote>
      <p>function(key=”value”)
{‘key’: ‘value’}
```</p>
    </blockquote>
  </blockquote>
</blockquote>]]></content><author><name>Yeham Kim</name></author><category term="Study" /><summary type="html"><![CDATA[계약에 의한 디자인 계약: 소프트웨어 컴포넌트 간의 통신 중에 반드시 지켜져야 하는 규칙을 강제하는 것입니다. 사전조건: 코드가 실행되기 전에 확인해야 할 조건들로, 유효성 검사, DB 및 파일 등에 대한 것들로, 서버가 담당할 부분입니다. 사후조건: 코드 실행 이후에 함수 반환 값의 유효성 검사로, 클라이언트가 담당할 부분입니다. 위의 두 가지 조건을 통해, 책임소재를 신속히 파악할 수 있습니다. 사전조건 검증에 실패한다면 클라이언트의 결함, 사후조건에 실패하면 컴포넌트의 결함입니다.]]></summary></entry><entry><title type="html">[Study] Load Balancer</title><link href="http://localhost:4000/study/study-load-balancer/" rel="alternate" type="text/html" title="[Study] Load Balancer" /><published>2023-08-11T00:05:07+09:00</published><updated>2023-08-11T00:05:07+09:00</updated><id>http://localhost:4000/study/study-load-balancer</id><content type="html" xml:base="http://localhost:4000/study/study-load-balancer/"><![CDATA[<h2 id="작성-계기">작성 계기</h2>
<ul>
  <li>면접질문 중, nginx를 사용한 로드밸런싱이 OSI Layer의 어떤 계층에서 일어나는지에<br />
대한 질문에 대해 대답하지 못해, 공부를 시작하게 되었습니다.</li>
</ul>

<h3 id="로드밸런서">로드밸런서</h3>
<ul>
  <li>트래픽을 받아서 여러 대의 서버에 분산시키는 하드웨어/소프트웨어를 의미합니다.</li>
  <li>부하 분산에는 L4 Load Balancer와 L7 Load Balancer가 사용됩니다.</li>
</ul>

<h3 id="l4-load-balancer">L4 Load Balancer</h3>
<ul>
  <li>IP Port를 활용하여 서버부하분산을 하는 것을 의미합니다. 적합한 server IP와 Port를 목적지로 하는 요청에 따라 부하를 분산합니다.</li>
  <li>로드밸런싱의 기준점이 IP와 Port이기 때문에, TCP/UDP의 Header를 분석하여 로드밸런싱에 활용하지는 않습니다. 따라서, 프로토콜들의 특성으로 인한 행동을 제어하는 편입니다.</li>
  <li>클라이언트에서 로드밸런서로 요청을 보낼 때, 최적의 서버로 요청을 전송하고, 그 결과를 클라이언트에게 전달합니다.</li>
  <li>요청 패킷에 대해 NAT도 수행하여 기록된 대상 IP 주소를 자체에서 선택한 컨텐츠 서버의 IP 주소로 변경합니다.</li>
</ul>

<h3 id="l7-load-balancer">L7 Load Balancer</h3>
<ul>
  <li>L7 Load Balancer는 URL, Payload, HTTP Header, Cookie 등의 내용을 기준으로 부하를 분산합니다. 따라서, 컨텐츠 기반 스위칭이라고도 말합니다.</li>
  <li>해당 계층에서의 로드밸런싱은 전송되는 정보의 양이 더 많기 때문에, L4 에서보다 비용이 더 많이 들게 되지만, 전체 효율성은 더욱 높습니다.</li>
  <li>클라이언트가 요청하는 데이터의 유형을 결정할 수 있기 때문입니다. 따라서, 모든 서버에 동일한 데이터를 복제할 필요가 없습니다.</li>
  <li>L4에서와 같이 트래픽을 패킷단위로 관리하는 것이 아닌, 요청과 응답을 전체적으로 읽고 관리할 수 있습니다.</li>
</ul>

<h2 id="osiopen-systems-interconnection-참조-모델">OSI(Open Systems Interconnection) 참조 모델</h2>
<p><strong>7 계층 - Application Layer</strong></p>
<ul>
  <li>사용자에게 보이는 부분으로, 최종 사용자에게 가장 가까운 계층으로, 사용자와 직접적으로 상호작용합니다.</li>
  <li>애플리케이션 목적에 맞는 통신 방법을 제공합니다.</li>
  <li>HTTP, DNS, SMTP, FTP등의 대표적인 프로토콜이 해당 레이어에 속합니다.</li>
</ul>

<p><strong>6 계층 - Presentation Layer</strong></p>
<ul>
  <li>애플리케이션 통신에서 메시지 포맷을 관리하는 계층입니다.</li>
  <li>데이터를 안전하게 전송하기 위해 암호화, 복호화하여 소통합니다.</li>
</ul>

<p><strong>5 게층 - Session Layer</strong></p>
<ul>
  <li>애플리케이션 통신에서 세션을 관리하는 계층입니다.</li>
  <li>예시로 RPC(remote procedure call)가 있습니다.</li>
</ul>

<p><strong>4 계층 - Transport Layer</strong></p>
<ul>
  <li>애플리케이션 통신을 담당하며, 실제로 목적지 애필리케이션으로 데이터를 전송합니다.</li>
  <li>TCP, UDP 프로토콜을 사용합니다.</li>
  <li>TCP: 안정적이고 신뢰할 수 있는 데이터 전송을 보장합니다.</li>
  <li>UDP: 데이터가 중간에 유실되거나 순서가 꼬일 수 있지만, 데이터를 무조건 전송합니다.</li>
  <li>Network Layer의 기능을 사용하여 데이터를 전송합니다.</li>
</ul>

<p><strong>3 계층 - Network Layer</strong></p>
<ul>
  <li>호스트 간의 통신을 담당합니다. (IP 프로토콜)</li>
  <li>목적지 호스트로 데이터를 전송합니다.</li>
  <li>네트워크 간의 최적의 경로를 결정합니다.</li>
  <li>Data Link Layer의 기능을 사용하여 기능을 구현합니다.</li>
</ul>

<p><strong>2 계층 - Data Link Layer</strong></p>
<ul>
  <li>IP 주소가 아닌 MAC 주소 기반으로 통신합니다.</li>
  <li>ARP: IP 주소를 MAC 주소로 변환하는 프로토콜입니다.</li>
</ul>

<p><strong>1 계층 - Physical Layer</strong></p>
<ul>
  <li>
    <p>bits 단위로 데이터를 전송합니다.</p>
  </li>
  <li>서로 다른 컴퓨터가 통신을 할 떄 역시, 7계층을 기반으로 통신합니다.</li>
  <li>라우터는 Network Layer, Data Link Layer, Physical Layer에 있는 프로토콜을 구현합니다.</li>
</ul>

<h2 id="참고">참고</h2>
<h2 id="amazon-elb">Amazon ELB</h2>
<ul>
  <li>AWS가 제공하는 로드 밸런서로, 집중되는 트래픽을 서버/네트워크에 분배하는 부하 분산 장치입니다.</li>
</ul>

<p><strong>ALB</strong></p>
<ul>
  <li>HTTP/HTTPS 프로토콜의 헤더를 보고 적절한 패킷으로 전송하므로, OSI 모형의 애플리케이션 계층(7계층)에서 동작합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">IP 주소 + 포트번호 + 패킷내용</code> 정보를 통해 스위칭합니다.</li>
  <li>L7단에서 지원하기 때문에 인스턴스와 로드 밸런서 사이에서 SSL이 적용된 암호화 통신이 가능합니다.</li>
  <li>IP 주소가 변동될 수 있기 때문에, Client는 DNS 주소로 접근하는 것이 좋습니다.<br />
(따라서, EIP를 ALB에 설정해두는 것이 좋습니다.)</li>
</ul>

<p><strong>NLB</strong></p>
<ul>
  <li>TCP/IP 프로토콜의 헤더를 보고 적절한 패킷으로 전송하므로, OSI 모형의 전송 계층(4계층)에서 동작합니다.<br />
(ALB보다 낮은 계층에서 동작하기 때문에 속도가 빠릅니다.)</li>
  <li><code class="language-plaintext highlighter-rouge">IP 주소 + 포트번호</code> 정보를 통해고 스위칭합니다.</li>
  <li>EIP를 이용할 수 있으며, DNS와 IP 주소 모두 사용 가능합니다. (SSL은 사용 불가능)</li>
</ul>

<h3 id="reference">reference</h3>
<ul>
  <li><a href="https://www.nginx.com/resources/glossary/layer-4-load-balancing/">Nginx 공식 홈페이지</a></li>
</ul>]]></content><author><name>Yeham Kim</name></author><category term="Study" /><summary type="html"><![CDATA[작성 계기 면접질문 중, nginx를 사용한 로드밸런싱이 OSI Layer의 어떤 계층에서 일어나는지에 대한 질문에 대해 대답하지 못해, 공부를 시작하게 되었습니다.]]></summary></entry><entry><title type="html">[Study] Python Clean Code - Unittest</title><link href="http://localhost:4000/study/study-cleancode-unittest/" rel="alternate" type="text/html" title="[Study] Python Clean Code - Unittest" /><published>2023-07-20T00:05:07+09:00</published><updated>2023-07-20T00:05:07+09:00</updated><id>http://localhost:4000/study/study-cleancode-unittest</id><content type="html" xml:base="http://localhost:4000/study/study-cleancode-unittest/"><![CDATA[<h2 id="unit-test">Unit Test</h2>
<ul>
  <li>단위 테스트란, 다른 코드의 일부분이 유효한지를 검사하는 코드입니다.</li>
  <li>단위 테스트는 소프트웨어의 핵심이 되는 필수적인 기능으로서 일반 비즈니스 로직과 동일한 수준으로 다루어져야 합니다.</li>
  <li>격리: 단위 테스트는 독립적이며, 비즈니스 로직에만 집중합니다. 이전 상태와 관계없이 임의 순서로 실행될 수 있어야 합니다.</li>
  <li>성능: 신속하게 실행되어야 하며, 반복적으로 여러 번 실행될 수 있어야 합니다.</li>
  <li>자체 검증: 실행만으로 결과를 결정할 수 있어야 하며, 이를 위한 추가 단계(종속성)가 없어야 합니다.</li>
</ul>

<p><strong>추가</strong></p>
<ul>
  <li>통합 테스트: 한 번에 여러 컴포넌트를 테스트하여, 종합적으로 예상대로 잘 동작하는지 검증합니다.</li>
  <li>통합 테스트의 경우, 부작용이나 격리를 고려하지 않은 채로, HTTP 요청을 하거나 데이터베이스에 연결하는 등의 작업이 수행 가능합니다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">logging</span>
<span class="kn">import</span> <span class="n">unittest</span>
<span class="kn">from</span> <span class="n">unittest.mock</span> <span class="kn">import</span> <span class="n">Mock</span>
<span class="kn">from</span> <span class="n">enum</span> <span class="kn">import</span> <span class="n">Enum</span>

<span class="n">logger</span> <span class="o">=</span> <span class="n">logging</span><span class="p">.</span><span class="nf">getLogger</span><span class="p">(</span><span class="sh">"</span><span class="s">skeleton</span><span class="sh">"</span><span class="p">)</span>
<span class="n">logger</span><span class="p">.</span><span class="nf">setLevel</span><span class="p">(</span><span class="n">logging</span><span class="p">.</span><span class="n">INFO</span><span class="p">)</span>
<span class="n">logger</span><span class="p">.</span><span class="nf">addHandler</span><span class="p">(</span><span class="n">logging</span><span class="p">.</span><span class="nc">StreamHandler</span><span class="p">())</span>

<span class="k">class</span> <span class="nc">MergeRequestException</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="k">class</span> <span class="nc">MergeRequestStatus</span><span class="p">(</span><span class="n">Enum</span><span class="p">):</span>
    <span class="n">APPROVED</span> <span class="o">=</span> <span class="sh">"</span><span class="s">approved</span><span class="sh">"</span>
    <span class="n">REJECTED</span> <span class="o">=</span> <span class="sh">"</span><span class="s">rejected</span><span class="sh">"</span>
    <span class="n">PENDING</span> <span class="o">=</span> <span class="sh">"</span><span class="s">pending</span><span class="sh">"</span>
    <span class="n">OPEN</span> <span class="o">=</span> <span class="sh">"</span><span class="s">open</span><span class="sh">"</span>
    <span class="n">CLOSED</span> <span class="o">=</span> <span class="sh">"</span><span class="s">closed</span><span class="sh">"</span>

<span class="k">class</span> <span class="nc">MergeRequest</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_context</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">upvotes</span><span class="sh">"</span><span class="p">:</span> <span class="nf">set</span><span class="p">(),</span>
            <span class="sh">"</span><span class="s">downvotes</span><span class="sh">"</span><span class="p">:</span> <span class="nf">set</span><span class="p">(),</span>
        <span class="p">}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_status</span> <span class="o">=</span> <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">OPEN</span>
    
    <span class="k">def</span> <span class="nf">close</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_status</span> <span class="o">=</span> <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">CLOSED</span>
    
    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">status</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">_status</span> <span class="o">==</span> <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">CLOSED</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_status</span>

        <span class="k">return</span> <span class="nc">AcceptanceThreshold</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_context</span><span class="p">).</span><span class="nf">status</span><span class="p">()</span>
    
    <span class="k">def</span> <span class="nf">_cannot_vote_if_closed</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">_status</span> <span class="o">==</span> <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">CLOSED</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">MergeRequestException</span><span class="p">(</span><span class="sh">"</span><span class="s">종료된 머지 리퀘스트에 투표할 수 없음</span><span class="sh">"</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">upvote</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">by_user</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_cannot_vote_if_closed</span><span class="p">()</span>

        <span class="n">self</span><span class="p">.</span><span class="n">_context</span><span class="p">[</span><span class="sh">"</span><span class="s">downvotes</span><span class="sh">"</span><span class="p">].</span><span class="nf">discard</span><span class="p">(</span><span class="n">by_user</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_context</span><span class="p">[</span><span class="sh">"</span><span class="s">upvotes</span><span class="sh">"</span><span class="p">].</span><span class="nf">add</span><span class="p">(</span><span class="n">by_user</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">downvote</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">by_user</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_cannot_vote_if_closed</span><span class="p">()</span>

        <span class="n">self</span><span class="p">.</span><span class="n">_context</span><span class="p">[</span><span class="sh">"</span><span class="s">upvotes</span><span class="sh">"</span><span class="p">].</span><span class="nf">discard</span><span class="p">(</span><span class="n">by_user</span><span class="p">)</span>        
        <span class="n">self</span><span class="p">.</span><span class="n">_context</span><span class="p">[</span><span class="sh">"</span><span class="s">downvotes</span><span class="sh">"</span><span class="p">].</span><span class="nf">add</span><span class="p">(</span><span class="n">by_user</span><span class="p">)</span>
    
<span class="k">class</span> <span class="nc">AcceptanceThreshold</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">merge_request_context</span><span class="p">:</span> <span class="nb">dict</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_context</span> <span class="o">=</span> <span class="n">merge_request_context</span>

    <span class="k">def</span> <span class="nf">status</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">_context</span><span class="p">[</span><span class="sh">'</span><span class="s">downvotes</span><span class="sh">'</span><span class="p">]:</span>
            <span class="k">return</span> <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">REJECTED</span>
        <span class="k">elif</span> <span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_context</span><span class="p">[</span><span class="sh">"</span><span class="s">upvotes</span><span class="sh">"</span><span class="p">])</span> <span class="o">&gt;=</span> <span class="mi">2</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">APPROVED</span>
        <span class="k">return</span> <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">PENDING</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">unittest</span><span class="p">.</span><span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>
<ul>
  <li>위의 클래스 및 테스터는 머지 상황에서, 두 명 이상의 개발자가 upvote를 하거나 한 명이라도 downvote를 하면 머지를 실패하는 경우에 대한 프로그램입니다.</li>
  <li><code class="language-plaintext highlighter-rouge">AcceptanceThreshold</code>를 최소 단위로 분리하여 테스트를 진행하고, <code class="language-plaintext highlighter-rouge">MergeRequest</code> 클래스에서 이를 사용하는 방식입니다. (리팩토링 전에 <code class="language-plaintext highlighter-rouge">AcceptanceThreshold</code>의 status 메서드가 <code class="language-plaintext highlighter-rouge">MergeRequest</code> 메서드였음)</li>
</ul>

<p><strong><code class="language-plaintext highlighter-rouge">unittest</code> 모듈을 사용한 테스트 케이스</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TestMergeRequestStatus</span><span class="p">(</span><span class="n">unittest</span><span class="p">.</span><span class="n">TestCase</span><span class="p">):</span>
    <span class="c1"># NOTE: 한 명이 downvote하여, 머지 리퀘스트가 거부된 상황입니다.
</span>    <span class="k">def</span> <span class="nf">test_simple_rejected</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">merge_request</span> <span class="o">=</span> <span class="nc">MergeRequest</span><span class="p">()</span>
        <span class="n">merge_request</span><span class="p">.</span><span class="nf">downvote</span><span class="p">(</span><span class="sh">"</span><span class="s">maintainer</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span><span class="n">merge_request</span><span class="p">.</span><span class="n">status</span><span class="p">,</span> <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">REJECTED</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">test_just_created_is_pending</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span><span class="nc">MergeRequest</span><span class="p">().</span><span class="n">status</span><span class="p">,</span> <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">PENDING</span><span class="p">)</span>
    
    <span class="c1"># NOTE: 한 명만 upvote를 한 상황에서는 다음 투표를 대기합니다.
</span>    <span class="k">def</span> <span class="nf">test_pending_awaiting_review</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">merge_request</span> <span class="o">=</span> <span class="nc">MergeRequest</span><span class="p">()</span>
        <span class="n">merge_request</span><span class="p">.</span><span class="nf">upvote</span><span class="p">(</span><span class="sh">"</span><span class="s">core-dev</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span><span class="n">merge_request</span><span class="p">.</span><span class="n">status</span><span class="p">,</span> <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">PENDING</span><span class="p">)</span>

    <span class="c1"># NOTE: 두 명 이상이 upvote를 수행하면 승인됩니다.
</span>    <span class="k">def</span> <span class="nf">test_approved</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">merge_request</span> <span class="o">=</span> <span class="nc">MergeRequest</span><span class="p">()</span>
        <span class="n">merge_request</span><span class="p">.</span><span class="nf">upvote</span><span class="p">(</span><span class="sh">"</span><span class="s">dev1</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">merge_request</span><span class="p">.</span><span class="nf">upvote</span><span class="p">(</span><span class="sh">"</span><span class="s">dev2</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span><span class="n">merge_request</span><span class="p">.</span><span class="n">status</span><span class="p">,</span> <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">APPROVED</span><span class="p">)</span>

    <span class="c1"># NOTE: 투표함이 닫히면, 더이상 투표를 할 수 없습니다.
</span>    <span class="k">def</span> <span class="nf">test_cannot_upvote_on_closed_merge_request</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">merge_request</span> <span class="o">=</span> <span class="nc">MergeRequest</span><span class="p">()</span>
        <span class="n">merge_request</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">assertRaises</span><span class="p">(</span>
            <span class="n">MergeRequestException</span><span class="p">,</span> <span class="n">merge_request</span><span class="p">.</span><span class="n">upvote</span><span class="p">,</span> <span class="sh">"</span><span class="s">dev1</span><span class="sh">"</span>
        <span class="p">)</span>
    
    <span class="c1"># NOTE: 투표함이 닫히면, 더이상 투표를 할 수 없습니다.
</span>    <span class="k">def</span> <span class="nf">test_cannot_downvote_on_closed_merge_request</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">merge_request</span> <span class="o">=</span> <span class="nc">MergeRequest</span><span class="p">()</span>
        <span class="n">merge_request</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">assertRaisesRegex</span><span class="p">(</span>
            <span class="n">MergeRequestException</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">종료된 머지 리퀘스트에 투표할 수 없음</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">merge_request</span><span class="p">.</span><span class="n">downvote</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">dev1</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">)</span>

<span class="k">class</span> <span class="nc">TestAcceptanceThreshold</span><span class="p">(</span><span class="n">unittest</span><span class="p">.</span><span class="n">TestCase</span><span class="p">):</span>
    <span class="c1"># NOTE: 테스트 전반에 걸쳐 사용될 데이터 픽스처를 정의합니다.
</span>    <span class="k">def</span> <span class="nf">setUp</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">fixture_data</span> <span class="o">=</span> <span class="p">(</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">downvotes</span><span class="sh">"</span><span class="p">:</span> <span class="nf">set</span><span class="p">(),</span> <span class="sh">"</span><span class="s">upvotes</span><span class="sh">"</span><span class="p">:</span> <span class="nf">set</span><span class="p">()},</span>
            <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">PENDING</span>
        <span class="p">),</span> <span class="p">(</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">downvotes</span><span class="sh">"</span><span class="p">:</span> <span class="nf">set</span><span class="p">(),</span> <span class="sh">"</span><span class="s">upvotes</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">dev1</span><span class="sh">"</span><span class="p">}},</span>
            <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">PENDING</span>
        <span class="p">),</span> <span class="p">(</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">downvotes</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">dev1</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">upvotes</span><span class="sh">"</span><span class="p">:</span> <span class="nf">set</span><span class="p">()},</span>
            <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">REJECTED</span>
        <span class="p">),</span> <span class="p">(</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">downvotes</span><span class="sh">"</span><span class="p">:</span> <span class="nf">set</span><span class="p">(),</span> <span class="sh">"</span><span class="s">upvotes</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">dev1</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">dev2</span><span class="sh">"</span><span class="p">}},</span>
            <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">APPROVED</span>
        <span class="p">)</span>

    <span class="k">def</span> <span class="nf">test_status_resolution</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">context</span><span class="p">,</span> <span class="n">expected</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">fixture_data</span><span class="p">:</span>
            <span class="c1"># NOTE: subTest: 호출되는 테스트 조건을 표시하는데 사용됩니다.
</span>            <span class="c1">#       반복 중 하나가 실패하면, subTest에 전달된 변수의 값을 나타냅니다.
</span>            <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="nf">subTest</span><span class="p">(</span><span class="n">context</span><span class="o">=</span><span class="n">context</span><span class="p">):</span>
                <span class="n">status</span> <span class="o">=</span> <span class="nc">AcceptanceThreshold</span><span class="p">(</span><span class="n">context</span><span class="p">).</span><span class="nf">status</span><span class="p">()</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span><span class="n">status</span><span class="p">,</span> <span class="n">expected</span><span class="p">)</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">unittest</code> 모듈을 사용하는 경우, <code class="language-plaintext highlighter-rouge">TestCase</code> 클래스를 상속받는 테스터 클래스를 생성합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">Exception</code> 반환을 테스트하기 위해 <code class="language-plaintext highlighter-rouge">unittest.TestCase.assertRaises</code>, <code class="language-plaintext highlighter-rouge">unittest.TestCase.assertRaisesRegex</code> 메서드를 사용할 수 있습니다.</li>
  <li>for 루프를 이용하면, 테스트에서 오류가 발생한 시점에서 멈추게 되지만, <code class="language-plaintext highlighter-rouge">subTest</code> 메서드를 사용하면 모든 케이스에 대해 테스트를 마치고, 실패 케이스들을 모두 알 수 있습니다.</li>
</ul>

<p><strong><code class="language-plaintext highlighter-rouge">pytest</code> 모듈을 사용한 테스트 케이스</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># NOTE: MergeRequestStatus
</span><span class="k">def</span> <span class="nf">test_simple_rejected</span><span class="p">():</span>
    <span class="n">merge_request</span> <span class="o">=</span> <span class="nc">MergeRequest</span><span class="p">()</span>
    <span class="n">merge_request</span><span class="p">.</span><span class="nf">downvote</span><span class="p">(</span><span class="sh">"</span><span class="s">maintainer</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">assert</span> <span class="n">merge_request</span><span class="p">.</span><span class="n">status</span> <span class="o">==</span> <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">REJECTED</span>

<span class="k">def</span> <span class="nf">test_just_created_is_pending</span><span class="p">():</span>
    <span class="k">assert</span> <span class="nc">MergeRequest</span><span class="p">().</span><span class="n">status</span> <span class="o">==</span> <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">PENDING</span>

<span class="k">def</span> <span class="nf">test_pending_awaiting_review</span><span class="p">():</span>
    <span class="n">merge_request</span> <span class="o">=</span> <span class="nc">MergeRequest</span><span class="p">()</span>
    <span class="n">merge_request</span><span class="p">.</span><span class="nf">upvote</span><span class="p">(</span><span class="sh">"</span><span class="s">core-dev</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">assert</span> <span class="n">merge_request</span><span class="p">.</span><span class="n">status</span> <span class="o">==</span> <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">PENDING</span>

<span class="k">def</span> <span class="nf">test_approved</span><span class="p">():</span>
    <span class="n">merge_request</span> <span class="o">=</span> <span class="nc">MergeRequest</span><span class="p">()</span>
    <span class="n">merge_request</span><span class="p">.</span><span class="nf">upvote</span><span class="p">(</span><span class="sh">"</span><span class="s">dev1</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">merge_request</span><span class="p">.</span><span class="nf">upvote</span><span class="p">(</span><span class="sh">"</span><span class="s">dev2</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">assert</span> <span class="n">merge_request</span><span class="p">.</span><span class="n">status</span> <span class="o">==</span> <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">APPROVED</span>

<span class="k">def</span> <span class="nf">test_invalid_types</span><span class="p">():</span>
    <span class="n">merge_request</span> <span class="o">=</span> <span class="nc">MergeRequest</span><span class="p">()</span>
    <span class="n">pytest</span><span class="p">.</span><span class="nf">raises</span><span class="p">(</span><span class="nb">TypeError</span><span class="p">,</span> <span class="n">merge_request</span><span class="p">.</span><span class="n">upvote</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">invalid-object</span><span class="sh">"</span><span class="p">})</span>

<span class="k">def</span> <span class="nf">test_cannot_upvote_on_closed_merge_request</span><span class="p">():</span>
    <span class="n">merge_request</span> <span class="o">=</span> <span class="nc">MergeRequest</span><span class="p">()</span>
    <span class="n">merge_request</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
    <span class="n">pytest</span><span class="p">.</span><span class="nf">raises</span><span class="p">(</span><span class="n">MergeRequestException</span><span class="p">,</span> <span class="n">merge_request</span><span class="p">.</span><span class="n">upvote</span><span class="p">,</span> <span class="sh">"</span><span class="s">dev1</span><span class="sh">"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">test_cannot_downvote_on_closed_merge_request</span><span class="p">():</span>
    <span class="n">merge_request</span> <span class="o">=</span> <span class="nc">MergeRequest</span><span class="p">()</span>
    <span class="n">merge_request</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
    <span class="k">with</span> <span class="n">pytest</span><span class="p">.</span><span class="nf">raises</span><span class="p">(</span>
        <span class="n">MergeRequestException</span><span class="p">,</span>
        <span class="n">match</span><span class="o">=</span><span class="sh">"</span><span class="s">종료된 머지 리퀘스트에 투표할 수 없음</span><span class="sh">"</span>
    <span class="p">):</span>
        <span class="n">merge_request</span><span class="p">.</span><span class="nf">downvote</span><span class="p">(</span><span class="sh">"</span><span class="s">dev1</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># NOTE: AcceptanceThreshold
</span><span class="nd">@pytest.mark.parametrize</span><span class="p">(</span><span class="sh">"</span><span class="s">context, expected_status</span><span class="sh">"</span><span class="p">,</span> <span class="p">(</span>
    <span class="p">(</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">downvotes</span><span class="sh">"</span><span class="p">:</span> <span class="nf">set</span><span class="p">(),</span> <span class="sh">"</span><span class="s">upvotes</span><span class="sh">"</span><span class="p">:</span> <span class="nf">set</span><span class="p">()},</span>
        <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">PENDING</span>
    <span class="p">),</span> <span class="p">(</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">downvotes</span><span class="sh">"</span><span class="p">:</span> <span class="nf">set</span><span class="p">(),</span> <span class="sh">"</span><span class="s">upvotes</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">dev1</span><span class="sh">"</span><span class="p">}},</span>
        <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">PENDING</span>
    <span class="p">),</span> <span class="p">(</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">downvotes</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">dev1</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">upvotes</span><span class="sh">"</span><span class="p">:</span> <span class="nf">set</span><span class="p">()},</span>
        <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">REJECTED</span>
    <span class="p">),</span> <span class="p">(</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">downvotes</span><span class="sh">"</span><span class="p">:</span> <span class="nf">set</span><span class="p">(),</span> <span class="sh">"</span><span class="s">upvotes</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">dev1</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">dev2</span><span class="sh">"</span><span class="p">}},</span>
        <span class="n">MergeRequestStatus</span><span class="p">.</span><span class="n">APPROVED</span>
    <span class="p">)</span>
<span class="p">))</span>
<span class="k">def</span> <span class="nf">test_acceptance_threshold_status_resolution</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">expected_status</span><span class="p">):</span>
    <span class="k">assert</span> <span class="nc">AcceptanceThreshold</span><span class="p">(</span><span class="n">context</span><span class="p">).</span><span class="nf">status</span><span class="p">()</span> <span class="o">==</span> <span class="n">expected_status</span>
</code></pre></div></div>
<ul>
  <li>pytest에서는 <code class="language-plaintext highlighter-rouge">assert</code> 비교만으로 단위 테스트를 식별하고 결과를 확인하는 것이 가능합니다.</li>
  <li>또한, unittest로 작성한 테스트까지 실행하기 때문에 호환성이 좋습니다.</li>
  <li><code class="language-plaintext highlighter-rouge">pytest.raises</code>는 <code class="language-plaintext highlighter-rouge">unittest.TestCase.assertRaises</code>와 동일합니다. <code class="language-plaintext highlighter-rouge">assertRaises</code>의 경우에는 위와 같이 <code class="language-plaintext highlighter-rouge">match</code> 파라미터를 사용하여 구현할 수 있습니다.</li>
  <li><code class="language-plaintext highlighter-rouge">unittest.TestCase.subTest</code>에서 반복적으로 테스트했다면, pytest에서는 데코레이터를 통해 수행할 수 있습니다. 첫 번째 파라미터는 파라미터의 이름을, 두 번째 파라미터는 테스트하고자 하는 값들의 튜플입니다.</li>
</ul>

<h3 id="mock-객체">Mock 객체</h3>
<ul>
  <li>시스템이 서비스 되기 위해서는 외부 서비스(DB, Storage, 외부 API, 클라우드)를 사용하게 됩니다.</li>
  <li>외부 서비스를 사용하며 발생하는 부작용을 최소화하기 위해 외부 요소를 분리하고, 인터페이스를 사용하여 추상화해야 합니다.</li>
  <li>Mock 객체는 원하지 않는 부작용으로부터 테스트 코드를 보호하는 방법 중 하나입니다.</li>
  <li>통햅테스트에서는 외부 서비스에 대한 테스트까지를 포함하지만, 단위 테스트에서는 모킹하는 것만으로 원하는 기능 위주로 테스트해야합니다.</li>
</ul>

<p><strong>Patch, Mock 사용 시 주의사항</strong></p>
<ul>
  <li>간단한 테스트를 작성하기 위해 다양한 몽키패치(런타임 중 코드를 수정하는 것)과 모킹을 해야 한다면, 코드가 좋지 않다는 신호입니다.</li>
  <li>Patch란 import 중에 경로를 지정했던 원본 코드를 Mock 객체로 대체하는 것으로, 런타임 중에 코드가 바뀌고 처음에 있던 원래 코드와의 연결이 끊어집니다.</li>
</ul>

<h3 id="mock-사용">Mock 사용</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">unittest.mock</span> <span class="kn">import</span> <span class="n">MagicMock</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">List</span><span class="p">,</span> <span class="n">Dict</span>

<span class="k">class</span> <span class="nc">GitBranch</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">commits</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">]):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_commits</span> <span class="o">=</span> <span class="p">{</span> <span class="n">c</span><span class="p">[</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">]:</span> <span class="n">c</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">commits</span> <span class="p">}</span>
    
    <span class="k">def</span> <span class="nf">__getitem__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">commit_id</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_commits</span><span class="p">[</span><span class="n">commit_id</span><span class="p">]</span>
    
    <span class="k">def</span> <span class="nf">__len__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_commits</span><span class="p">)</span>
    
<span class="k">def</span> <span class="nf">author_by_id</span><span class="p">(</span><span class="n">commit_id</span><span class="p">,</span> <span class="n">branch</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">branch</span><span class="p">[</span><span class="n">commit_id</span><span class="p">][</span><span class="sh">"</span><span class="s">author</span><span class="sh">"</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">test_find_commit</span><span class="p">():</span>
    <span class="n">branch</span> <span class="o">=</span> <span class="nc">GitBranch</span><span class="p">([{</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">123</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">author</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">dev1</span><span class="sh">"</span><span class="p">}])</span>
    <span class="k">assert</span> <span class="nf">author_by_id</span><span class="p">(</span><span class="sh">"</span><span class="s">123</span><span class="sh">"</span><span class="p">,</span> <span class="n">branch</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">dev1</span><span class="sh">"</span>

<span class="k">def</span> <span class="nf">test_find_any</span><span class="p">():</span>
    <span class="n">mbranch</span> <span class="o">=</span> <span class="nc">MagicMock</span><span class="p">()</span>
    <span class="n">mbranch</span><span class="p">.</span><span class="n">__getitem__</span><span class="p">.</span><span class="n">return_value</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">author</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">test</span><span class="sh">"</span><span class="p">}</span>
    <span class="k">assert</span> <span class="nf">author_by_id</span><span class="p">(</span><span class="sh">"</span><span class="s">123</span><span class="sh">"</span><span class="p">,</span> <span class="n">mbranch</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">test</span><span class="sh">"</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">MagicMock</code>을 사용해서 <code class="language-plaintext highlighter-rouge">GitBranch</code> 객체를 모킹합니다. 이 떄, <code class="language-plaintext highlighter-rouge">GitBranch</code>는 매직메서드를 사용하기 때문에 <code class="language-plaintext highlighter-rouge">MagicMock</code>을 이용합니다.</li>
  <li>이 때, <code class="language-plaintext highlighter-rouge">mbarnch</code>는 <code class="language-plaintext highlighter-rouge">__getitem__</code>에 대한 반환 값만 지정했기 때문에, <code class="language-plaintext highlighter-rouge">commit_id</code>에 상관없이 출력값만 테스트합니다.</li>
</ul>

<h3 id="테스트-더블-사용-예시">테스트 더블 사용 예시</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># mock_2.py
</span><span class="kn">from</span> <span class="n">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>

<span class="kn">import</span> <span class="n">requests</span>
<span class="kn">from</span> <span class="n">constants</span> <span class="kn">import</span> <span class="n">STATUS_ENDPOINT</span>

<span class="k">class</span> <span class="nc">BuildStatus</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Continuous Integration  도구에서의 머지 리퀘스트 상태</span><span class="sh">"""</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">build_date</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">datetime</span><span class="p">.</span><span class="nf">utcnow</span><span class="p">().</span><span class="nf">isoformat</span><span class="p">()</span>
    
    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">notify</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">merge_request_id</span><span class="p">,</span> <span class="n">status</span><span class="p">):</span>
        <span class="n">build_status</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="n">merge_request_id</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="n">status</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">built_at</span><span class="sh">"</span><span class="p">:</span> <span class="n">cls</span><span class="p">.</span><span class="nf">build_date</span><span class="p">(),</span>
        <span class="p">}</span>
        <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="n">STATUS_ENDPOINT</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">build_status</span><span class="p">)</span>
        <span class="n">response</span><span class="p">.</span><span class="nf">raise_for_status</span><span class="p">()</span> <span class="c1"># 200이 아닐 경우에 예외 발생
</span>        <span class="k">return</span> <span class="n">response</span>
</code></pre></div></div>
<ul>
  <li>constants.py 모듈에는 <code class="language-plaintext highlighter-rouge">STATUS_ENDPOINT</code>를 test@example.com으로 설정해뒀습니다.</li>
  <li><code class="language-plaintext highlighter-rouge">notify</code> 메서드는 원하는 endpoint에 post 요청한 결과값을 받아옵니다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">unittest</span> <span class="kn">import</span> <span class="n">mock</span>

<span class="kn">from</span> <span class="n">constants</span> <span class="kn">import</span> <span class="n">STATUS_ENDPOINT</span>
<span class="kn">from</span> <span class="n">mock_2</span> <span class="kn">import</span> <span class="n">BuildStatus</span>

<span class="nd">@mock.patch</span><span class="p">(</span><span class="sh">"</span><span class="s">mock_2.requests</span><span class="sh">"</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">test_build_notification_sent</span><span class="p">(</span><span class="n">mock_requests</span><span class="p">):</span>
    <span class="n">build_date</span> <span class="o">=</span> <span class="sh">"</span><span class="s">2023-01-01T00:00:01</span><span class="sh">"</span> <span class="c1"># 반환값으로 사용할 build_date
</span>    <span class="k">with</span> <span class="n">mock</span><span class="p">.</span><span class="nf">patch</span><span class="p">(</span><span class="sh">"</span><span class="s">mock_2.BuildStatus.build_date</span><span class="sh">"</span><span class="p">,</span> <span class="n">return_value</span><span class="o">=</span><span class="n">build_date</span><span class="p">):</span>
        <span class="n">BuildStatus</span><span class="p">.</span><span class="nf">notify</span><span class="p">(</span><span class="mi">123</span><span class="p">,</span> <span class="sh">"</span><span class="s">OK</span><span class="sh">"</span><span class="p">)</span>
    
    <span class="n">expected_payload</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span> <span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">OK</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">built_at</span><span class="sh">"</span><span class="p">:</span> <span class="n">build_date</span><span class="p">}</span>
    <span class="n">mock_requests</span><span class="p">.</span><span class="n">post</span><span class="p">.</span><span class="nf">assert_called_with</span><span class="p">(</span>
        <span class="n">STATUS_ENDPOINT</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">expected_payload</span>
    <span class="p">)</span>
</code></pre></div></div>
<ul>
  <li>데코레이터는 테스트 함수 내에서 mock_2.requests를 호출하면 함수의 인자인 mock_requests라는 객체가 mock을 대신할 것이라고 알려줍니다.</li>
  <li><code class="language-plaintext highlighter-rouge">mock_2.BuildStatus.build_date</code> 메서드에 대한 반환값으로는 테스터 내에서 지정해준 <code class="language-plaintext highlighter-rouge">build_date</code>로 사용하도록 context를 구성하고, <code class="language-plaintext highlighter-rouge">notify</code> 메서드에 <code class="language-plaintext highlighter-rouge">id</code>와 <code class="language-plaintext highlighter-rouge">status</code>를 인자로 넣습니다.</li>
  <li><code class="language-plaintext highlighter-rouge">mock_requests</code>는 post 요청이 될 때 어떤 인자로 호출되었는지 테스트합니다.</li>
</ul>

<h3 id="리팩토링">리팩토링</h3>
<ul>
  <li>위와 같이 설계하는 경우, <code class="language-plaintext highlighter-rouge">notify</code> 메서드가 request 모듈에 직접 의존하는 문제가 있습니다.</li>
  <li>따라서, 테스터를 작성시에도 의존성을 고려해서 메서드와 객체에 대한 설정을 함께 생각하며 작성해야합니다.</li>
  <li>함수의 간의 의존성을 줄이는 방식으로 아래와 같이 리팩토링 할 수 있습니다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># mock_2_refactor.py
</span><span class="k">class</span> <span class="nc">BuildStatus</span><span class="p">:</span>
    <span class="n">endpoint</span> <span class="o">=</span> <span class="n">STATUS_ENDPOINT</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">transport</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">transport</span> <span class="o">=</span> <span class="n">transport</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">build_date</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">datetime</span><span class="p">.</span><span class="nf">utcnow</span><span class="p">().</span><span class="nf">isoformat</span><span class="p">()</span>
    
    <span class="k">def</span> <span class="nf">compose_payload</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">merge_request_id</span><span class="p">,</span> <span class="n">status</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="n">merge_request_id</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="n">status</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">built_at</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="nf">build_date</span><span class="p">(),</span>
        <span class="p">}</span>
    
    <span class="k">def</span> <span class="nf">deliver</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">payload</span><span class="p">):</span>
        <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="n">STATUS_ENDPOINT</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">payload</span><span class="p">)</span>
        <span class="n">response</span><span class="p">.</span><span class="nf">raise_for_status</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">response</span>
    
    <span class="k">def</span> <span class="nf">notify</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">merge_request_id</span><span class="p">,</span> <span class="n">status</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">deliver</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">compose_payload</span><span class="p">(</span><span class="n">merge_request_id</span><span class="p">,</span> <span class="n">status</span><span class="p">))</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">notify</code> 메서드를 <code class="language-plaintext highlighter-rouge">compose_payload</code>, <code class="language-plaintext highlighter-rouge">deliver</code> 메서드로 각각 분리하고 <code class="language-plaintext highlighter-rouge">requests</code> 모듈로 한정 지어 구현하는 것이 아닌, 생성자 주입으로 처리합니다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># test_mock_2_refactor.py
</span><span class="kn">from</span> <span class="n">unittest</span> <span class="kn">import</span> <span class="n">mock</span>
<span class="kn">import</span> <span class="n">pytest</span>
<span class="kn">from</span> <span class="n">mock_2_refactor</span> <span class="kn">import</span> <span class="n">BuildStatus</span>


<span class="nd">@pytest.fixture</span>
<span class="k">def</span> <span class="nf">build_status</span><span class="p">():</span>
    <span class="c1"># NOTE: transport에 mock 객체를 주입합니다.
</span>    <span class="n">bstatus</span> <span class="o">=</span> <span class="nc">BuildStatus</span><span class="p">(</span><span class="n">mock</span><span class="p">.</span><span class="nc">Mock</span><span class="p">())</span>
    <span class="n">bstatus</span><span class="p">.</span><span class="n">build_date</span> <span class="o">=</span> <span class="n">mock</span><span class="p">.</span><span class="nc">Mock</span><span class="p">(</span><span class="n">return_value</span><span class="o">=</span><span class="sh">"</span><span class="s">2023-01-01T00:00:01</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">bstatus</span>

<span class="k">def</span> <span class="nf">test_build_notification_sent</span><span class="p">(</span><span class="n">build_status</span><span class="p">):</span>
    <span class="n">build_status</span><span class="p">.</span><span class="nf">notify</span><span class="p">(</span><span class="mi">123</span><span class="p">,</span> <span class="sh">"</span><span class="s">OK</span><span class="sh">"</span><span class="p">)</span>

    <span class="n">expected_payload</span> <span class="o">=</span> <span class="p">{</span>
        <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">OK</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">built_at</span><span class="sh">"</span><span class="p">:</span> <span class="n">build_status</span><span class="p">.</span><span class="nf">build_date</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="c1"># NOTE: transport 자리에 mock 객체가 주입되었기 때문에 아래와 같이 사용 가능합니다.
</span>    <span class="n">build_status</span><span class="p">.</span><span class="n">transport</span><span class="p">.</span><span class="n">post</span><span class="p">.</span><span class="nf">assert_called_with</span><span class="p">(</span>
        <span class="n">build_status</span><span class="p">.</span><span class="n">endpoint</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">expected_payload</span>
    <span class="p">)</span>
</code></pre></div></div>
<ul>
  <li>requests 모듈 등 호출을 담당하는 <code class="language-plaintext highlighter-rouge">transport</code> 자리에 Mock 객체를 주입하여 처리합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">BuildStatus</code>에 모킹 처리를 한 <code class="language-plaintext highlighter-rouge">build_status</code> fixture를 사용해서 테스트를 보다 깔끔하게 진행할 수 있습니다.</li>
</ul>]]></content><author><name>Yeham Kim</name></author><category term="Study" /><summary type="html"><![CDATA[Unit Test 단위 테스트란, 다른 코드의 일부분이 유효한지를 검사하는 코드입니다. 단위 테스트는 소프트웨어의 핵심이 되는 필수적인 기능으로서 일반 비즈니스 로직과 동일한 수준으로 다루어져야 합니다. 격리: 단위 테스트는 독립적이며, 비즈니스 로직에만 집중합니다. 이전 상태와 관계없이 임의 순서로 실행될 수 있어야 합니다. 성능: 신속하게 실행되어야 하며, 반복적으로 여러 번 실행될 수 있어야 합니다. 자체 검증: 실행만으로 결과를 결정할 수 있어야 하며, 이를 위한 추가 단계(종속성)가 없어야 합니다.]]></summary></entry><entry><title type="html">[Study] Python Clean Code - Descriptor</title><link href="http://localhost:4000/study/study-cleancode-descriptor/" rel="alternate" type="text/html" title="[Study] Python Clean Code - Descriptor" /><published>2023-07-17T10:05:07+09:00</published><updated>2023-07-17T10:05:07+09:00</updated><id>http://localhost:4000/study/study-cleancode-descriptor</id><content type="html" xml:base="http://localhost:4000/study/study-cleancode-descriptor/"><![CDATA[<h2 id="descriptor">Descriptor</h2>

<ul>
  <li>디스크립터를 구현하기 위해 두 가지 클래스(클라이언트 클래스, 디스크립터 클래스)가 필요합니다.</li>
</ul>

<p><strong>핵심 용어</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">client</code>: <code class="language-plaintext highlighter-rouge">ClientClass</code>의 인스턴스입니다.</li>
  <li><code class="language-plaintext highlighter-rouge">descriptor</code>: <code class="language-plaintext highlighter-rouge">DescriptorClass</code>의 인스턴스입니다.</li>
  <li><code class="language-plaintext highlighter-rouge">ClientClass</code>: 솔루션을 위해 생성한 일반적인 추상화 객체입니다. class attribute로 <code class="language-plaintext highlighter-rouge">discriptor</code>를 갖습니다. (필수)</li>
  <li><code class="language-plaintext highlighter-rouge">DescriptorClass</code>: 디스크립터 로직의 구현체로, 디스크립터 프로토콜을 구현한 클래스의 인스턴스입니다. 매직메서드 <code class="language-plaintext highlighter-rouge">__get__</code>, <code class="language-plaintext highlighter-rouge">__set__</code>, <code class="language-plaintext highlighter-rouge">__delete__</code>, <code class="language-plaintext highlighter-rouge">__set_name</code> 중 최소 하나 이상을 포함해야합니다.</li>
</ul>

<p><strong>동작 원리</strong></p>
<ul>
  <li>클래스 속성을 객체로 선언하면 디스크립터로 인식되고, 클라이언트에서 해당 속성을 호출하면 <code class="language-plaintext highlighter-rouge">__get__</code>의 결과를 반환합니다.
```python
class DescriptorClass:
  def <strong>get</strong>(self, instance, owner):
      if instance is None:
          return self
      logger.info(
          “Call: %s.<strong>get</strong>(%r, %r)”,
          self.<strong>class</strong>.<strong>name</strong>, instance, owner
      )</li>
</ul>

<p>class ClientClass:
    desciptor = DescriptorClass()</p>

<p>client = ClientClass()
logger.info(client.desciptor)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-  `ClientClass` 인스턴스의 `descriptor`에 접근하면, `DescriptorClass` 인스턴스를 반환하지 않고, `__get__`의 반환 값을 사용합니다.
- 이를 이용해, `__get__` 메서드 뒤쪽으로 모든 종류의 논리를 추상화하여 클라이언트에게 내용을 숨긴 채로 변환을 투명하게 실행할 수 있습니다. (캡슐화)

### 디스크립터 프로토콜의 메서드 탐색
- 디스크립터는 객체이기 때문에, self를 첫 번째 파라미터로 사용하며,  self는 객체 자신을 의미합니다.

`__get__(self, instance, owner)`  
- instance는 디스크립터를 호출한 객체입니다. (client 객체)
- owner는 해당 객체의 클래스를 의미합니다. (ClientClass 클래스)
- 즉, instance는 디스크립터가 행동을 취하려는 객체이며, owner는 인스턴스의 클래스입니다.

```python
class DescriptorClass:
    def __get__(self, instance, owner):
        if instance is None:
            return f"{self.__class__.__name__}.{owner.__name__}"
        return f"value for {instance}"

class ClientClass:
    descriptor = DescriptorClass()
</code></pre></div></div>
<ul>
  <li>위의 예제에서, <code class="language-plaintext highlighter-rouge">ClientClass.descriptor</code>로 호출하면 instance가 있는 형태로 호출하는 것이지만,</li>
  <li><code class="language-plaintext highlighter-rouge">ClientClass().descriptor</code>로 호출하면 instance를 None으로 인식하여 단순히 디스크립터 자체를 반한합니다.</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">__set__(self, instance, value)</code></p>
<ul>
  <li>꼭 구현할 필요는 없으며, 구현한 디스크립터에 대해서만 활성화됩니다.</li>
  <li><code class="language-plaintext highlighter-rouge">instance</code> 파라미터는 <code class="language-plaintext highlighter-rouge">client</code>이며 <code class="language-plaintext highlighter-rouge">value</code> 인자는 문자열을 갖습니다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Validation</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">validation_function</span><span class="p">,</span> <span class="n">error_msg</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">validation_function</span> <span class="o">=</span> <span class="n">validation_function</span>
        <span class="n">self</span><span class="p">.</span><span class="n">error_msg</span> <span class="o">=</span> <span class="n">error_msg</span>
    
    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">self</span><span class="p">.</span><span class="nf">validation_function</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">value</span><span class="si">!r}</span><span class="s"> </span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">error_msg</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    
<span class="k">class</span> <span class="nc">Field</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">*</span><span class="n">validations</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_name</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">self</span><span class="p">.</span><span class="n">validations</span> <span class="o">=</span> <span class="n">validations</span>
    
    <span class="k">def</span> <span class="nf">__set_name__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">owner</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_name</span> <span class="o">=</span> <span class="n">name</span>
    
    <span class="k">def</span> <span class="nf">__get__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">instance</span><span class="p">,</span> <span class="n">owner</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">instance</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">self</span>
        <span class="k">return</span> <span class="n">instance</span><span class="p">.</span><span class="n">__dict__</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">_name</span><span class="p">]</span>
    
    <span class="k">def</span> <span class="nf">validate</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">validation</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">validations</span><span class="p">:</span>
            <span class="nf">validation</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">__set__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">instance</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">validate</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
        <span class="n">instance</span><span class="p">.</span><span class="n">__dict__</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">_name</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>

<span class="k">class</span> <span class="nc">ClientClass</span><span class="p">:</span>
    <span class="n">descriptor</span> <span class="o">=</span> <span class="nc">Field</span><span class="p">(</span>
        <span class="nc">Validation</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">float</span><span class="p">)),</span> <span class="sh">"</span><span class="s">는 숫자가 아닙니다.</span><span class="sh">"</span><span class="p">),</span>
        <span class="nc">Validation</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">,</span> <span class="sh">"</span><span class="s">는 음수입니다.</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">)</span>

<span class="c1"># 사용 예시
</span><span class="n">client</span> <span class="o">=</span> <span class="nc">ClientClass</span><span class="p">()</span>
<span class="n">client</span><span class="p">.</span><span class="n">descriptor</span> <span class="o">=</span> <span class="mi">42</span>
<span class="n">client</span><span class="p">.</span><span class="n">descriptor</span> <span class="o">=</span> <span class="o">-</span><span class="mi">42</span> <span class="c1"># 음수이므로, Validation 에러 발생
</span><span class="n">client</span><span class="p">.</span><span class="n">descriptor</span> <span class="o">=</span> <span class="sh">"</span><span class="s">invalid value</span><span class="sh">"</span> <span class="c1"># 문자열이므로, Validation 발생
</span></code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">__set__()</code> 메서드가 @property.setter가 하던 일을 대신하게 됩니다.</li>
  <li>위와 같이, 프로퍼티 자리에 놓일 수 있는 부분은 디스크립터로 추상화가 가능합니다.</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">__delete__(self, instance)</code></p>
<ul>
  <li>
    <p>self는 descriptor 속성을 나타내며, instance는 client를 나타냅니다.
```python
class ProtctedAttribute:
  def <strong>init</strong>(self, requires_role=None) -&gt; None:
      self.permission_required = requires_role
      self._name = None</p>

    <p>def <strong>set_name</strong>(self, owner, name):
      self._name = name</p>

    <p>def <strong>set</strong>(self, user, value):
      if value is None:
          raise ValueError(f”{self._name}를 None으로 설정할 수 없습니다.”)
      user.<strong>dict</strong>[self._name] = value</p>

    <p>def <strong>delete</strong>(self, user):
      if self.permission_required in user.permissions:
          user.<strong>dict</strong>[self._name] = None
      else:
          raise ValueError(
              f”{user!s} 사용자는 {self.permission_required} 권한이 없습니다.”
          )</p>
  </li>
</ul>

<p>class User:
    “"”admin 권한을 가진 사용자만 이메일 주소를 제거할 수 있습니다.”””</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>email = ProtctedAttribute(requires_role="admin")

def __init__(self, username: str, email: str, permission_list: list = None) -&gt; None:
    self.username = username
    self.email = email
    self.permissions = permission_list or []

def __str__(self):
    return self.username
</code></pre></div></div>

<p>admin = User(“root”, “root@example.com”, [“admin”])
logger.info(admin.email)
del admin.email
logger.info(admin.email)</p>

<p>user = User(“user”, “user@example.com”, [“email”, “helpdesk”])
logger.info(user.email)
del user.email</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- User 클래스는 username과 email 파라미터를 필수로 받습니다. 
- email은 "admin" 권한이 있는 사용자만 제거할 수 있습니다.

`__set_name__(self, owner, name)`
- 디스크립터에 필요한 이름을 지정하기 위한 메서드입니다.
- 속성의 이름은 `__dict__`에서 `__get__`과 `__set__` 메서드로 읽고 쓸 때 사용됩니다.
```python
class DescriptorWithName:
    def __init__(self, name=None) -&gt; None:
        self.name = name
    
    def __set_name__(self, owner, name):
        self.name = name
        print(f'__set_name__(owner: {owner}, name: {name})')

class ClientClass:
    descriptor1 = DescriptorWithName() #1
    descriptor2 = DescriptorWithName() #2

logger.info(ClientClass())
</code></pre></div></div>
<ul>
  <li>위와 같이 사용하면, #1 Descriptor 이름은 <code class="language-plaintext highlighter-rouge">descriptor1</code>이 됩니다.</li>
  <li>즉, 필드명을 descriptor명이 되도록 동작시키는 역할이라고 볼 수 있습니다.</li>
</ul>

<h3 id="디스크립터의-유형">디스크립터의 유형</h3>
<p><strong>비데이터 디스크립터</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">__get__</code> 메서드만을 구현한 디스크립터입니다.
```python
class NonDataDescriptor:
  def <strong>get</strong>(self, instance, owner):
      if instance is None:
          return self
      return 42</li>
</ul>

<p>class ClientClass:
    descriptor = NonDataDescriptor()</p>

<p>client = ClientClass()</p>
<h1 id="vars-클래스의-__dict__를-반환합니다">vars(): 클래스의 __dict__를 반환합니다.</h1>
<p>logger.info(vars(client)) #1</p>

<p>client.descriptor = 43 #2
logger.info(vars(client)) #3</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- 비데이터 디스크립터의 경우, `__set__`과 `__delete__`를 구현하지 않기 때문에, #2와 같이 속성 값을 변경하는 경우, descriptor instance는 일반 정수로 변경됩니다.
- 따라서, #1의 결과는 비어있는 딕셔너리지만, #3의 결과는 descriptor 속성이 일반 정수 43으로 갖는 것으로 출력됩니다.
- 이 때, #2에서 지정한 descriptor를 `del client.descriptor`로 제거한다면, 원래 동작과(#1)과 같이 수행됩니다.

**데이터 디스크립터**
- `__set__`이나 `__delete__` 메서드를 구현한 경우입니다. 
```python
class DataDescriptor:
    def __get__(self, instance, owner):
        if instance is None:
            return self
        return 42
    
    def __set__(self, instance, value):
        logger.info("%s.descriptor를 %s 값으로 설정", instance, value)
        instance.__dict__["descriptor"] = value

class ClientClass:
    descriptor = DataDescriptor()

client = ClientClass()
logger.info(vars(client)) #1

client.descriptor = 43
logger.info(client.descriptor) #2
logger.info(vars(client)) #3
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">__set__</code> 메서드를 구현한 데이터 디스크립터의 경우, #2에서 출력 결과가 변경되지 않고 42임을 알 수 있습니다.</li>
  <li>하지만, <code class="language-plaintext highlighter-rouge">vars()</code> 메서드를 사용하여 속성을 분석하면, descriptor 속성이 추가되면서 값이 바뀌어 있게됩니다.</li>
  <li>데이터 디스크립터에서 속성을 조회하면 객체의 <code class="language-plaintext highlighter-rouge">__dict__</code>에서 조회하는 대신 클래스의 <code class="language-plaintext highlighter-rouge">descriptor</code>를 먼저 조회합니다.</li>
  <li>즉, 데이터 디스크립터는 인스턴스의 <code class="language-plaintext highlighter-rouge">__dict__</code>를 오버라이드하여 인스턴스 사전보다 높은 우선순위를 가지지만, 비데이터 디스크립터는 인스턴스 사전보다 낮은 우선순위를 가집니다.</li>
</ul>]]></content><author><name>Yeham Kim</name></author><category term="Study" /><summary type="html"><![CDATA[Descriptor]]></summary></entry></feed>