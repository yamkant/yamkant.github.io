<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-07-10T23:23:11+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Yam’s Dev Logs</title><subtitle>An amazing website.</subtitle><author><name>Yeham Kim</name></author><entry><title type="html">[Study] AWS 기본 개념</title><link href="http://localhost:4000/study/study-aws-concept/" rel="alternate" type="text/html" title="[Study] AWS 기본 개념" /><published>2023-07-10T10:05:07+09:00</published><updated>2023-07-10T10:05:07+09:00</updated><id>http://localhost:4000/study/study-aws-concept</id><content type="html" xml:base="http://localhost:4000/study/study-aws-concept/"><![CDATA[<h2 id="amazon-vpc">Amazon VPC</h2>
<ul>
  <li>AWS에 생성하는 가상의 네트워크(Virtual Private Cloud)를 의미합니다.</li>
  <li>EC2나 RDS의 경우, VPC를 먼저 선택해야합니다.</li>
  <li>VPC내에 서버를 설치하면 해당 네트워크에 소속되지만, 별도로 설정하지 않으면 격리된 네트워크입니다.</li>
  <li>외부와 통신하기 위해 인터넷 혹은 회사 LAN과 연결해야합니다.</li>
</ul>

<p><strong>기능</strong></p>
<ul>
  <li>네트워킹 환경을 설정합니다.</li>
  <li>IPv4, IPv6 둘 다 사용가능합니다.</li>
  <li>CIDR 블록, 서브넷 마스크를 설정할 수 있습니다.</li>
  <li>물리적인 라우터가 아닌 소프트웨어가 라우터의 역할을 수행하는 방식입니다.</li>
  <li>라우팅 테이블을 통해 여러 개의 서브넷과 연결합니다.</li>
  <li>서브넷 내에서의 통신은 라우터 없이 직접 가능합니다.</li>
</ul>

<p><strong>VPC 설정</strong></p>
<ul>
  <li>인터넷에 연결해야 한다면 인터넷 게이트웨이를 설정하고, 라우팅 테이블과 맵핑하여 라우팅을 설정합니다.</li>
  <li>오토 스케일링을 설정해야 한다면 IP 주소를 많이 확보해 두어야합니다.
    <ol>
      <li>VPC 생성: VPC 이름 설정 / CIDR 블록 설정 / 테넌시(하드웨어의 점유 여부) 선택</li>
      <li>서브넷 설정: 서브넷 이름 설정 / 대상 VPC 선택 / 가용 영역 선택 / CIDR 블록(서브넷) 설정</li>
      <li>인터넷 연결: 인터넷 게이트웨이 생성 / IGW와 VPC 연결 / 라우팅 설정</li>
    </ol>
  </li>
</ul>

<p><strong>서브넷과 DHCP: 사용 범위 선택</strong></p>
<ul>
  <li>서브넷: 커다란 네트워크를 작게 나눈 네트워크를 의미합니다.</li>
  <li>네트워크를 분할하여 직접 통신할 수 있는 범위 좁히며, 방화벽 설정을 통해 보안을 강화합니다.</li>
  <li>일반적인 네트워크의 경우, 서브넷끼리 통신하기 위해서는 라우팅이 필요하지만, VPC는 라우팅 없이도 통신 가능합니다.</li>
  <li>CIDR(class Inter-Domain Routing): 네트워크와 서브넷의 범위를 나누는 표기법입니다.</li>
  <li>/24이면 IP 주소의 수가 2의 (32-24)제곱개 입니다.</li>
  <li>기본 VPC는 /16인 B클래스로 설정되어 있습니다. /20 서브넷은 IP 주소 4096개를 가지므로, 오토 스케일링을 설정해도 될 만큼 충분히 많은 수의 IP 주소를 가집니다.</li>
  <li>DHCP (Dynamic Host Configuration Protocol): 각 호스트인 인스턴스에 IP 주소를 자동으로 할당합니다. 인스턴스가 추가될 때, 서브넷 범위의 IP 주소 중 하나가 할당됩니다.</li>
</ul>

<p><strong>라우팅과 NAT</strong></p>
<ul>
  <li>NAT(network Address Translation): 네트워크 주소 변환 방식으로,</li>
  <li>라우팅은 타겟 호스트에 바로 데이터를 전달하는 것이 아닌, 호스트에서 호스트로 데이터를 전달하는 방식을 의미합니다.</li>
  <li>라우터에는 타겟 호스트에 가장 빠르게 정보를 전달할 수 있는 정보가 포함되어있습니다.</li>
  <li>게이트웨이는 LAN에서 인터넷으로 데이터를 전송할 때, LAN 내부의 출입구가 됩니다.</li>
  <li>사설 IP 주소를 공인 IP 주소로 변환하고, 회사 내에서는 공인 IP 주소 하나를 공동으로 사용합니다.</li>
  <li>NAPT: Network Address Port Translation으로, IP 마스커레이드라고도 합니다. 주소 변환을 담당합니다.</li>
  <li>IP 마스커레이드를 사용하면, 내부에서 외부로 나가는 것은 가능하지만 외부에서 내부로 들어오는 것은 불가능합니다.</li>
  <li>NAT(Network Address Translation): NAT를 통해 사설 IP 주소가 공인 IP 주소로 변환됩니다.</li>
  <li>IP 마스커레이드는 일대다이며, NAT은 다대다입니다. IP 마스커레이드는 공인 IP 하나만 설정할 수 있습니다. 서버가 여러 대라면 공인 IP 주소를 여러개 설정할 수 있는 NAT을 사용해야합니다.</li>
</ul>

<p><strong>인터넷 게이트웨이, NAT 게이트웨이</strong></p>
<ul>
  <li>인터넷 게이트웨이: 인터넷 연결을 담당합니다. EC2 인스턴스와 인터넷을 연결합니다.</li>
  <li>NAT 게이트웨이: 서브넷에서 인터넷으로 접속할 수 있지만, 인터넷에서는 서브넷으로 접속하지 못하도록 합니다. (소프트웨어 업데이트시 이용)<br />
(단일 방향으로 EC2 인스턴스와 인터넷을 연결합니다.)</li>
  <li>EC2 인스턴스는 사설 IP 주소밖에 설정할 수 없기 때문에, 공인 IP 주소를 사설 IP 주소로 변환하는 인터넷 게이트웨이가 필수적입니다.</li>
</ul>

<p><strong>보안 그룹과 네트워크 ACL</strong></p>
<ul>
  <li>VPC의 가상 방화벽으로 보안 그룹과 네트워크 ACL 두 종류의 방화벽을 사용합니다.</li>
  <li>보안 그룹과 네트워크 ACL은 인바운드 트래픽과 아웃바운드 트래픽을 제어합니다.</li>
  <li>보안 그룹은 인스턴스에 대해 설정하며, 네트워크 ACL은 서브넷에 설정하기 때문에 개별 인스턴스에 설정하지 않아도 됩니다.</li>
  <li>참고: 데몬은 서버의 전원이 켜져있는 동안 계속해서 동작하고 있는 소프트웨어를 말합니다.</li>
</ul>

<p><strong>VPC 엔드포인트</strong></p>
<ul>
  <li>VPC 내부에서 VPC 외부로 접속하기 위한 연결점을 제공하는 서비스입니다.</li>
  <li>S3와 DynamoDB는 VPC를 사용하지 않는 서비스입니다. 따라서, 이와 같이 VPC 외부 서비스를 연결해주는 것이 엔드포인트 서비스입니다.</li>
  <li>VPC 엔드포인트는 가상 서비스로, 확장성과 고가용성을 지원합니다.</li>
  <li>네트워크 트래픽에 따라 자동으로 스케일링 됩니다.</li>
  <li>엔드포인트는 두 종류로, 인터페이스 엔드포인트와 게이트웨이 엔드포인트가 있습니다.</li>
  <li>인터페이스 엔드포인트는 네트워크 인터페이스로 구축하는 유형이며, 게이트웨이 엔드포인트는 라우팅 테이블에 설정된 내용을 라우팅하는 유형입니다.</li>
  <li>인터페이스 엔드포인트는 사설 IP 주소를 가진 ENI가 존재하며 각 서비스와 연결하는 출입구 역할을 합니다.</li>
  <li>AWS PrivateLink라는 방식을 사용하기 때문에, 타사 서비스가 PrivateLink를 지원한다면 사용 가능합니다.</li>
</ul>

<h2 id="amazon-elb">Amazon ELB</h2>
<ul>
  <li>AWS가 제공하는 로드 밸런서로, 집중되는 트래픽을 서버/네트워크에 분배하는 부하 분산 장치입니다.</li>
</ul>

<p><strong>ALB</strong></p>
<ul>
  <li>HTTP/HTTPS 프로토콜의 헤더를 보고 적절한 패킷으로 전송하므로, OSI 모형의 애플리케이션 계층(7계층)에서 동작합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">IP 주소 + 포트번호 + 패킷내용</code> 정보를 통해 스위칭합니다.</li>
  <li>L7단에서 지원하기 때문에 인스턴스와 로드 밸런서 사이에서 SSL이 적용된 암호화 통신이 가능합니다.</li>
  <li>IP 주소가 변동될 수 있기 때문에, Client는 DNS 주소로 접근하는 것이 좋습니다.<br />
(따라서, EIP를 ALB에 설정해두는 것이 좋습니다.)</li>
</ul>

<p><strong>NLB</strong></p>
<ul>
  <li>TCP/IP 프로토콜의 헤더를 보고 적절한 패킷으로 전송하므로, OSI 모형의 전송 계층(4계층)에서 동작합니다.<br />
(ALB보다 낮은 계층에서 동작하기 때문에 속도가 빠릅니다.)</li>
  <li><code class="language-plaintext highlighter-rouge">IP 주소 + 포트번호</code> 정보를 통해고 스위칭합니다.</li>
  <li>EIP를 이용할 수 있으며, DNS와 IP 주소 모두 사용 가능합니다. (SSL은 사용 불가능)</li>
</ul>

<h2 id="route-53">Route 53</h2>
<ul>
  <li></li>
</ul>

<h2 id="cloud-front">Cloud Front</h2>

<p><strong>Cloud Front의 원리</strong></p>
<ul>
  <li>web server란, 사용자 요청이 들어올 때, 미리 준비된 html 파일을 전송하는 것이 아닌, 프로그래밍 언어를 통해 동적으로 html 파일을 프로그래밍으로 생성하여 응답하는 방식입니다.</li>
  <li>따라서, 더 많은 시간과 비용이 발생합니다. Cloud Front의 첫 번째 역할은 캐시 서버로 사용하는 것입니다.</li>
  <li>전세계에 어디에 있든지 빠른 속도로 접속 가능하도록 해주는 기능을 CDN(Content Delivery Network)이라고 하는데, 전세계에 흩어져있는 AWS의 인프라를 이용하는 캐시서버로 동작하기도 합니다.</li>
  <li>우리의 Web Serve는 사용자를 직접 만나지 않고, Cloud Front를 통해서 만날 수 있습니다. Web Server는 Origin, Cloud Front는 Distribution이라고 말합니다. (AWS 용어)</li>
</ul>

<p><strong>캐시 제어</strong></p>
<ul>
  <li>Cloud Front를 연결하여 캐싱하면, 주기적으로 사이트에 접속할 때 빠른 속도로 리소스를 가져올 수 있지만, Origin 도메인의 데이터가 변경되는 것을 실시간으로 감지할 수 없습니다. (캐싱된 정보만 가져옴)</li>
  <li>이는, Origin 도메인인 Web Serve로 부터, 헤더값 <code class="language-plaintext highlighter-rouge">Cache-Control: max-age=60</code>으로 받아오기 때문입니다. 이는 60초 동안은 정보가 유용하므로 그 시간동안은 요청하지 말라는 것을 의미합니다.</li>
  <li>Cloud Front의 Object Caching 옵션 → Customize로 아래와 같이 설정하여, Cache-Control 헤더의 범위값을 제한할 수 있고, 설정되지 않은 경우 기본 값을 설정할 수 있습니다.<br />
(Minimum TTL: 5 / Maximum TTL: 15 / Default 10)</li>
</ul>]]></content><author><name>Yeham Kim</name></author><category term="Study" /><summary type="html"><![CDATA[Amazon VPC AWS에 생성하는 가상의 네트워크(Virtual Private Cloud)를 의미합니다. EC2나 RDS의 경우, VPC를 먼저 선택해야합니다. VPC내에 서버를 설치하면 해당 네트워크에 소속되지만, 별도로 설정하지 않으면 격리된 네트워크입니다. 외부와 통신하기 위해 인터넷 혹은 회사 LAN과 연결해야합니다.]]></summary></entry><entry><title type="html">[Server] AWS ECS를 사용한 기본적인 배포환경 구성</title><link href="http://localhost:4000/server/server-aws-ecs/" rel="alternate" type="text/html" title="[Server] AWS ECS를 사용한 기본적인 배포환경 구성" /><published>2023-07-08T16:05:07+09:00</published><updated>2023-07-08T16:05:07+09:00</updated><id>http://localhost:4000/server/server-aws-ecs</id><content type="html" xml:base="http://localhost:4000/server/server-aws-ecs/"><![CDATA[<h3 id="최종-목표">최종 목표</h3>
<ul>
  <li>ECS 내에서 nginx와 django를 사용한 서버 구성</li>
  <li>참고: <a href="https://github.com/yamkant/aws-ecs">git repository</a> - 구체적인 코드 및 이미지를 볼 수 있습니다.</li>
  <li>이 후 포스팅: VPC 구성 / ALB 구성 / Network Bridge 모드에서 Namespace 사용</li>
</ul>

<p><strong>순서</strong></p>
<ol>
  <li>AWS ECS CLI 설치 및 계정 생성</li>
  <li>Docker 구성 및 테스트</li>
  <li>ECR 생성 및 업로드</li>
  <li>ECS 클러스터 생성 및 서비스 생성</li>
</ol>

<h3 id="aws-ecs-cli-설치-및-계정-생성">AWS ECS CLI 설치 및 계정 생성</h3>
<ul>
  <li>aws ecs를 위한 CLI를 설치합니다.
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c"># aws ecs를 위한 CLI를 설치합니다.</span>
  <span class="nv">$ </span>curl <span class="s2">"https://awscli.amazonaws.com/AWSCLIV2.pkg"</span> <span class="nt">-o</span> <span class="s2">"AWSCLIV2.pkg"</span>
  <span class="nv">$ </span><span class="nb">sudo </span>installer <span class="nt">-pkg</span> AWSCLIV2.pkg <span class="nt">-target</span> /
</code></pre></div>    </div>
  </li>
  <li>AWS CLI에 접근하기 위해 아래 값들을 설정합니다.
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nv">$ </span>aws configure
  AWS Access Key ID <span class="o">[</span>None]: ACCESS_KEY_ID
  AWS Secret Access Key <span class="o">[</span>None]: SECRET_ACCESS_KEY
  Default region name <span class="o">[</span>None]: ap-northeast-2
  Default output format <span class="o">[</span>None]: json
</code></pre></div>    </div>
  </li>
  <li>
    <p>configure 설정이 끝나면 <code class="language-plaintext highlighter-rouge">~/.aws/credentials</code> 폴더가 생성됩니다.</p>
  </li>
  <li>ECS CLI를 사용하기 위해 IAM 권한을 가진 계정을 생성합니다.<br />
(위에서 configure에 등록한 계정은 <code class="language-plaintext highlighter-rouge">iam:CreateUser</code> 권한 필요 - <code class="language-plaintext highlighter-rouge">IAMUserFullAccess</code> 정책을 부여했습니다.)
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nv">$ </span>aws iam create-user <span class="nt">--user-name</span> ecs-user
  <span class="o">&gt;</span> <span class="s2">"Arn"</span>: <span class="s2">"arn:aws:iam::301869408653:user/ecs-user"</span>

  <span class="nv">$ </span>aws iam create-access-key <span class="nt">--user-name</span> ecs-user
  <span class="o">&gt;</span> <span class="s2">"AccessKeyId"</span>: <span class="s2">"AKIAUMSGRUGGXHHX6257"</span>,
  <span class="o">&gt;</span> <span class="s2">"SecretAccessKey"</span>: <span class="s2">"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"</span>

  <span class="c"># ECS 접근을 위한 정책들을 설정합니다.</span>
  <span class="nv">$ </span>aws iam attach-user-policy <span class="se">\</span>
      <span class="nt">--policy-arn</span> arn:aws:iam::aws:policy/AmazonEC2FullAccess <span class="nt">--user-name</span> ecs-user
  <span class="nv">$ </span>aws iam attach-user-policy <span class="se">\</span>
      <span class="nt">--policy-arn</span> arn:aws:iam::aws:policy/AmazonECS_FullAccess <span class="nt">--user-name</span> ecs-user
  <span class="nv">$ </span>aws iam attach-user-policy <span class="se">\</span>
      <span class="nt">--policy-arn</span> arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess <span class="nt">--user-name</span> ecs-user

  <span class="c"># 아래 json 파일을 생성한 후, 해당 경로에서 명령어를 실행하여 정책을 추가합니다.</span>
  <span class="nv">$ </span>aws iam create-policy <span class="nt">--policy-name</span> ecsUserPolicy <span class="nt">--policy-document</span> file://ecs-user-policy.json
  <span class="o">&gt;</span> <span class="s2">"PolicyId"</span>: <span class="s2">"ANPAUMSGRUGG5Z2CWN5G3"</span>,
  <span class="o">&gt;</span> <span class="s2">"Arn"</span>: <span class="s2">"arn:aws:iam::301869408653:policy/ecsUserPolicy"</span>,

  <span class="nv">$ </span>aws iam attach-user-policy <span class="se">\</span>
      <span class="nt">--policy-arn</span> arn:aws:iam::301869408653:policy/ecsUserPolicy <span class="se">\</span>
      <span class="nt">--user-name</span> ecs-user
    
  <span class="c"># 위에서 생성한 ecs-user로 access key와 secret key를 등록하여 다시 인증합니다.</span>
  <span class="nv">$ </span>aws configure
</code></pre></div>    </div>
    <p>ecs-user 추가적인 권한 설정을 위한 정책</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  # ecs-user-policy.json
  {
      "Version": "2012-10-17",
      "Statement": [{
          "Effect": "Allow",
          "Action": [
              "iam:PassRole"
          ],
          "Resource": "arn:aws:iam::301869408653:role/ApplicationAutoscalingECSRole"
      }, {
          "Effect": "Allow",
          "Action": [
              "ec2:DescribeAddresses",
              "ec2:AllocateAddress",
              "ec2:DescribeInstances",
              "ec2:AssociateAddress"
              "ecr:CreateRepository"
          ],
          "Resource": "*"
      }]
  }
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="docker-구성-및-ecr-업로드">Docker 구성 및 ECR 업로드</h3>
<p><strong>간단한 설명</strong></p>
<ul>
  <li>ecs에서의 최소 단위는 “태스크”이며, 하나의 태스크 내에는 다수의 이미지 파일을 사용할 수 있습니다.</li>
  <li>하나의 “태스크”를 구성할 때 빌드시킬 도커 이미지는 ECR이라고 하는 저장소에 push 해야합니다.</li>
</ul>

<p><strong>ECR 등록 및 업로드</strong></p>
<ul>
  <li>ECR 로그인
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nv">$ </span>aws ecr get-login-password  <span class="se">\</span>
      <span class="nt">--region</span> ap-northeast-2 | docker login <span class="nt">--username</span> AWS <span class="se">\</span>
      <span class="nt">--password-stdin</span> 301869408653.dkr.ecr.ap-northeast-2.amazonaws.com
</code></pre></div>    </div>
  </li>
  <li>ECR Repository 생성
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nv">$ </span>aws ecr create-repository <span class="nt">--repository-name</span> my-web
  <span class="o">&gt;</span> <span class="s2">"repositoryUri"</span>: <span class="s2">"301869408653.dkr.ecr.ap-northeast-2.amazonaws.com/my-web"</span>
  <span class="nv">$ </span>aws ecr create-repository <span class="nt">--repository-name</span> my-nginx
  <span class="o">&gt;</span> <span class="s2">"repositoryArn"</span>: <span class="s2">"arn:aws:ecr:ap-northeast-2:301869408653:repository/my-nginx"</span>
</code></pre></div>    </div>
  </li>
  <li><a href="https://github.com/yamkant/aws-ecs/tree/main/srcs/ecr">Docker 구성 및 테스트</a>를 참고하여 ecr 업로드 전 실행을 확인합니다.</li>
  <li>ECR 등록을 위한 이미지 태깅 및 docker push. 결과: <a href="https://github.com/yamkant/aws-ecs/blob/main/srcs/images/ecs-ecr-setting.png">ECR 이미지 구성 예시</a>
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c"># nginx 이미지 태그 및 업로드</span>
  <span class="nv">$ </span>docker tag my-nginx:latest 301869408653.dkr.ecr.ap-northeast-2.amazonaws.com/my-nginx:latest
  <span class="nv">$ </span>docker push 301869408653.dkr.ecr.ap-northeast-2.amazonaws.com/my-nginx:latest

  <span class="c"># web 이미지 태그 및 업로드</span>
  <span class="nv">$ </span>docker tag my-web:latest 301869408653.dkr.ecr.ap-northeast-2.amazonaws.com/my-web:latest
  <span class="nv">$ </span>docker push 301869408653.dkr.ecr.ap-northeast-2.amazonaws.com/my-web:latest
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="ecs-클러스터-및-서비스-구성">ECS 클러스터 및 서비스 구성</h3>
<p><a href="https://github.com/yamkant/aws-ecs/blob/main/srcs/images/ecs-cluster-setting.png">ECS cluster 생성 예시</a></p>
<ul>
  <li>빠른 구현을 위해 <code class="language-plaintext highlighter-rouge">VPC</code>는 기본으로, EC2를 이용한 서버 구성으로 진행합니다. (프리티어 사용 가능)</li>
  <li>일정 시간이 지나고, 클러스터가 생성된 직 후, EC2 대시보드를 보면 인스턴스도 함께 생성됩니다.</li>
  <li>새로 생성된 인스턴스 특징: <code class="language-plaintext highlighter-rouge">IAM: ecsInstanceRole</code>, <code class="language-plaintext highlighter-rouge">AMI: ami-ecs</code>, <code class="language-plaintext highlighter-rouge">ASG(Auto Scailing Group) 설정됨</code>, <code class="language-plaintext highlighter-rouge">기본 보안 그룹 설정</code></li>
  <li>따라서, 만약 ECS에 등록된 인스턴스를 추가하고자 하면, 위의 설정을 그대로 EC2를 생성하면 됩니다.</li>
</ul>

<h3 id="태스크-정의-생성-host-모드">태스크 정의 생성 (host 모드)</h3>
<p><strong>컨테이너 - 1</strong></p>
<ul>
  <li>이름: web</li>
  <li>이미지 URI: 301869408653.dkr.ecr.ap-northeast-2.amazonaws.com/my-web</li>
  <li>컨테이너 포트: 8000</li>
  <li>환경 파일 추가: S3에서 호스팅된 파일의 ARN 경로를 기입합니다.</li>
</ul>

<p><strong>컨테이너 - 2</strong></p>
<ul>
  <li>이름: nginx</li>
  <li>이미지 URI: 301869408653.dkr.ecr.ap-northeast-2.amazonaws.com/my-nginx</li>
  <li>컨테이너 포트: 80</li>
</ul>

<p><strong>환경, 스토리지, 모니터링 및 태그 구성</strong></p>
<ul>
  <li>앱 환경: Amazon EC2 인스턴스</li>
  <li>CPU: 0.125 vCPU / 메모리: 0.25 GB</li>
  <li>태스크 실행 역할: ecsTaskExcutionRole</li>
  <li>네트워크 모드: host</li>
</ul>

<p><strong>태스크 정의에 대한 설명</strong></p>
<ul>
  <li>ecs의 네트워크 모드를 host로 하면, 태스크 정의 내의 모든 컨테이너는 host의 네트워크와 같은 주소를 가집니다.</li>
  <li>따라서, nginx 내에서 127.0.0.1:8000으로 <code class="language-plaintext highlighter-rouge">web</code> 컨테이너와 통신할 수 있습니다.</li>
  <li>태스크 실행 역할의 경우, 처음 생성할 때 자동으로 부여됩니다. S3를 사용하기 위해서는 접근 권한이 필요한데, <code class="language-plaintext highlighter-rouge">ecsTaskExcutionRole</code> 역할에 <code class="language-plaintext highlighter-rouge">AmazonS3FullAccess</code> 정책을 추가할 수 있습니다.</li>
</ul>

<h3 id="서비스-생성-ec2-인스턴스-기반">서비스 생성 (EC2 인스턴스 기반)</h3>
<p><strong>환경</strong></p>
<ul>
  <li>컴퓨팅 옵션: 시작유형</li>
  <li>시작 유형: EC2</li>
</ul>

<p><strong>배포 구성</strong></p>
<ul>
  <li>애플리케이션 유형: 서비스</li>
  <li>패밀리: 위에서 생성한 태스크 정의</li>
  <li>서비스 유형: 복제본</li>
</ul>

<p><strong>서비스 생성에 대한 설명</strong></p>
<ul>
  <li>시작유형을 EC2로 하는 기본적인 서비스를 실행합니다.</li>
  <li>서비스 연결을 통한 네임스페이스 사용과 로드밸런싱 추가 부분은 위 동작이 정상적으로 작동하면 추가하는 방식으로 진행합니다.</li>
  <li>생성이 완료되면, 태스크가 동작하고 있는 EC2에 연결하여 <code class="language-plaintext highlighter-rouge">docker</code> 관련 명령어를 통해 상태를 모니터링 할 수 있습니다.</li>
  <li>또한, 해당 EC2의 보안 그룹에 설정된 인바운드 규칙에 따라 포트가 개방되며, EC2의 퍼블릭 IP로 서비스가 호스팅하는 웹사이트에 접속 가능합니다.</li>
</ul>]]></content><author><name>Yeham Kim</name></author><category term="Server" /><summary type="html"><![CDATA[최종 목표 ECS 내에서 nginx와 django를 사용한 서버 구성 참고: git repository - 구체적인 코드 및 이미지를 볼 수 있습니다. 이 후 포스팅: VPC 구성 / ALB 구성 / Network Bridge 모드에서 Namespace 사용]]></summary></entry><entry><title type="html">[Server] Github action을 활용한 CI/CD 구성</title><link href="http://localhost:4000/server/server-githubaction/" rel="alternate" type="text/html" title="[Server] Github action을 활용한 CI/CD 구성" /><published>2023-07-08T16:05:07+09:00</published><updated>2023-07-08T16:05:07+09:00</updated><id>http://localhost:4000/server/server-githubaction</id><content type="html" xml:base="http://localhost:4000/server/server-githubaction/"><![CDATA[<h2 id="github-action">Github action</h2>

<p><strong>Work Flow 구성</strong></p>
<ul>
  <li>github action에서는 아래 템플릿을 기본적으로 제공합니다.<br />
(Repository -&gt; Actions -&gt; New workflow [배너] -&gt; 원하는 Framework 검색)</li>
  <li>템플릿은 해당 프로젝트 리파지토리의 <code class="language-plaintext highlighter-rouge">/.github/workflows/</code> 디렉토리에 <code class="language-plaintext highlighter-rouge">.yaml</code> 형식으로 작성합니다.</li>
  <li>이 때, <code class="language-plaintext highlighter-rouge">.env</code> 파일 내의 정보는 보안상 workflow에 기입할 수 없으므로, 각각 github repository settings에서 관리합니다.<br />
(Repository -&gt; Settings -&gt; Secrets and variables [Actions])</li>
</ul>

<h3 id="ci-구성">CI 구성</h3>
<ul>
  <li>Django 기본 템플릿을 응용하여 아래와 같이 Github Action 템플릿을 작성합니다.</li>
  <li>간단하게, <code class="language-plaintext highlighter-rouge">feat/</code>으로 시작하는 브랜치에 push/pull 하는 경우 github action이 동작하도록 합니다.</li>
  <li>steps 디렉티브에서 명시한 순서대로 실행 명령어를 수행합니다. 작성한 테스트를 동작시키고, 이상이 있는 경우 작동을 중지합니다.</li>
</ul>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">CI</span>
<span class="na">on</span><span class="pi">:</span>
<span class="na">push</span><span class="pi">:</span>
    <span class="na">branches</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">feat/**'</span>
<span class="na">pull_request</span><span class="pi">:</span>
    <span class="na">branches</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">feat/**'</span>
<span class="na">jobs</span><span class="pi">:</span>
<span class="na">build</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">strategy</span><span class="pi">:</span>
    <span class="na">max-parallel</span><span class="pi">:</span> <span class="m">4</span>
    <span class="na">matrix</span><span class="pi">:</span>
        <span class="c1"># python-version: [3.7, 3.8, 3.9]</span>
        <span class="na">python-version</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">3.9</span><span class="pi">]</span>
    <span class="na">env</span><span class="pi">:</span>
    <span class="na">working-directory</span><span class="pi">:</span> <span class="s">./web/apps/</span>

    <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v3</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Set up Python $</span>
    <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-python@v3</span>
    <span class="na">with</span><span class="pi">:</span>
        <span class="na">python-version</span><span class="pi">:</span> <span class="s">$</span>

    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install Dependencies</span>
    <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
        <span class="s">python3 -m pip install --upgrade pip</span>
        <span class="s">pip install -r requirements.txt</span>
    <span class="na">working-directory</span><span class="pi">:</span> <span class="s">$</span>
    
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run Tests</span>
    <span class="na">env</span><span class="pi">:</span>
        <span class="na">DJANGO_SECRET_KEY</span><span class="pi">:</span> <span class="s">$</span>
        <span class="na">DJANGO_SETTINGS_MODULE</span><span class="pi">:</span> <span class="s">$</span>
    <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
        <span class="s">python3 manage.py test</span>
    <span class="na">working-directory</span><span class="pi">:</span> <span class="s">$</span>
</code></pre></div></div>]]></content><author><name>Yeham Kim</name></author><category term="Server" /><summary type="html"><![CDATA[Github action]]></summary></entry><entry><title type="html">[Django] 테스트는 어떻게 수행할까?</title><link href="http://localhost:4000/django%20strategy/django-test/" rel="alternate" type="text/html" title="[Django] 테스트는 어떻게 수행할까?" /><published>2023-06-09T10:05:07+09:00</published><updated>2023-06-09T10:05:07+09:00</updated><id>http://localhost:4000/django%20strategy/django-test</id><content type="html" xml:base="http://localhost:4000/django%20strategy/django-test/"><![CDATA[<h3 id="작성이유-및-목표">작성이유 및 목표</h3>
<ul>
  <li>흔히 리팩토링을 위해서, 발생할 법할 문제들을 미리 파악하기 위해서, 어떤 방식으로 사용하는지 명시하기 위해서 테스트를 작성합니다.</li>
  <li>알고리즘 문제를 풀면서 또한 테스트 케이스의 중요성과 백엔드 개발자들이 왜 테스트 커버리지를 채워나가는데 집착하는지를 느끼게 됩니다.</li>
  <li>해당 게시글에서는 Django를 통해 e2e, integration 테스트를 하기 위한 간단한 예시를 작성합니다.</li>
  <li>커스텀 유저를 위한 members 도메인을 예시로 설명합니다.</li>
</ul>

<h3 id="폴더-경로">폴더 경로</h3>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>web/
<span class="p">-</span> apps/
<span class="p">  -</span> config/
<span class="p">  -</span> core/
<span class="p">    -</span> tests.py
<span class="p">  -</span> members/
<span class="p">    -</span> tests/
<span class="p">      -</span> integration.py
<span class="p">      -</span> e2e.py
</code></pre></div></div>

<h2 id="integration-test">Integration test</h2>
<p>외부 라이브러리와 같이 의존적인 부분을 함께 테스트합니다. Django에서는 test DB를 수월하게 만들고 수정하게 할 수 있습니다.</p>

<h3 id="기본-테스트-클래스-설명">기본 테스트 클래스 설명</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># apps/core/tests.py
</span>
<span class="kn">from</span> <span class="n">django.test</span> <span class="kn">import</span> <span class="n">TestCase</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Dict</span>
<span class="kn">from</span> <span class="n">django.core.serializers.base</span> <span class="kn">import</span> <span class="n">Serializer</span>

<span class="kn">from</span> <span class="n">django.db</span> <span class="kn">import</span> <span class="n">connection</span><span class="p">,</span> <span class="n">reset_queries</span>
<span class="kn">from</span> <span class="n">django.test</span> <span class="kn">import</span> <span class="n">TestCase</span><span class="p">,</span> <span class="n">override_settings</span>

<span class="k">class</span> <span class="nc">TestSerializerHelper</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">serializer</span><span class="p">:</span> <span class="n">Serializer</span><span class="p">,</span> <span class="n">queryCnt</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">0</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">serializer</span> <span class="o">=</span> <span class="n">serializer</span>
        <span class="n">self</span><span class="p">.</span><span class="n">queryCnt</span> <span class="o">=</span> <span class="n">queryCnt</span>

    <span class="k">def</span> <span class="nf">_create</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="n">serializer</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">serializer</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">serializer</span><span class="p">.</span><span class="nf">is_valid</span><span class="p">():</span>
            <span class="n">instance</span> <span class="o">=</span> <span class="n">serializer</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">instance</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">serializer</span><span class="p">.</span><span class="nf">is_valid</span><span class="p">(</span><span class="n">raise_exception</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">create</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="n">createData</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_create</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">queryCnt</span><span class="p">:</span>
            <span class="n">createData</span> <span class="o">=</span> <span class="nf">wrapFunctionForQueryCount</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">queryCnt</span><span class="p">)(</span><span class="n">self</span><span class="p">.</span><span class="n">_create</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">createData</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">]):</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">serializer</span><span class="p">.</span><span class="n">serializer_type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">create</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">IntegrationSerializerTestCase</span><span class="p">(</span><span class="n">TestCase</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">serializer_test</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">expectedQueryCount</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">expectedResult</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">bool</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="o">**</span><span class="n">data</span><span class="p">,</span>
    <span class="p">):</span>
        <span class="n">testSerializerHelper</span> <span class="o">=</span> <span class="nc">TestSerializerHelper</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">serializer</span><span class="p">,</span> <span class="n">expectedQueryCount</span><span class="p">)</span>

        <span class="n">instance</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">instance</span> <span class="o">=</span> <span class="n">testSerializerHelper</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span><span class="n">expectedResult</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span><span class="n">expectedResult</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">instance</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">IntegrationSerializerTestCase</code>는 serializer의 integration 테스트를 위해 구성한 <code class="language-plaintext highlighter-rouge">TestCase</code> 클래스입니다.</li>
  <li>테스트를 수행하기 위해 이를 상속한 클래스에서 테스트를 위한 <code class="language-plaintext highlighter-rouge">serializer</code>를 클래스 변수로 지정하면 해당 <code class="language-plaintext highlighter-rouge">TestCase</code>에서 이를 활용하는 방식입니다.
(상속하여 사용하는 방식 이 후 설명)</li>
  <li>얼마나 많은 sql query를 호출했는지 평가하기 위해 DB 호출 부분을 <code class="language-plaintext highlighter-rouge">wrapFunctionForQueryCount</code>로 감싸서 사용합니다.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="bp">...</span>
  <span class="kn">from</span> <span class="n">django.db</span> <span class="kn">import</span> <span class="n">connection</span><span class="p">,</span> <span class="n">reset_queries</span>
  <span class="bp">...</span>

  <span class="k">def</span> <span class="nf">wrapFunctionForQueryCount</span><span class="p">(</span><span class="n">count</span><span class="p">):</span>
  <span class="k">def</span> <span class="nf">decorator</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
      <span class="nd">@override_settings</span><span class="p">(</span><span class="n">DEBUG</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
      <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
          <span class="nf">reset_queries</span><span class="p">()</span>
          <span class="n">ret</span> <span class="o">=</span> <span class="nf">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
          <span class="n">queries</span> <span class="o">=</span> <span class="n">connection</span><span class="p">.</span><span class="n">queries</span>
          <span class="k">for</span> <span class="n">query</span> <span class="ow">in</span> <span class="n">queries</span><span class="p">:</span>
              <span class="c1"># TODO: Logger 사용하여 출력결과 저장
</span>              <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">QUERY: </span><span class="si">{</span><span class="n">query</span><span class="p">[</span><span class="sh">'</span><span class="s">sql</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="s">, TIME: </span><span class="si">{</span><span class="n">query</span><span class="p">[</span><span class="sh">'</span><span class="s">time</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
          <span class="k">assert</span> <span class="nf">len</span><span class="p">(</span><span class="n">queries</span><span class="p">)</span> <span class="o">==</span> <span class="n">count</span><span class="p">,</span> <span class="sh">"</span><span class="s">QUERY COUNT:%d != %d</span><span class="sh">"</span> <span class="o">%</span> <span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">queries</span><span class="p">),</span> <span class="n">count</span><span class="p">)</span>
          <span class="k">return</span> <span class="n">ret</span>
      <span class="k">return</span> <span class="n">wrapper</span>
  <span class="k">return</span> <span class="n">decorator</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><strong>Serializer 구성</strong></p>
<ul>
  <li>저는 생성을 위해 사용하는 <code class="language-plaintext highlighter-rouge">ExampleCreateSerializer</code>는 <code class="language-plaintext highlighter-rouge">core.serializers.CreateSerializer</code>를 상속받도록 생성합니다.</li>
  <li>따라서, 내부에 어떤 타입의 serializer인지 명시하기 때문에, <code class="language-plaintext highlighter-rouge">TestSerialize.run()</code>과 같이 사용할 수 있습니다.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1"># core.sesrializers.CreateSerializer
</span>  <span class="kn">from</span> <span class="n">rest_framework</span> <span class="kn">import</span> <span class="n">serializers</span>

  <span class="k">class</span> <span class="nc">CreateSerializer</span><span class="p">(</span><span class="n">serializers</span><span class="p">.</span><span class="n">ModelSerializer</span><span class="p">):</span>
      <span class="n">representation_serializer_class</span> <span class="o">=</span> <span class="bp">None</span>
      <span class="n">serializer_type</span> <span class="o">=</span> <span class="sh">"</span><span class="s">create</span><span class="sh">"</span>

      <span class="k">def</span> <span class="nf">to_representation</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">instance</span><span class="p">):</span>
          <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">representation_serializer_class</span><span class="p">(</span><span class="n">instance</span><span class="o">=</span><span class="n">instance</span><span class="p">).</span><span class="n">data</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="기본-테스트-클래스를-상속받는-테스트-예시">기본 테스트 클래스를 상속받는 테스트 예시</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># apps/members/tests.integration.py
</span><span class="kn">from</span> <span class="n">django.urls</span> <span class="kn">import</span> <span class="n">reverse</span>
<span class="kn">from</span> <span class="n">core.tests</span> <span class="kn">import</span> <span class="n">IntegrationSerializerTestCase</span>
<span class="kn">from</span> <span class="n">members.serializers</span> <span class="kn">import</span> <span class="n">MemberCreateSerializer</span>

<span class="k">class</span> <span class="nc">MemberCreateSerializerTest</span><span class="p">(</span><span class="n">IntegrationSerializerTestCase</span><span class="p">):</span>
    <span class="n">serializer</span> <span class="o">=</span> <span class="n">MemberCreateSerializer</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">setUpTestData</span><span class="p">(</span><span class="n">cls</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">pass</span>

    <span class="c1"># 1st query: unique phone number check
</span>    <span class="c1"># 2nd query: insert new member
</span>    
    <span class="k">def</span> <span class="nf">test_success</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">instance</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">serializer_test</span><span class="p">(</span>
            <span class="n">expectedQueryCount</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span>
            <span class="n">expectedResult</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
            <span class="n">phone</span><span class="o">=</span><span class="sh">"</span><span class="s">01050175933</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">password</span><span class="o">=</span><span class="sh">"</span><span class="s">5933</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">password2</span><span class="o">=</span><span class="sh">"</span><span class="s">5933</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">assertEqual</span><span class="p">(</span><span class="n">instance</span><span class="p">.</span><span class="n">phone</span><span class="p">,</span> <span class="sh">"</span><span class="s">01050175933</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">test_mismatch_password</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">instance</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">serializer_test</span><span class="p">(</span>
            <span class="n">expectedQueryCount</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
            <span class="n">expectedResult</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
            <span class="n">phone</span><span class="o">=</span><span class="sh">"</span><span class="s">01050175933</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">password</span><span class="o">=</span><span class="sh">"</span><span class="s">5933</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">password2</span><span class="o">=</span><span class="sh">"</span><span class="s">59332</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">)</span>

    <span class="k">def</span> <span class="nf">test_empty_phone</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">instance</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">serializer_test</span><span class="p">(</span>
            <span class="n">expectedQueryCount</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
            <span class="n">expectedResult</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
            <span class="n">phone</span><span class="o">=</span><span class="sh">""</span><span class="p">,</span>
            <span class="n">password</span><span class="o">=</span><span class="sh">"</span><span class="s">5933</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">password2</span><span class="o">=</span><span class="sh">"</span><span class="s">59333</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">)</span>

    <span class="k">def</span> <span class="nf">test_register_repeated_phone</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">instance</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">serializer_test</span><span class="p">(</span>
            <span class="n">expectedResult</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
            <span class="n">phone</span><span class="o">=</span><span class="sh">"</span><span class="s">01050175933</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">password</span><span class="o">=</span><span class="sh">"</span><span class="s">5933</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">password2</span><span class="o">=</span><span class="sh">"</span><span class="s">5933</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="n">instance</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">serializer_test</span><span class="p">(</span>
            <span class="n">expectedQueryCount</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
            <span class="n">expectedResult</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
            <span class="n">phone</span><span class="o">=</span><span class="sh">"</span><span class="s">01050175933</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">password</span><span class="o">=</span><span class="sh">"</span><span class="s">5933</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">password2</span><span class="o">=</span><span class="sh">"</span><span class="s">5933</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">)</span>
</code></pre></div></div>
<ul>
  <li>위와 같이, member 생성 테스트를 위한 테스트 클래스는 앞서 설명한 기본 테스트 클래스를 상속받습니다.</li>
  <li>기대하는 결과(생성이므로 생성되었는지)가 잘 반환되었는지, 테스트 중 오류는 없는지 확인할 수 있습니다.</li>
</ul>]]></content><author><name>Yeham Kim</name></author><category term="Django Strategy" /><summary type="html"><![CDATA[작성이유 및 목표 흔히 리팩토링을 위해서, 발생할 법할 문제들을 미리 파악하기 위해서, 어떤 방식으로 사용하는지 명시하기 위해서 테스트를 작성합니다. 알고리즘 문제를 풀면서 또한 테스트 케이스의 중요성과 백엔드 개발자들이 왜 테스트 커버리지를 채워나가는데 집착하는지를 느끼게 됩니다. 해당 게시글에서는 Django를 통해 e2e, integration 테스트를 하기 위한 간단한 예시를 작성합니다. 커스텀 유저를 위한 members 도메인을 예시로 설명합니다.]]></summary></entry><entry><title type="html">Django Custom User</title><link href="http://localhost:4000/django-custom-user/" rel="alternate" type="text/html" title="Django Custom User" /><published>2023-06-04T00:00:00+09:00</published><updated>2023-06-04T00:00:00+09:00</updated><id>http://localhost:4000/django-custom-user</id><content type="html" xml:base="http://localhost:4000/django-custom-user/"><![CDATA[<p>Django custom user 생성을 위한 설정 추가</p>

<p><strong>작업을 위한 Directory Level</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>web
- apps/
  - config/
    - settings/
      - base.py
      - development.py
      - production.py
    ...
  - core/
    - serializers.py
    - models.py
    ...
  - members/
    - urls/
      - members.py
    - models.py
    - serializers.py
    - views.py
    ...
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config.settings.base.py
</span><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="bp">...</span>
    <span class="sh">'</span><span class="s">members</span><span class="sh">'</span><span class="p">,</span>
<span class="p">]</span>

<span class="n">AUTH_USER_MODEL</span> <span class="o">=</span> <span class="sh">'</span><span class="s">members.Member</span><span class="sh">'</span>

</code></pre></div></div>
<ul>
  <li>config 앱의 base setting 파일에서 members 앱을 추가하고, AUTH_USER를 Member 모델로 대체하기 위한 작업을 수행합니다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># members.models.py
</span>
<span class="kn">from</span> <span class="n">core.models</span> <span class="kn">import</span> <span class="n">BaseModel</span>
<span class="kn">from</span> <span class="n">django.contrib.auth.models</span> <span class="kn">import</span> <span class="n">AbstractUser</span><span class="p">,</span> <span class="n">BaseUserManager</span>
<span class="kn">from</span> <span class="n">django.core.validators</span> <span class="kn">import</span> <span class="n">RegexValidator</span>
<span class="kn">from</span> <span class="n">django.db</span> <span class="kn">import</span> <span class="n">models</span>

<span class="k">class</span> <span class="nc">MemberManager</span><span class="p">(</span><span class="n">BaseUserManager</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">createMember</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">phone</span><span class="p">,</span> <span class="n">password</span><span class="p">):</span>
        <span class="n">member</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">model</span><span class="p">(</span><span class="n">phone</span><span class="o">=</span><span class="n">phone</span><span class="p">)</span>
        <span class="n">member</span><span class="p">.</span><span class="nf">set_password</span><span class="p">(</span><span class="n">password</span><span class="p">)</span>
        <span class="n">member</span><span class="p">.</span><span class="nf">save</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">member</span>

<span class="k">class</span> <span class="nc">Member</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">,</span> <span class="n">AbstractUser</span><span class="p">):</span>
    <span class="n">username</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="n">phone</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">CharField</span><span class="p">(</span>
        <span class="n">unique</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
        <span class="n">max_length</span><span class="o">=</span><span class="mi">11</span><span class="p">,</span>
        <span class="n">validators</span><span class="o">=</span><span class="p">[</span>
            <span class="nc">RegexValidator</span><span class="p">(</span>
                <span class="sa">r</span><span class="sh">"</span><span class="s">^01[016789][0-9]{7,8}$</span><span class="sh">"</span><span class="p">,</span>
                <span class="n">message</span><span class="o">=</span><span class="sh">"</span><span class="s">This phone number format is invalid.</span><span class="sh">"</span><span class="p">,</span>
            <span class="p">)</span>
        <span class="p">]</span>
    <span class="p">)</span>
    <span class="n">objects</span> <span class="o">=</span> <span class="nc">MemberManager</span><span class="p">()</span>

    <span class="n">USERNAME_FIELD</span> <span class="o">=</span> <span class="sh">"</span><span class="s">phone</span><span class="sh">"</span>

    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">managed</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="n">db_table</span> <span class="o">=</span> <span class="sh">'</span><span class="s">members</span><span class="sh">'</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Member</code> 모델은 <code class="language-plaintext highlighter-rouge">USERNAME_FIELD</code>를 핸드폰 번호로 대체합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">Member.objects</code>의 메서드를 추가하기 위해 MemberManager(Django 기본 유저를 제어하기 위해 사용하는 BaseUserManager 상속)를 생성합니다.</li>
  <li>따라서, <code class="language-plaintext highlighter-rouge">Member.objects.createMember</code> phone와 password 필드를 각각 설정합니다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># core.serailizers.py
</span><span class="kn">from</span> <span class="n">rest_framework</span> <span class="kn">import</span> <span class="n">serializers</span>

<span class="k">class</span> <span class="nc">CreateSerializer</span><span class="p">(</span><span class="n">serializers</span><span class="p">.</span><span class="n">ModelSerializer</span><span class="p">):</span>
    <span class="n">representation_serializer_class</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">to_representation</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">instance</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">representation_serializer_class</span><span class="p">(</span><span class="n">instance</span><span class="o">=</span><span class="n">instance</span><span class="p">).</span><span class="n">data</span>
</code></pre></div></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># members.serializers.py
</span><span class="kn">from</span> <span class="n">rest_framework</span> <span class="kn">import</span> <span class="n">serializers</span>
<span class="kn">from</span> <span class="n">core.serializers</span> <span class="kn">import</span> <span class="n">CreateSerializer</span>

<span class="kn">from</span> <span class="n">members.models</span> <span class="kn">import</span> <span class="n">Member</span>

<span class="k">class</span> <span class="nc">MemberSerializer</span><span class="p">(</span><span class="n">serializers</span><span class="p">.</span><span class="n">ModelSerializer</span><span class="p">):</span>
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">Member</span>
        <span class="n">fields</span> <span class="o">=</span> <span class="p">[</span>
            <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">phone</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">]</span>
        <span class="n">read_only_fields</span> <span class="o">=</span> <span class="n">fields</span>

<span class="k">class</span> <span class="nc">MemberCreateSerializer</span><span class="p">(</span><span class="n">CreateSerializer</span><span class="p">):</span>
    <span class="n">representation_serializer_class</span> <span class="o">=</span> <span class="n">MemberSerializer</span>
    <span class="n">password2</span> <span class="o">=</span> <span class="n">serializers</span><span class="p">.</span><span class="nc">CharField</span><span class="p">(</span><span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">Member</span>
        <span class="n">fields</span> <span class="o">=</span> <span class="p">(</span>
            <span class="sh">"</span><span class="s">phone</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">password</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">password2</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">validate</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">password</span><span class="sh">'</span><span class="p">]</span> <span class="o">!=</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">password2</span><span class="sh">'</span><span class="p">]:</span>
            <span class="k">raise</span> <span class="n">serializers</span><span class="p">.</span><span class="nc">ValidationError</span><span class="p">({</span><span class="sh">"</span><span class="s">password2</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">This is different with password.</span><span class="sh">"</span><span class="p">})</span>
        <span class="k">return</span> <span class="n">data</span>
    
    <span class="k">def</span> <span class="nf">create</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">validated_data</span><span class="p">):</span>
        <span class="n">validated_data</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="sh">'</span><span class="s">password2</span><span class="sh">'</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">Member</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">createMember</span><span class="p">(</span><span class="o">**</span><span class="n">validated_data</span><span class="p">)</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">core.serializers.CreateSerializer</code>를 상속하여 <code class="language-plaintext highlighter-rouge">to_representation</code>을 통해 내부에서 <code class="language-plaintext highlighter-rouge">ModelSerializer</code>를 직렬화하여 사용합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">view</code>에서 <code class="language-plaintext highlighter-rouge">member</code>를 생성하기 위해 호출할 <code class="language-plaintext highlighter-rouge">serializer</code>를 추가합니다.</li>
  <li>일반적으로 <code class="language-plaintext highlighter-rouge">MemberSerializer</code>를 통해서 <code class="language-plaintext highlighter-rouge">Member</code> 모델의 <code class="language-plaintext highlighter-rouge">id</code> 값과 <code class="language-plaintext highlighter-rouge">phone(로그인 아이디)</code> 값을 사용합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">MemberCreateSerializer</code>는 <code class="language-plaintext highlighter-rouge">password2</code>를 추가적으로 정의하고, 그 외의 필드는 <code class="language-plaintext highlighter-rouge">MemberSerializer</code>에서 serialize하여 사용합니다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># members.views.py
</span>
<span class="kn">from</span> <span class="n">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span>

<span class="c1"># Create your views here.
</span><span class="kn">from</span> <span class="n">rest_framework.generics</span> <span class="kn">import</span> <span class="n">CreateAPIView</span>
<span class="kn">from</span> <span class="n">rest_framework.permissions</span> <span class="kn">import</span> <span class="n">AllowAny</span>
<span class="kn">from</span> <span class="n">members.serializers</span> <span class="kn">import</span> <span class="n">MemberCreateSerializer</span>

<span class="kn">from</span> <span class="n">drf_spectacular.types</span> <span class="kn">import</span> <span class="n">OpenApiTypes</span>
<span class="kn">from</span> <span class="n">drf_spectacular.utils</span> <span class="kn">import</span> <span class="n">OpenApiExample</span><span class="p">,</span> <span class="n">OpenApiParameter</span><span class="p">,</span> <span class="n">extend_schema_view</span>
<span class="kn">from</span> <span class="n">drf_spectacular.utils</span> <span class="kn">import</span> <span class="n">extend_schema</span>
<span class="kn">from</span> <span class="n">members.serializers</span> <span class="kn">import</span> <span class="n">MemberCreateSerializer</span>

<span class="nd">@extend_schema</span><span class="p">(</span>
    <span class="n">tags</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">사용자</span><span class="sh">"</span><span class="p">],</span>
    <span class="n">summary</span><span class="o">=</span><span class="sh">"</span><span class="s">새로운 사용자를 추가합니다.</span><span class="sh">"</span><span class="p">,</span>
<span class="p">)</span>
<span class="k">class</span> <span class="nc">MemberCreateAPIView</span><span class="p">(</span><span class="n">CreateAPIView</span><span class="p">):</span>
    <span class="n">permission_classes</span> <span class="o">=</span> <span class="p">[</span><span class="n">AllowAny</span><span class="p">]</span>
    <span class="n">serializer_class</span> <span class="o">=</span> <span class="n">MemberCreateSerializer</span>
</code></pre></div></div>
<ul>
  <li>간단히 generic view를 사용하여 새로운 유저를 생성하는 방식을 추가합니다.</li>
</ul>

<hr />

<h2 id="jwt-인증-방식-추가-설정하는-방법">JWT 인증 방식 추가 설정하는 방법</h2>

<p>jwt access token 및 refresh token을 관리하는 모듈을 설치합니다.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>pip <span class="nb">install </span>djangorestframework-simplejwt
</code></pre></div></div>

<p>settings.py에서 <code class="language-plaintext highlighter-rouge">DEFALT_AUTHENTICATION_CLASSES</code>와 <code class="language-plaintext highlighter-rouge">DEFAULT_PERMISSIONS_CLASSES</code>를 정의합니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config.settings.base.py
</span>
<span class="bp">...</span>

<span class="c1"># 기본 스키마는 drf-spectacular를 사용하고 있습니다.
</span><span class="n">REST_FRAMEWORK</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">'</span><span class="s">DEFAULT_SCHEMA_CLASS</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">drf_spectacular.openapi.AutoSchema</span><span class="sh">'</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">DEFAULT_AUTHENTICATION_CLASSES</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span>
        <span class="sh">"</span><span class="s">rest_framework_simplejwt.authentication.JWTAuthentication</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">),</span>
    <span class="sh">"</span><span class="s">DEFAULT_PERMISSION_CLASSES</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span>
        <span class="sh">"</span><span class="s">rest_framework.permissions.IsAuthenticated</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">],</span>
    <span class="bp">...</span>
<span class="p">}</span>
</code></pre></div></div>

<p>기존 simlejwt 모듈의 제너릭뷰를 그대로 사용합니다. (필요에 따라서 auth 앱을 추가적으로 만들어 사용합니다.)</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># members.views.py
</span>
<span class="bp">...</span>
<span class="kn">from</span> <span class="n">rest_framework_simplejwt</span> <span class="kn">import</span> <span class="n">views</span> <span class="k">as</span> <span class="n">jwt_views</span>

<span class="bp">...</span>
<span class="k">class</span> <span class="nc">TokenCreateAPIView</span><span class="p">(</span><span class="n">jwt_views</span><span class="p">.</span><span class="n">TokenObtainPairView</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="k">class</span> <span class="nc">TokenRefreshAPIView</span><span class="p">(</span><span class="n">jwt_views</span><span class="p">.</span><span class="n">TokenRefreshView</span><span class="p">):</span>
    <span class="k">pass</span>
    
<span class="k">class</span> <span class="nc">TokenBlackListAPIView</span><span class="p">(</span><span class="n">jwt_views</span><span class="p">.</span><span class="n">TokenBlacklistView</span><span class="p">):</span>
    <span class="k">pass</span>
</code></pre></div></div>

<p>jwt 관련 라우팅을 위해 url을 설정합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># members.urls.auth.py
</span><span class="kn">from</span> <span class="n">django.urls</span> <span class="kn">import</span> <span class="n">path</span>
<span class="kn">from</span> <span class="n">members.views</span> <span class="kn">import</span> <span class="n">TokenBlackListAPIView</span><span class="p">,</span> <span class="n">TokenCreateAPIView</span><span class="p">,</span> <span class="n">TokenRefreshAPIView</span>

<span class="n">app_name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">auth</span><span class="sh">"</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="nf">path</span><span class="p">(</span><span class="sh">"</span><span class="s">tokens/</span><span class="sh">"</span><span class="p">,</span> <span class="n">TokenCreateAPIView</span><span class="p">.</span><span class="nf">as_view</span><span class="p">()),</span>
    <span class="nf">path</span><span class="p">(</span><span class="sh">"</span><span class="s">tokens/refresh/</span><span class="sh">"</span><span class="p">,</span> <span class="n">TokenRefreshAPIView</span><span class="p">.</span><span class="nf">as_view</span><span class="p">()),</span>
    <span class="nf">path</span><span class="p">(</span><span class="sh">"</span><span class="s">tokens/blacklist/</span><span class="sh">"</span><span class="p">,</span> <span class="n">TokenBlackListAPIView</span><span class="p">.</span><span class="nf">as_view</span><span class="p">()),</span>
<span class="p">]</span>
</code></pre></div></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config.urls.py
</span>
<span class="kn">from</span> <span class="n">django.urls</span> <span class="kn">import</span> <span class="n">path</span><span class="p">,</span> <span class="n">include</span>

<span class="kn">from</span> <span class="n">drf_spectacular.views</span> <span class="kn">import</span> <span class="n">SpectacularJSONAPIView</span>
<span class="kn">from</span> <span class="n">drf_spectacular.views</span> <span class="kn">import</span> <span class="n">SpectacularRedocView</span>
<span class="kn">from</span> <span class="n">drf_spectacular.views</span> <span class="kn">import</span> <span class="n">SpectacularSwaggerView</span>
<span class="kn">from</span> <span class="n">drf_spectacular.views</span> <span class="kn">import</span> <span class="n">SpectacularYAMLAPIView</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="bp">...</span>
    <span class="nf">path</span><span class="p">(</span><span class="sh">'</span><span class="s">auth/</span><span class="sh">'</span><span class="p">,</span> <span class="nf">include</span><span class="p">(</span><span class="sh">'</span><span class="s">members.urls.auth</span><span class="sh">'</span><span class="p">)),</span>
<span class="p">]</span>

<span class="n">urlpatterns</span> <span class="o">+=</span> <span class="p">[</span>
    <span class="nf">path</span><span class="p">(</span><span class="sh">"</span><span class="s">docs/json/</span><span class="sh">"</span><span class="p">,</span> <span class="n">SpectacularJSONAPIView</span><span class="p">.</span><span class="nf">as_view</span><span class="p">(),</span> <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">schema-json</span><span class="sh">"</span><span class="p">),</span>
    <span class="nf">path</span><span class="p">(</span><span class="sh">"</span><span class="s">docs/yaml/</span><span class="sh">"</span><span class="p">,</span> <span class="n">SpectacularYAMLAPIView</span><span class="p">.</span><span class="nf">as_view</span><span class="p">(),</span> <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">swagger-yaml</span><span class="sh">"</span><span class="p">),</span>
    <span class="nf">path</span><span class="p">(</span><span class="sh">"</span><span class="s">docs/swagger/</span><span class="sh">"</span><span class="p">,</span> <span class="n">SpectacularSwaggerView</span><span class="p">.</span><span class="nf">as_view</span><span class="p">(</span><span class="n">url_name</span><span class="o">=</span><span class="sh">"</span><span class="s">schema-json</span><span class="sh">"</span><span class="p">),</span> <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">swagger-ui</span><span class="sh">"</span><span class="p">,),</span>
    <span class="nf">path</span><span class="p">(</span><span class="sh">"</span><span class="s">docs/redoc/</span><span class="sh">"</span><span class="p">,</span> <span class="n">SpectacularRedocView</span><span class="p">.</span><span class="nf">as_view</span><span class="p">(</span><span class="n">url_name</span><span class="o">=</span><span class="sh">"</span><span class="s">schema-json</span><span class="sh">"</span><span class="p">),</span> <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">redoc</span><span class="sh">"</span><span class="p">,),</span>
<span class="p">]</span>
</code></pre></div></div>]]></content><author><name>Yeham Kim</name></author><summary type="html"><![CDATA[Django custom user 생성을 위한 설정 추가]]></summary></entry><entry><title type="html">[Django] DRF에서 Generic view, Model viewset은 어떻게 사용할까?</title><link href="http://localhost:4000/django%20strategy/django-view/" rel="alternate" type="text/html" title="[Django] DRF에서 Generic view, Model viewset은 어떻게 사용할까?" /><published>2023-05-27T20:05:07+09:00</published><updated>2023-05-27T20:05:07+09:00</updated><id>http://localhost:4000/django%20strategy/django-view</id><content type="html" xml:base="http://localhost:4000/django%20strategy/django-view/"><![CDATA[<p>참고: <a href="https://velog.io/@mynghn/%EC%A0%9C%EB%84%A4%EB%A6%AD-%EB%B7%B0%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4-API-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0">mynghn님 블로그</a></p>
<h3 id="generic-view의-동작방식">Generic view의 동작방식</h3>
<ul>
  <li>DRF 기본 클래스인 <code class="language-plaintext highlighter-rouge">APIView</code>에서는 사용자가 요청부터 응답까지의 구현을 처리할 수 있습니다.</li>
  <li>Generic view에서는 CRUD 패턴에 대한 구현을 미리 정해놓습니다.</li>
  <li>generic view는 네가지 속성을 통해 API 동작을 결정합니다.
  ```
    <ul>
      <li>authentication_classes: 요청자의 가입 및 로그인 여부를 식별합니다.
        <ul>
          <li>.get_authenticators(self)</li>
        </ul>
      </li>
      <li>permission_classes: API 요청에 대한 요청자의 권한을 검증합니다.
        <ul>
          <li>.get_permissions(self)</li>
        </ul>
      </li>
      <li>queryset: 클래스 내부에서 사용하기 위한 기준이 되는 queryset을 설정합니다.
        <ul>
          <li>.get_queryset(self): 데이터를 정적으로(미리 데이터의 바운더리를 정해두고) 불러올 때 사용합니다.</li>
          <li>.filter_queryset(self, queryset): 데이터를 동적으로(클라이언트의 요청에 따라 다른 값을 가져오도록) 불러올 때 사용합니다.</li>
        </ul>
      </li>
      <li>serializer_class: request와 response 스펙을 정의하는 serializer를 설정합니다.
        <ul>
          <li>.get_serializer_class(self)</li>
          <li>.get_serializer_context(self)</li>
          <li>.get_serializer(self, …)
  ```</li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">queryset</code>에서, soft-deleted 요소를 조회하면, <code class="language-plaintext highlighter-rouge">queryset = Item.objects.filter(is_deleted='N')</code>과 같이 처리합니다. (정적 필터 적용)</li>
      <li><code class="language-plaintext highlighter-rouge">filter_queryset</code>에서는 url의 query를 parsing하여 object manager의 filter를 추가할 수 있습니다.</li>
    </ul>
  </li>
  <li>Gneric API View에서, 기본적으로 설정한 예시는 다음과 같습니다.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1"># items/views/ItemView.py
</span>  <span class="kn">from</span> <span class="n">rest_framework.settings</span> <span class="kn">import</span> <span class="n">api_settings</span>
  <span class="kn">from</span> <span class="n">rest_framework.generics</span> <span class="kn">import</span> <span class="n">ListCreateAPIView</span>
  <span class="kn">from</span> <span class="n">items.serializers</span> <span class="kn">import</span> <span class="n">ItemSerializer</span><span class="p">,</span> <span class="n">ItemCreateSerializer</span>

  <span class="kn">from</span> <span class="n">rest_framework.settings</span> <span class="kn">import</span> <span class="n">api_settings</span>

  <span class="k">class</span> <span class="nc">ItemListCreateAPIView</span><span class="p">(</span><span class="n">ListCreateAPIView</span><span class="p">):</span>
      <span class="n">authentication_classes</span> <span class="o">=</span> <span class="n">api_settings</span><span class="p">.</span><span class="n">DEFAULT_AUTHENTICATION_CLASSES</span>
      <span class="n">permission_classes</span> <span class="o">=</span> <span class="n">api_settings</span><span class="p">.</span><span class="n">DEFAULT_PERMISSION_CLASSES</span>
      <span class="n">queryset</span><span class="o">=</span><span class="n">Item</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">filter</span><span class="p">(</span><span class="n">is_deleted</span><span class="o">=</span><span class="sh">"</span><span class="s">N</span><span class="sh">"</span><span class="p">)</span>

      <span class="bp">...</span>
</code></pre></div>    </div>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1"># settings.py
</span>  <span class="bp">...</span>

  <span class="n">REST_FRAMEWORK</span> <span class="o">=</span> <span class="p">{</span>
      <span class="sh">"</span><span class="s">DEFAULT_AUTHENTICATION_CLASSES</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span>
          <span class="sh">"</span><span class="s">rest_framework_simplejwt.authentication.JWTAuthentication</span><span class="sh">"</span><span class="p">,</span>
      <span class="p">),</span>
      <span class="sh">"</span><span class="s">DEFAULT_PERMISSION_CLASSES</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span>
          <span class="sh">"</span><span class="s">rest_framework.permissions.IsAuthenticated</span><span class="sh">"</span><span class="p">,</span>
      <span class="p">],</span>
      <span class="sh">"</span><span class="s">DEFAULT_FILTER_BACKENDS</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span>
          <span class="sh">'</span><span class="s">django_filters.rest_framework.DjangoFilterBackend</span><span class="sh">'</span><span class="p">,</span>
      <span class="p">),</span>
  <span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>인증이나 권한의 경우, settings.py에 REST_FRAMEWORK에 값을 정의해두고, 전역적으로 이를 사용할 수 있습니다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># views.py
</span>
<span class="kn">from</span> <span class="n">django.shortcuts</span> <span class="kn">import</span> <span class="n">get_object_or_404</span>
<span class="kn">from</span> <span class="n">rest_framework.generics</span> <span class="kn">import</span> <span class="n">ListCreateAPIView</span>
<span class="kn">from</span> <span class="n">items.serializers</span> <span class="kn">import</span> <span class="n">ItemSerializer</span><span class="p">,</span> <span class="n">ItemCreateSerializer</span>
<span class="kn">from</span> <span class="n">items.models</span> <span class="kn">import</span> <span class="n">Item</span><span class="p">,</span> <span class="n">Category</span>
<span class="kn">from</span> <span class="n">rest_framework.settings</span> <span class="kn">import</span> <span class="n">api_settings</span>

<span class="sh">'''</span><span class="s">
# 요구사항
아이템 생성
- 아이템 이름, 가격, 브랜드가 모두 같은 경우 생성을 막습니다.
- 상품의 금액이 10000원 이하인 경우 생성을 막습니다. 

아이템 조회
- soft deleted 되지 않은 상품들을 가져옵니다.
</span><span class="sh">'''</span>

<span class="k">class</span> <span class="nc">ItemListCreateAPIView</span><span class="p">(</span><span class="n">ListCreateAPIView</span><span class="p">):</span>
    <span class="n">allowed_method</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">get</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">post</span><span class="sh">"</span><span class="p">]</span>
    <span class="n">authentication_classes</span> <span class="o">=</span> <span class="n">api_settings</span><span class="p">.</span><span class="n">DEFAULT_AUTHENTICATION_CLASSES</span>
    <span class="n">permission_classes</span> <span class="o">=</span> <span class="n">api_settings</span><span class="p">.</span><span class="n">DEFAULT_PERMISSION_CLASSES</span>
    <span class="n">queryset</span><span class="o">=</span><span class="n">Item</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">filter</span><span class="p">(</span><span class="n">is_deleted</span><span class="o">=</span><span class="sh">"</span><span class="s">N</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">get_queryset</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nf">super</span><span class="p">().</span><span class="nf">get_queryset</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">get_serializer_class</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">method</span> <span class="o">==</span> <span class="sh">'</span><span class="s">GET</span><span class="sh">'</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">ItemSerializer</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">method</span> <span class="o">==</span> <span class="sh">'</span><span class="s">POST</span><span class="sh">'</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">ItemCreateSerializer</span>
    
    <span class="k">def</span> <span class="nf">filter_queryset</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">queryset</span><span class="p">):</span>
        <span class="k">if</span> <span class="sh">'</span><span class="s">name</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">query_params</span><span class="p">:</span>
            <span class="n">name</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">query_params</span><span class="p">[</span><span class="sh">'</span><span class="s">name</span><span class="sh">'</span><span class="p">]</span>
            <span class="k">return</span> <span class="n">queryset</span><span class="p">.</span><span class="nf">filter</span><span class="p">(</span><span class="nc">Q</span><span class="p">(</span><span class="n">name__icontains</span><span class="o">=</span><span class="n">name</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">queryset</span>
    
    <span class="k">def</span> <span class="nf">get_serializer_context</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">method</span> <span class="o">==</span> <span class="sh">'</span><span class="s">POST</span><span class="sh">'</span><span class="p">:</span>
            <span class="n">context</span> <span class="o">=</span> <span class="nf">super</span><span class="p">().</span><span class="nf">get_serializer_context</span><span class="p">()</span>
            <span class="n">context</span><span class="p">[</span><span class="sh">"</span><span class="s">cate_id</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">category</span><span class="p">()</span>
            <span class="k">return</span> <span class="n">context</span>

    <span class="k">def</span> <span class="nf">category</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">reqData</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">data</span>
        <span class="k">if</span> <span class="sh">"</span><span class="s">cate_id</span><span class="sh">"</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">reqData</span><span class="p">:</span>
            <span class="k">return</span> 
        <span class="n">categoryObject</span> <span class="o">=</span> <span class="nf">get_object_or_404</span><span class="p">(</span><span class="n">Category</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="n">reqData</span><span class="p">[</span><span class="sh">"</span><span class="s">cate_id</span><span class="sh">"</span><span class="p">])</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">check_object_permissions</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">request</span><span class="p">,</span> <span class="n">categoryObject</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">categoryObject</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">queryset</code>: <code class="language-plaintext highlighter-rouge">get_queryset()</code> 메서드에서 불러올 쿼리셋을 정적으로 지정합니다.(외부에 의해 수정되지 않습니다.)</li>
  <li><code class="language-plaintext highlighter-rouge">filter_queryset</code>: url query parameter을 parsing하여 <code class="language-plaintext highlighter-rouge">queryset</code>에 필터링을 추가합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">get_serializer_context</code>: POST 요청시, <code class="language-plaintext highlighter-rouge">create</code> serializer 동작 수행시 category instance가 필요하기 때문에, 해당 작업을 미리 해줄 수 있습니다.</li>
</ul>]]></content><author><name>Yeham Kim</name></author><category term="Django Strategy" /><summary type="html"><![CDATA[참고: mynghn님 블로그 Generic view의 동작방식 DRF 기본 클래스인 APIView에서는 사용자가 요청부터 응답까지의 구현을 처리할 수 있습니다. Generic view에서는 CRUD 패턴에 대한 구현을 미리 정해놓습니다. generic view는 네가지 속성을 통해 API 동작을 결정합니다. ``` authentication_classes: 요청자의 가입 및 로그인 여부를 식별합니다. .get_authenticators(self) permission_classes: API 요청에 대한 요청자의 권한을 검증합니다. .get_permissions(self) queryset: 클래스 내부에서 사용하기 위한 기준이 되는 queryset을 설정합니다. .get_queryset(self): 데이터를 정적으로(미리 데이터의 바운더리를 정해두고) 불러올 때 사용합니다. .filter_queryset(self, queryset): 데이터를 동적으로(클라이언트의 요청에 따라 다른 값을 가져오도록) 불러올 때 사용합니다. serializer_class: request와 response 스펙을 정의하는 serializer를 설정합니다. .get_serializer_class(self) .get_serializer_context(self) .get_serializer(self, …) ``` queryset에서, soft-deleted 요소를 조회하면, queryset = Item.objects.filter(is_deleted='N')과 같이 처리합니다. (정적 필터 적용) filter_queryset에서는 url의 query를 parsing하여 object manager의 filter를 추가할 수 있습니다.]]></summary></entry><entry><title type="html">[Django] API를 어떻게 명세하여 사용할까?</title><link href="http://localhost:4000/django%20strategy/django-spectacular/" rel="alternate" type="text/html" title="[Django] API를 어떻게 명세하여 사용할까?" /><published>2023-05-27T20:05:07+09:00</published><updated>2023-05-27T20:05:07+09:00</updated><id>http://localhost:4000/django%20strategy/django-spectacular</id><content type="html" xml:base="http://localhost:4000/django%20strategy/django-spectacular/"><![CDATA[<h3 id="open-api와-oas-swagger">Open API와 OAS, Swagger</h3>
<p><strong>Open API란?</strong></p>
<ul>
  <li>Open API는 누구나 사용할 수 있도록 endpoint가 개방된 API를 의미합니다.</li>
  <li>OpenAPI Specification(OAS)는 OpenAPI(띄어쓰기 없음)이 표기하기도 하며, RESTful 형식의 API 정의된 규약에 따라 json이나 yaml로 표현하는 방식을 의미합니다.</li>
  <li>직접 소스코드나 문서를 보지 않더라도 서비스를 이해할 수 있다는 장점이 있습니다.</li>
</ul>

<p><strong>Swagger란?</strong></p>
<ul>
  <li>2010년대 초 Tam Wordnik이 개발하기 시작하여, 그의 회사 자체 API용 UI로 개발되었다가 SmartBear에서 인수했습니다.</li>
  <li>2015년대 말 Linux Foundation의 후원으로 OpenAPI Initiative에 Swagger를 기부하며 OpenAPI Specification으로 이름을 변경합니다.</li>
  <li>현재, OpenAPI를 실행하기위한 도구로써의 의미로 사용됩니다.</li>
  <li>Swagger Editor: 브라우저 기반의 편집기로, OpenAPI 스펙을 쉽게 작성할 수 있도록 돕습니다.</li>
  <li>Swagger UI: API test가 가능한 OpenAPI 스펙 문서</li>
  <li>Swagger Codegen: 서버나 클라이언트가 stub code를 OpenAPI 스펙에 맞게 생성</li>
</ul>

<p><strong>OpenAPI 2.0과 OpenAPI 3.0의 차이</strong></p>
<ul>
  <li>2.0에서는 endpoint url을 host, basePath, schemes로 정의했지만, 3.0에서는 멀티 URL을 지원하고, 각 url마다 username, port, basepath 필드를 가집니다.</li>
  <li>2.0에서는 특정 Path에서 중복되는 값이 있더라도 일일이 서술해줘야하는 반면, 3.0에서는 Component로 처리하여 중복부분을 변수화 할 수 있습니다.</li>
</ul>

<p><strong>OAS의 궁극적인 목표</strong></p>
<ul>
  <li>API 문서와 API UI는 서로 다른 프로젝트입니다. 예를 들어, Swagger-UI는 Swagger 프로젝트 중 일부일 뿐이고, API 문서는 json/yaml로 나타낼 수 있는 데이터 덩어리에 불과합니다.</li>
  <li>Swagger-UI와 Redoc은 보기 편하게 만들어진 API 문서 User Interface입니다.</li>
  <li>OAS는 UI를 만드는 것만을 목표로 하지는 않습니다. Client Side와 Server Side 간 API Client SDK와 관련된 모든 것들을 자동화하는 것입니다.</li>
  <li>API 문서를 명확하게 명세해야하는 이유는, 명세를 하는 것만으로도 Client Side에 필요한 소스코드를 역생성하기 위한 것입니다. 이를 위한 프로젝트가 <code class="language-plaintext highlighter-rouge">Swagger Codegen</code>입니다.</li>
</ul>

<p><strong>drf-spectacular를 사용하는 이유</strong></p>
<ul>
  <li>많이 사용되는 drf-yasg의 경우, OpenAPI3.0을 지원하지 않습니다.</li>
  <li>swagger UI의 버전과 설정값들이 drf-spectacular의 버전에 의존하지 않습니다.</li>
  <li>swagger UI 자체에서 제공하는 UI 커스터마이징 옵션들을 자유롭게 조절할 수 있습니다.</li>
  <li>example object를 다양하게 선언할 수 있습니다.</li>
</ul>

<hr />

<h3 id="drf-spectacular-사용방법">drf-spectacular 사용방법</h3>

<p>공식문서: https://drf-spectacular.readthedocs.io/en/latest/</p>

<p><code class="language-plaintext highlighter-rouge">@extend_schema_view</code></p>
<ul>
  <li>클래스 단위의 데코레이터로, 하나의 ViewSet에 속한 method들의 문서화를 커스터마이징 할 때 사용합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">@extend_schema</code>보다 우선순위를 가집니다.</li>
  <li>지정할 수 있는 <code class="language-plaintext highlighter-rouge">view_name</code>은 기본적으로 <code class="language-plaintext highlighter-rouge">list, retrieve, create, update, delete</code>가 있습니다.</li>
  <li><code class="language-plaintext highlighter-rouge">@action</code>을 통해 생성한 커스텀 메서드의 메서드 또한 <code class="language-plaintext highlighter-rouge">view_name</code>에 등록 가능합니다.</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">@extend_schema</code></p>
<ul>
  <li>메서드 단위의 데코레이터로 가장 핵심이 되는 데코레이터입니다.</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">@extend_schema_serializer</code></p>
<ul>
  <li>serializer 자체의 커스텀 스키마를 원하는 경우에 사용할 수 있습니다.</li>
  <li>적용 우선순위는 method -&gt; viewset -&gt; serializer 순서입니다.</li>
</ul>

<p><strong>사용 예시</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">views.py</code>에서 <code class="language-plaintext highlighter-rouge">@extend_schema_view</code>를 설정하여 공통적으로 적용할 수 있는 설정 항목들을 적용합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">@extend_schema</code>를 통해 특정 메서드(예시에서는 create)에 대한 설정항목만 따로 적용합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">@extend_schema_serializer</code> 항목을 통해 노출하지 않고자 하는 필드를 기입합니다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># views.py
</span><span class="kn">from</span> <span class="n">django.contrib.auth.models</span> <span class="kn">import</span> <span class="n">User</span>
<span class="kn">from</span> <span class="n">django.http</span> <span class="kn">import</span> <span class="n">HttpResponse</span>
<span class="kn">from</span> <span class="n">drf_spectacular.types</span> <span class="kn">import</span> <span class="n">OpenApiTypes</span>
<span class="kn">from</span> <span class="n">drf_spectacular.utils</span> <span class="kn">import</span> <span class="n">OpenApiExample</span><span class="p">,</span> <span class="n">OpenApiParameter</span><span class="p">,</span> <span class="n">extend_schema_view</span>
<span class="kn">from</span> <span class="n">drf_spectacular.utils</span> <span class="kn">import</span> <span class="n">extend_schema</span>
<span class="kn">from</span> <span class="n">rest_framework.decorators</span> <span class="kn">import</span> <span class="n">action</span>
<span class="kn">from</span> <span class="n">rest_framework.request</span> <span class="kn">import</span> <span class="n">Request</span>
<span class="kn">from</span> <span class="n">rest_framework.response</span> <span class="kn">import</span> <span class="n">Response</span>
<span class="kn">from</span> <span class="n">rest_framework.viewsets</span> <span class="kn">import</span> <span class="n">ModelViewSet</span>
<span class="kn">from</span> <span class="n">rest_framework</span> <span class="kn">import</span> <span class="n">serializers</span><span class="p">,</span> <span class="n">status</span>
<span class="kn">from</span> <span class="n">test_app.serializers</span> <span class="kn">import</span> <span class="n">CustomUserSerializer</span><span class="p">,</span> <span class="n">UserSerializer</span>
<span class="kn">from</span> <span class="n">test_app.schemas</span> <span class="kn">import</span> <span class="n">USER_QUERY_PARAM_USERNAME_EXAMPLES</span><span class="p">,</span> <span class="n">USER_QUERY_PARAM_DATE_JOINED_EXAMPLES</span><span class="p">,</span> <span class="n">USER_CREATE_EXAMPLES</span>

<span class="nd">@extend_schema_view</span><span class="p">(</span>
    <span class="nb">list</span><span class="o">=</span><span class="nf">extend_schema</span><span class="p">(</span>
        <span class="n">summary</span><span class="o">=</span><span class="sh">"</span><span class="s">사용자들 리스트를 조회합니다.</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">tags</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">사용자</span><span class="sh">"</span><span class="p">],</span>
        <span class="n">parameters</span><span class="o">=</span><span class="p">[</span>
            <span class="nc">OpenApiParameter</span><span class="p">(</span>
                <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">username</span><span class="sh">"</span><span class="p">,</span>
                <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Filter by username</span><span class="sh">"</span><span class="p">,</span>
                <span class="nb">type</span><span class="o">=</span><span class="n">OpenApiTypes</span><span class="p">.</span><span class="n">STR</span><span class="p">,</span>
                <span class="n">location</span><span class="o">=</span><span class="n">OpenApiParameter</span><span class="p">.</span><span class="n">QUERY</span><span class="p">,</span>
                <span class="n">examples</span><span class="o">=</span> <span class="n">USER_QUERY_PARAM_USERNAME_EXAMPLES</span>
            <span class="p">),</span>
            <span class="nc">OpenApiParameter</span><span class="p">(</span>
                <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">date_joined</span><span class="sh">"</span><span class="p">,</span>
                <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Filter by release date</span><span class="sh">"</span><span class="p">,</span>
                <span class="nb">type</span><span class="o">=</span><span class="n">OpenApiTypes</span><span class="p">.</span><span class="n">DATE</span><span class="p">,</span>
                <span class="n">location</span><span class="o">=</span><span class="n">OpenApiParameter</span><span class="p">.</span><span class="n">QUERY</span><span class="p">,</span>
                <span class="n">examples</span><span class="o">=</span> <span class="n">USER_QUERY_PARAM_DATE_JOINED_EXAMPLES</span>
            <span class="p">),</span>
        <span class="p">],</span>
    <span class="p">),</span>
    <span class="n">custom_api</span><span class="o">=</span><span class="nf">extend_schema</span><span class="p">(</span>
        <span class="n">summary</span><span class="o">=</span><span class="sh">"</span><span class="s">@action 데코레이터로 생성한 커스텀 API</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">tags</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">사용자</span><span class="sh">"</span><span class="p">],</span>
        <span class="n">request</span><span class="o">=</span><span class="n">UserSerializer</span><span class="p">,</span>
        <span class="n">responses</span><span class="o">=</span><span class="p">{</span><span class="n">status</span><span class="p">.</span><span class="n">HTTP_200_OK</span><span class="p">:</span> <span class="n">UserSerializer</span><span class="p">},</span>
    <span class="p">),</span>
<span class="p">)</span>
<span class="k">class</span> <span class="nc">UserViewSet</span><span class="p">(</span><span class="n">ModelViewSet</span><span class="p">):</span>
    <span class="n">queryset</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">all</span><span class="p">()</span>
    <span class="n">serializer_class</span> <span class="o">=</span> <span class="n">UserSerializer</span>

    <span class="nd">@extend_schema</span><span class="p">(</span>
        <span class="n">tags</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">사용자</span><span class="sh">"</span><span class="p">],</span>
        <span class="n">summary</span><span class="o">=</span><span class="sh">"</span><span class="s">새로운 사용자를 추가합니다.</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">examples</span> <span class="o">=</span> <span class="n">USER_CREATE_EXAMPLES</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="k">def</span> <span class="nf">create</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">request</span><span class="p">:</span> <span class="n">Request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Response</span><span class="p">:</span>
        <span class="n">response</span><span class="p">:</span> <span class="n">HttpResponse</span> <span class="o">=</span> <span class="nf">super</span><span class="p">().</span><span class="nf">create</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">response</span>

    <span class="nd">@action</span><span class="p">(</span><span class="n">detail</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">url_path</span><span class="o">=</span><span class="sh">"</span><span class="s">action-api</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">custom_api</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">request</span><span class="p">:</span> <span class="n">Request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="k">return</span> <span class="nc">Response</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">ok</span><span class="sh">"</span><span class="p">})</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># serializers.py
</span><span class="kn">from</span> <span class="n">django.contrib.auth.models</span> <span class="kn">import</span> <span class="n">User</span>
<span class="kn">from</span> <span class="n">rest_framework</span> <span class="kn">import</span> <span class="n">serializers</span><span class="p">,</span> <span class="n">status</span>
<span class="kn">from</span> <span class="n">drf_spectacular.utils</span> <span class="kn">import</span> <span class="n">OpenApiExample</span><span class="p">,</span> <span class="n">extend_schema_serializer</span>
<span class="kn">from</span> <span class="n">rest_framework.serializers</span> <span class="kn">import</span> <span class="n">ModelSerializer</span>

<span class="nd">@extend_schema_serializer</span><span class="p">(</span>
    <span class="n">exclude_fields</span><span class="o">=</span><span class="p">(</span><span class="sh">"</span><span class="s">password</span><span class="sh">"</span><span class="p">,),</span>  
    <span class="n">examples</span><span class="o">=</span><span class="p">[</span>
        <span class="nc">OpenApiExample</span><span class="p">(</span>
            <span class="sh">"</span><span class="s">Valid example 1</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">summary</span><span class="o">=</span><span class="sh">"</span><span class="s">short summary</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">longer description</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">value</span><span class="o">=</span><span class="p">{</span>
                <span class="sh">"</span><span class="s">is_superuser</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">username</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">first_name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">last_name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">email</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user@example.com</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">is_staff</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">is_active</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">date_joined</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">2021-04-18 04:14:30</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">user_type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">customer</span><span class="sh">"</span><span class="p">,</span>
            <span class="p">},</span>
            <span class="n">request_only</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
            <span class="n">response_only</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>  
        <span class="p">),</span>
    <span class="p">],</span>
<span class="p">)</span>
<span class="k">class</span> <span class="nc">UserSerializer</span><span class="p">(</span><span class="n">serializers</span><span class="p">.</span><span class="n">ModelSerializer</span><span class="p">):</span>
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">User</span>
        <span class="n">depth</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="n">fields</span> <span class="o">=</span> <span class="sh">"</span><span class="s">__all__</span><span class="sh">"</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># schemas.py
</span><span class="kn">from</span> <span class="n">drf_spectacular.utils</span> <span class="kn">import</span> <span class="n">OpenApiExample</span><span class="p">,</span> <span class="n">OpenApiParameter</span><span class="p">,</span> <span class="n">extend_schema_view</span>

<span class="n">USER_QUERY_PARAM_USERNAME_EXAMPLES</span> <span class="o">=</span> <span class="p">[</span>
    <span class="nc">OpenApiExample</span><span class="p">(</span>
        <span class="sh">"</span><span class="s">username 필드 필터링을 위한 query parameter 예시입니다.</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">summary</span><span class="o">=</span><span class="sh">"</span><span class="s">example username 1</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">첫 번째 유저명입니다.</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">value</span><span class="o">=</span><span class="sh">"</span><span class="s">김예함</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">),</span>
    <span class="nc">OpenApiExample</span><span class="p">(</span>
        <span class="sh">"</span><span class="s">username 필드 필터링을 위한 query parameter 예시입니다.</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">summary</span><span class="o">=</span><span class="sh">"</span><span class="s">example username 2</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">두 번째 유저명입니다.</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">value</span><span class="o">=</span><span class="sh">"</span><span class="s">김예함</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">),</span>
<span class="p">]</span>

<span class="n">USER_QUERY_PARAM_DATE_JOINED_EXAMPLES</span> <span class="o">=</span> <span class="p">[</span>
    <span class="nc">OpenApiExample</span><span class="p">(</span>
        <span class="sh">"</span><span class="s">date_joined 필드 필터링을 위한 query parameter 예시입니다.</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">summary</span><span class="o">=</span><span class="sh">"</span><span class="s">example date_joined 1</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">첫 번째 가입일입니다.</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">value</span><span class="o">=</span><span class="sh">"</span><span class="s">1995-07-08</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">),</span>
    <span class="nc">OpenApiExample</span><span class="p">(</span>
        <span class="sh">"</span><span class="s">date_joined 필드 필터링을 위한 query parameter 예시입니다.</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">summary</span><span class="o">=</span><span class="sh">"</span><span class="s">example date_joined 2</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">두 번째 가입일입니다.</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">value</span><span class="o">=</span><span class="sh">"</span><span class="s">1995-07-09</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">),</span>
<span class="p">]</span>

<span class="n">USER_CREATE_EXAMPLES</span> <span class="o">=</span> <span class="p">[</span>
    <span class="nc">OpenApiExample</span><span class="p">(</span>
        <span class="n">request_only</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
        <span class="n">summary</span><span class="o">=</span><span class="sh">"</span><span class="s">성공적으로 생성하는 경우</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">success_example</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">value</span><span class="o">=</span><span class="p">{</span>
            <span class="sh">"</span><span class="s">username</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">yamkim</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">password</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">test123!</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">first_name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">YEHAM</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">last_name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">KIM</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">email</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user@example.com</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">},</span>
    <span class="p">),</span>
    <span class="nc">OpenApiExample</span><span class="p">(</span>
        <span class="n">request_only</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="c1"># 요청시에만 사용가능한 예제로 명시한다.
</span>        <span class="n">summary</span><span class="o">=</span><span class="sh">"</span><span class="s">비밀번호 너무 쉬움</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">invalid_example_too_easy_password</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">value</span><span class="o">=</span><span class="p">{</span>
            <span class="sh">"</span><span class="s">username</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">yamkim</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">password</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">1234</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">first_name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">YEHAM</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">last_name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">KIM</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">email</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user@example.com</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">},</span>
    <span class="p">),</span>
    <span class="nc">OpenApiExample</span><span class="p">(</span>
        <span class="n">request_only</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
        <span class="n">summary</span><span class="o">=</span><span class="sh">"</span><span class="s">이름 필수 입력</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">invalid_example_empty_name</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">value</span><span class="o">=</span><span class="p">{</span>
            <span class="sh">"</span><span class="s">username</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">root434</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">password</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">test123!</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">first_name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">last_name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">KIM</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">email</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user@example.com</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">},</span>
    <span class="p">),</span>
<span class="p">]</span>
</code></pre></div></div>

<h3 id="참고">참고</h3>
<ul>
  <li><a href="https://gruuuuu.github.io/programming/openapi/">gruuuuu님 블로그</a></li>
  <li><a href="https://techblog.yogiyo.co.kr/django-rest-framework-api-document-generator-feat-drf-spectacular-585fcabec404">요기요 테크 블로그</a></li>
</ul>]]></content><author><name>Yeham Kim</name></author><category term="Django Strategy" /><summary type="html"><![CDATA[Open API와 OAS, Swagger Open API란? Open API는 누구나 사용할 수 있도록 endpoint가 개방된 API를 의미합니다. OpenAPI Specification(OAS)는 OpenAPI(띄어쓰기 없음)이 표기하기도 하며, RESTful 형식의 API 정의된 규약에 따라 json이나 yaml로 표현하는 방식을 의미합니다. 직접 소스코드나 문서를 보지 않더라도 서비스를 이해할 수 있다는 장점이 있습니다.]]></summary></entry><entry><title type="html">Cs Database</title><link href="http://localhost:4000/cs-database/" rel="alternate" type="text/html" title="Cs Database" /><published>2023-05-26T00:00:00+09:00</published><updated>2023-05-26T00:00:00+09:00</updated><id>http://localhost:4000/cs-database</id><content type="html" xml:base="http://localhost:4000/cs-database/"><![CDATA[<h3 id="nosql">NoSQL</h3>
<p><strong>RDB의 단점은 무엇일까?</strong></p>
<ul>
  <li>스키마가 경직되어있고 변경에 유연하지 않기 때문에, 새로운 기능이 생성될 때마다 컬럼을 추가해야하여 스키마를 변경해야합니다.</li>
  <li>스키마 변경을 할 때마다, DB와 connection을 맺고 있는 server들에 영향을 미칠 수도 있습니다.</li>
  <li>결론적으로, RDB는 스키마를 생성하고, 그 스키마에 맞추어 데이터를 저장해야한다는(유연하지 않다는) 단점이 있습니다.</li>
  <li>RDB의 기본 철학은 중복제거를 허용하지 않는 것이기 때문에, 중복을 제거하기 위해 정규화를 진행하여 테이블을 분리합니다. 이 때, 데이터들을 함꼐 가져오기 위해서는 <code class="language-plaintext highlighter-rouge">JOIN</code>을 사용해야하고, DB의 CPU와 메모리를 많이 사용하게 됩니다.</li>
  <li>RDB는 사실 scale-out 하는데 있어, 유연한 DB는 아닙니다.</li>
  <li>transaction을 통한 ACID는 가능하지만, 이를 보장하려면 DB 서버의 performance에 좋지 않은 영향을 미치게 됩니다.Isolation을 보장하기 위해 전체적인 처리량(throughput - 시간당 처리할 수 있는 트랜잭션의 양)이 줄어든다는 단점이 있습니다.</li>
</ul>

<p><strong>NoSQL의 배경과 특징</strong>
<strong>배경</strong></p>
<ul>
  <li>인터넷 사용량이 늘어나고 글로벌 사용자가 늘어남에 따라, high-throughput이 요구되었습니다.</li>
  <li>기존과 다른 비정형 데이터가 증가하게 됨에 따라, 새로운 형태의 데이터가 발생합니다.</li>
  <li>Not only SQL: 기존의 SQL을 커버할 뿐만 아니라 그 외의 기능들도 커버합니다.
<strong>특징</strong></li>
  <li>flexible schema: 기존의 sql에서 지정된 스키마의 형식으로 데이터를 넣는 것이 아닌, JSON 객체 형식으로 데이터를 삽입합니다.</li>
  <li>이 때, schema에 대한 관리는 SQL처럼 RDBMS에서 해주는 것이 아닌 application 레벨에서 해주어야합니다.</li>
  <li>중복을 허용하므로써 <code class="language-plaintext highlighter-rouge">JOIN</code>을 회피합니다. 하지만, 중복된 데이터들이 모두 최신 데이터를 유지할 수 있도록 application 레벨에서 관리해야합니다.</li>
  <li>scale-out이 쉽기 때문에, 여러대의 서버(각각의 서버에 데이터를 나누어 저장합니다.)를 사용하여 하나의 클러스터를 구성합니다.</li>
  <li>RDB의 경우에는 서버가 나뉘게 되면 데이터도 분리되고, 각 데이터를 <code class="language-plaintext highlighter-rouge">JOIN</code>하기 위해 또한 추가적인 트래픽이 발생하게 될 것입니다.</li>
  <li>ACID의 일부를 포기하고 high-throughput, low-latency를 추구합니다. 따라서 안정성을 확보하기에는 불리하므로 금융 시스템 처리와 같이 Consistency가 중요한 환경에서 사용하기 조심스럽습니다.</li>
</ul>

<p><strong>Redis의 특징</strong></p>
<ul>
  <li>in-memory key-value database: 메모리를 사용하여 key-value 형태로 값을 저장하는 DB입니다. 보통 DB보다 메모리나 캐시로 많이 사용합니다.</li>
  <li>value의 data type: strings, lists, sets hashes, sorted sets 등 다양한 형태를 지원합니다.</li>
  <li>hash-based sharded cluster</li>
  <li>High Availability (replication, automatic failover)</li>
  <li>보통 Frontend에서 데이터를 요청하고, Backend Server에서 DB의 데이터를 받아옵니다. 트래픽이 많아짐에 따라 DB에 connection 하는 비용이 많이 들게 되므로 redis를 Backend Server와 DB Server 사이에 두어 캐싱하는데 많이 사용합니다.</li>
  <li>memory cache: 저장할 데이터를 key-value 형태로 저장하며 보관하는 시간을 같이 기록합니다. memory를 사용하기 때문에 DB에 속도가 비해 매우 빠릅니다.</li>
</ul>]]></content><author><name>Yeham Kim</name></author><summary type="html"><![CDATA[NoSQL RDB의 단점은 무엇일까? 스키마가 경직되어있고 변경에 유연하지 않기 때문에, 새로운 기능이 생성될 때마다 컬럼을 추가해야하여 스키마를 변경해야합니다. 스키마 변경을 할 때마다, DB와 connection을 맺고 있는 server들에 영향을 미칠 수도 있습니다. 결론적으로, RDB는 스키마를 생성하고, 그 스키마에 맞추어 데이터를 저장해야한다는(유연하지 않다는) 단점이 있습니다. RDB의 기본 철학은 중복제거를 허용하지 않는 것이기 때문에, 중복을 제거하기 위해 정규화를 진행하여 테이블을 분리합니다. 이 때, 데이터들을 함꼐 가져오기 위해서는 JOIN을 사용해야하고, DB의 CPU와 메모리를 많이 사용하게 됩니다. RDB는 사실 scale-out 하는데 있어, 유연한 DB는 아닙니다. transaction을 통한 ACID는 가능하지만, 이를 보장하려면 DB 서버의 performance에 좋지 않은 영향을 미치게 됩니다.Isolation을 보장하기 위해 전체적인 처리량(throughput - 시간당 처리할 수 있는 트랜잭션의 양)이 줄어든다는 단점이 있습니다.]]></summary></entry><entry><title type="html">[Django] 커스텀 유저 및 jwt는 어떤 방식으로 설정할까?</title><link href="http://localhost:4000/django%20strategy/django-auth/" rel="alternate" type="text/html" title="[Django] 커스텀 유저 및 jwt는 어떤 방식으로 설정할까?" /><published>2023-05-25T20:05:07+09:00</published><updated>2023-05-25T20:05:07+09:00</updated><id>http://localhost:4000/django%20strategy/django-auth</id><content type="html" xml:base="http://localhost:4000/django%20strategy/django-auth/"><![CDATA[<h1 id="custom-user-registration">Custom User Registration</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># requirements.txt
</span><span class="n">asgiref</span><span class="o">==</span><span class="mf">3.6</span><span class="p">.</span><span class="mi">0</span>
<span class="n">Django</span><span class="o">==</span><span class="mf">4.2</span><span class="p">.</span><span class="mi">1</span>
<span class="n">djangorestframework</span><span class="o">==</span><span class="mf">3.14</span><span class="p">.</span><span class="mi">0</span>
<span class="n">djangorestframework</span><span class="o">-</span><span class="n">simplejwt</span><span class="o">==</span><span class="mf">5.2</span><span class="p">.</span><span class="mi">2</span>
<span class="n">PyJWT</span><span class="o">==</span><span class="mf">2.7</span><span class="p">.</span><span class="mi">0</span>
<span class="n">pytz</span><span class="o">==</span><span class="mf">2023.3</span>
<span class="n">rest</span><span class="o">-</span><span class="n">framework</span><span class="o">-</span><span class="n">simplejwt</span><span class="o">==</span><span class="mf">0.0</span><span class="p">.</span><span class="mi">2</span>
<span class="n">sqlparse</span><span class="o">==</span><span class="mf">0.4</span><span class="p">.</span><span class="mi">4</span>
</code></pre></div></div>
<ul>
  <li>djangorestframework-simplejwt를 사용하여 개발합니다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># settings.py
</span>
<span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="sh">'</span><span class="s">django.contrib.admin</span><span class="sh">'</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">django.contrib.auth</span><span class="sh">'</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">django.contrib.contenttypes</span><span class="sh">'</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">django.contrib.sessions</span><span class="sh">'</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">django.contrib.messages</span><span class="sh">'</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">django.contrib.staticfiles</span><span class="sh">'</span><span class="p">,</span>

    <span class="c1"># restframework
</span>    <span class="sh">"</span><span class="s">rest_framework</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">rest_framework_simplejwt</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">rest_framework_simplejwt.token_blacklist</span><span class="sh">"</span><span class="p">,</span>

    <span class="c1"># custom apps
</span>    <span class="sh">"</span><span class="s">members</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">core</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">mytest</span><span class="sh">"</span><span class="p">,</span>
<span class="p">]</span>

<span class="bp">...</span>

<span class="c1"># Settings for JWT Authentication
</span><span class="n">SIMPLE_JWT</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">ACCESS_TOKEN_LIFETIME</span><span class="sh">"</span><span class="p">:</span> <span class="nf">timedelta</span><span class="p">(</span><span class="n">hours</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span>
    <span class="sh">"</span><span class="s">REFRESH_TOKEN_LIFETIME</span><span class="sh">"</span><span class="p">:</span> <span class="nf">timedelta</span><span class="p">(</span><span class="n">days</span><span class="o">=</span><span class="mi">7</span><span class="p">),</span>
<span class="p">}</span>

<span class="n">REST_FRAMEWORK</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">DEFAULT_AUTHENTICATION_CLASSES</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span>
        <span class="sh">"</span><span class="s">rest_framework_simplejwt.authentication.JWTAuthentication</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">),</span>
<span class="p">}</span>

<span class="n">AUTH_USER_MODEL</span> <span class="o">=</span> <span class="sh">'</span><span class="s">members.Member</span><span class="sh">'</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">AUTH_USER_MODEL</code>을 <code class="language-plaintext highlighter-rouge">members.Member</code>로 설정하여, 해당 모델이 Django 기본 user 모델인 <code class="language-plaintext highlighter-rouge">auth_user</code> 테이블을 대체하도록 합니다.</li>
  <li>아래와 같이 django app을 구성하여 진행합니다.
```
code/
    <ul>
      <li>cores/
        <ul>
          <li>models.py</li>
          <li>serializers.py
…</li>
        </ul>
      </li>
      <li>members/
        <ul>
          <li>models.py</li>
          <li>urls/
            <ul>
              <li>auth.py</li>
              <li>members.py</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>myproject/
        <ul>
          <li>urls/
```</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">cores</code> 앱은 다른 앱들이 상속 받아서 사용할 만한 핵심 기능을 담당합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">members</code> 앱은 클라이언트의 회원가입/인증 관련 작업을 위한 도메인입니다.</li>
</ul>

<p><strong>Custom user model setting</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># members/models.py
</span><span class="kn">from</span> <span class="n">core.models</span> <span class="kn">import</span> <span class="n">BaseModel</span>
<span class="kn">from</span> <span class="n">django.contrib.auth.models</span> <span class="kn">import</span> <span class="n">AbstractUser</span><span class="p">,</span> <span class="n">BaseUserManager</span>
<span class="kn">from</span> <span class="n">django.core.validators</span> <span class="kn">import</span> <span class="n">RegexValidator</span>
<span class="kn">from</span> <span class="n">django.db</span> <span class="kn">import</span> <span class="n">models</span>

<span class="k">class</span> <span class="nc">MemberManager</span><span class="p">(</span><span class="n">BaseUserManager</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">createMember</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">phone</span><span class="p">,</span> <span class="n">password</span><span class="p">):</span>
        <span class="n">member</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">model</span><span class="p">(</span><span class="n">phone</span><span class="o">=</span><span class="n">phone</span><span class="p">)</span>
        <span class="n">member</span><span class="p">.</span><span class="nf">set_password</span><span class="p">(</span><span class="n">password</span><span class="p">)</span>
        <span class="n">member</span><span class="p">.</span><span class="nf">save</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">member</span>

<span class="k">class</span> <span class="nc">Member</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">,</span> <span class="n">AbstractUser</span><span class="p">):</span>
    <span class="n">username</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="n">phone</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="nc">CharField</span><span class="p">(</span>
        <span class="n">unique</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
        <span class="n">max_length</span><span class="o">=</span><span class="mi">11</span><span class="p">,</span>
        <span class="n">validators</span><span class="o">=</span><span class="p">[</span>
            <span class="nc">RegexValidator</span><span class="p">(</span>
                <span class="sa">r</span><span class="sh">"</span><span class="s">^01[016789][0-9]{7,8}$</span><span class="sh">"</span><span class="p">,</span>
                <span class="n">message</span><span class="o">=</span><span class="sh">"</span><span class="s">This phone number format is invalid.</span><span class="sh">"</span><span class="p">,</span>
            <span class="p">)</span>
        <span class="p">]</span>
    <span class="p">)</span>
    <span class="n">objects</span> <span class="o">=</span> <span class="nc">MemberManager</span><span class="p">()</span>

    <span class="n">USERNAME_FIELD</span> <span class="o">=</span> <span class="sh">"</span><span class="s">phone</span><span class="sh">"</span>

    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">managed</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="n">db_table</span> <span class="o">=</span> <span class="sh">'</span><span class="s">members</span><span class="sh">'</span>
</code></pre></div></div>
<ul>
  <li>Django의 기본 user 모델은 <code class="language-plaintext highlighter-rouge">username</code> 필드가 아이디를 의미합니다. 구현할 간단한 커스텀 유저 모델에서는 핸드폰 번호가 아이디를 대체합니다.</li>
</ul>

<p><strong>Custom user serializer setting</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># members/serializers.py
</span><span class="kn">from</span> <span class="n">rest_framework</span> <span class="kn">import</span> <span class="n">serializers</span>
<span class="kn">from</span> <span class="n">core.serializers</span> <span class="kn">import</span> <span class="n">CreateSerializer</span>

<span class="kn">from</span> <span class="n">members.models</span> <span class="kn">import</span> <span class="n">Member</span>

<span class="k">class</span> <span class="nc">MemberSerializer</span><span class="p">(</span><span class="n">serializers</span><span class="p">.</span><span class="n">ModelSerializer</span><span class="p">):</span>
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">Member</span>
        <span class="n">fields</span> <span class="o">=</span> <span class="p">[</span>
            <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">phone</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">]</span>
        <span class="n">read_only_fields</span> <span class="o">=</span> <span class="n">fields</span>

<span class="k">class</span> <span class="nc">MemberCreateSerializer</span><span class="p">(</span><span class="n">CreateSerializer</span><span class="p">):</span>
    <span class="n">representation_serializer_class</span> <span class="o">=</span> <span class="n">MemberSerializer</span>
    <span class="n">password2</span> <span class="o">=</span> <span class="n">serializers</span><span class="p">.</span><span class="nc">CharField</span><span class="p">(</span><span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">Member</span>
        <span class="n">fields</span> <span class="o">=</span> <span class="p">(</span>
            <span class="sh">"</span><span class="s">phone</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">password</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">password2</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">validate</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="n">password</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">password</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">password2</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">password2</span><span class="sh">'</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">password</span> <span class="o">!=</span> <span class="n">password2</span><span class="p">:</span>
            <span class="k">raise</span> <span class="n">serializers</span><span class="p">.</span><span class="nc">ValidationError</span><span class="p">({</span><span class="sh">"</span><span class="s">password2</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">This is different with password.</span><span class="sh">"</span><span class="p">})</span>
        <span class="k">return</span> <span class="n">data</span>
    
    <span class="k">def</span> <span class="nf">create</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">validated_data</span><span class="p">):</span>
        <span class="n">validated_data</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="sh">'</span><span class="s">password2</span><span class="sh">'</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">Member</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">createMember</span><span class="p">(</span><span class="o">**</span><span class="n">validated_data</span><span class="p">)</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">MemberCreateSerializer</code>은 회원가입을 위해 사용하는 serializer로, 비밀번호 확인 기능을 포함합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">MemberSerializer</code>에서 재사용 가능한 field를 가져오기 위해</li>
  <li><code class="language-plaintext highlighter-rouge">core.serializer.CreateSerializer</code>의 역할은 다음과 같습니다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">to_representation</code> 메서드를 이용해, 데이터를 직렬화 하거나, customize하여 필드 값을 원하는 형태로 변환할 수 있습니다.</li>
      <li><code class="language-plaintext highlighter-rouge">represntation_serializer_class</code>를 오버라이드 하여 <code class="language-plaintext highlighter-rouge">to_representation</code> 메서드에서 사용할 serializer를 선정할 수 있게 합니다.</li>
      <li>MemberCreateSerializer.create() 작업을 마치고, 생성된 instance의 data 부분만 추출하여 serialize 후 반환합니다. 생성 후 추가 작업이 필요하다면,
```python
        <h1 id="coreserializerspy">core/serializers.py</h1>
        <p>from rest_framework import serializers</p>
      </li>
    </ul>

    <p>class CreateSerializer(serializers.ModelSerializer):
    representation_serializer_class = None</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def to_representation(self, instance):
    return self.representation_serializer_class(instance=instance).data ```
</code></pre></div>    </div>
  </li>
</ul>

<p><strong>Custom user controller and router setting</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># members/views.py
</span><span class="kn">from</span> <span class="n">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span>

<span class="c1"># Create your views here.
</span><span class="kn">from</span> <span class="n">rest_framework.generics</span> <span class="kn">import</span> <span class="n">CreateAPIView</span>
<span class="kn">from</span> <span class="n">rest_framework.permissions</span> <span class="kn">import</span> <span class="n">AllowAny</span>
<span class="kn">from</span> <span class="n">rest_framework_simplejwt</span> <span class="kn">import</span> <span class="n">views</span> <span class="k">as</span> <span class="n">jwt_views</span>

<span class="kn">from</span> <span class="n">members.serializers</span> <span class="kn">import</span> <span class="n">MemberCreateSerializer</span>

<span class="k">class</span> <span class="nc">MemberCreateAPIView</span><span class="p">(</span><span class="n">CreateAPIView</span><span class="p">):</span>
    <span class="n">permission_classes</span> <span class="o">=</span> <span class="p">[</span><span class="n">AllowAny</span><span class="p">]</span>
    <span class="n">serializer_class</span> <span class="o">=</span> <span class="n">MemberCreateSerializer</span>

<span class="k">class</span> <span class="nc">TokenCreateAPIView</span><span class="p">(</span><span class="n">jwt_views</span><span class="p">.</span><span class="n">TokenObtainPairView</span><span class="p">):</span>
    <span class="k">pass</span>
<span class="k">class</span> <span class="nc">TokenRefreshAPIView</span><span class="p">(</span><span class="n">jwt_views</span><span class="p">.</span><span class="n">TokenRefreshView</span><span class="p">):</span>
    <span class="k">pass</span>
<span class="k">class</span> <span class="nc">TokenBlackListAPIView</span><span class="p">(</span><span class="n">jwt_views</span><span class="p">.</span><span class="n">TokenBlacklistView</span><span class="p">):</span>
    <span class="k">pass</span>
</code></pre></div></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># members/urls/members.py
</span><span class="kn">from</span> <span class="n">django.urls</span> <span class="kn">import</span> <span class="n">path</span>
<span class="kn">from</span> <span class="n">members.views</span> <span class="kn">import</span> <span class="n">MemberCreateAPIView</span>

<span class="n">app_name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">members</span><span class="sh">"</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="nf">path</span><span class="p">(</span><span class="sh">""</span><span class="p">,</span> <span class="n">MemberCreateAPIView</span><span class="p">.</span><span class="nf">as_view</span><span class="p">(),</span> <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">create</span><span class="sh">"</span><span class="p">),</span>
<span class="p">]</span>
</code></pre></div></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># members/urls/auth.py
</span><span class="kn">from</span> <span class="n">django.urls</span> <span class="kn">import</span> <span class="n">path</span>
<span class="kn">from</span> <span class="n">members.views</span> <span class="kn">import</span> <span class="n">TokenBlackListAPIView</span><span class="p">,</span> <span class="n">TokenCreateAPIView</span><span class="p">,</span> <span class="n">TokenRefreshAPIView</span>

<span class="n">app_name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">auth</span><span class="sh">"</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="nf">path</span><span class="p">(</span><span class="sh">"</span><span class="s">tokens/</span><span class="sh">"</span><span class="p">,</span> <span class="n">TokenCreateAPIView</span><span class="p">.</span><span class="nf">as_view</span><span class="p">()),</span>
    <span class="nf">path</span><span class="p">(</span><span class="sh">"</span><span class="s">tokens/refresh/</span><span class="sh">"</span><span class="p">,</span> <span class="n">TokenRefreshAPIView</span><span class="p">.</span><span class="nf">as_view</span><span class="p">()),</span>
    <span class="nf">path</span><span class="p">(</span><span class="sh">"</span><span class="s">tokens/blacklist/</span><span class="sh">"</span><span class="p">,</span> <span class="n">TokenBlackListAPIView</span><span class="p">.</span><span class="nf">as_view</span><span class="p">()),</span>
<span class="p">]</span>
</code></pre></div></div>
<ul>
  <li>앞서 구축한 members.model과 members.serializer를 활용하여 새로운 멤버를 생성할 수 있도록 합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">rest_framework_simplejwt</code>에서 기본적으로 사용하는 controller를 통해 토큰 관련 API를 처리합니다.</li>
</ul>]]></content><author><name>Yeham Kim</name></author><category term="Django Strategy" /><summary type="html"><![CDATA[Custom User Registration]]></summary></entry><entry><title type="html">[Error Async] connection pool 제한에 따른 비동기 처리</title><link href="http://localhost:4000/error%20async/errorasync-promise-pool/" rel="alternate" type="text/html" title="[Error Async] connection pool 제한에 따른 비동기 처리" /><published>2023-05-18T23:00:07+09:00</published><updated>2023-05-18T23:00:07+09:00</updated><id>http://localhost:4000/error%20async/errorasync-promise-pool</id><content type="html" xml:base="http://localhost:4000/error%20async/errorasync-promise-pool/"><![CDATA[<h3 id="오류-내용">오류 내용</h3>
<ul>
  <li>상품의 상태(재고량 및 단종여부)를 주기적으로 업데이트하기 위해, 배치서버를 통해 국민클럽B2B(폐쇄몰)의 업데이트하는 배치 함수를 비동기적으로 실행시킵니다.</li>
  <li>하지만, DBCP를 고려하지 않은 설계로 인해, <strong>too many connections</strong> 오류와 함께 서버가 중단되었습니다.</li>
</ul>

<h3 id="해결-내용">해결 내용</h3>
<ul>
  <li>정해진 개수의 connection pool에만 접근 가능하도록 Sequelize option을 사용하여 connection pool을 제한하였습니다.</li>
  <li>제한된 connection pool에서 task들이 비동기적으로 실행될 수 있도록 promise-pool 모듈을 사용하였습니다.</li>
</ul>

<h3 id="기본적인-사용법">기본적인 사용법</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// promise_pool.js</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">PromisePool</span> <span class="p">}</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">@supercharge/promise-pool</span><span class="dl">'</span><span class="p">)</span>

<span class="kd">const</span> <span class="nx">excuteBasicPromisePool</span> <span class="o">=</span> <span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span>
        <span class="nx">results</span><span class="p">,</span> <span class="nx">errors</span>
    <span class="p">}</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">PromisePool</span><span class="p">.</span><span class="k">for</span><span class="p">(</span>
            <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
        <span class="p">).</span><span class="nf">process</span><span class="p">(</span><span class="k">async</span> <span class="nx">num</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">num</span> <span class="o">*</span> <span class="mi">2</span>
        <span class="p">})</span>
    <span class="k">return</span> <span class="nx">results</span>
<span class="p">}</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">excuteBasicPromisePool</span><span class="p">,</span>
<span class="p">};</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">promise-pool</code>의 기본적인 사용법은 위와 같습니다. <code class="language-plaintext highlighter-rouge">[1, 2, 3]</code> 배열에 2를 곱하여 반환하는 <code class="language-plaintext highlighter-rouge">excuteBasicPromisePool</code> 비동기함수를 작성합니다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// promise_pool.test.js</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">excuteBasicPromisePool</span> <span class="p">}</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./promise_pool</span><span class="dl">'</span><span class="p">);</span>

<span class="nf">test</span><span class="p">(</span><span class="dl">"</span><span class="s2">excuteBasicPromisePool</span><span class="dl">"</span><span class="p">,</span> <span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nf">expect</span><span class="p">(</span><span class="k">await</span> <span class="nf">excuteBasicPromisePool</span><span class="p">()).</span><span class="nf">toEqual</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">]);</span>
<span class="p">});</span>
</code></pre></div></div>
<ul>
  <li>jest를 통해 <code class="language-plaintext highlighter-rouge">excuteBasicPromisePool</code> 함수를 테스트합니다.</li>
</ul>

<h3 id="기본-promise-클래스와의-비교">기본 Promise 클래스와의 비교</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// utils.js</span>
<span class="kd">const</span> <span class="nx">users</span> <span class="o">=</span> <span class="p">[{</span>
    <span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">userA</span><span class="dl">'</span><span class="p">,</span>
<span class="p">},</span> <span class="p">{</span>
    <span class="na">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">userB</span><span class="dl">'</span><span class="p">,</span>
<span class="p">},</span> <span class="p">{</span>
    <span class="na">id</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">userC</span><span class="dl">'</span><span class="p">,</span>
<span class="p">},</span> <span class="p">{</span>
    <span class="na">id</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">userD</span><span class="dl">'</span><span class="p">,</span>
<span class="p">}]</span>

<span class="kd">function</span> <span class="nf">getUserByIdWithDelayTime</span><span class="p">(</span><span class="nx">param</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="nx">users</span><span class="p">.</span><span class="nf">filter</span><span class="p">(</span><span class="nx">obj</span> <span class="o">=&gt;</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="nx">param</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
            <span class="nf">resolve</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span>
        <span class="p">},</span> <span class="nx">param</span><span class="p">.</span><span class="nx">time</span><span class="p">)</span>
    <span class="p">})</span>
<span class="p">}</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">users</span><span class="p">,</span>
    <span class="nx">getUserByIdWithDelayTime</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>
<ul>
  <li>test에서 사용하기 위한 utility 파일에 <code class="language-plaintext highlighter-rouge">getUserByIdWithDelayTime()</code>를 생성합니다.<br />
  (id에 따른 user를 조회하는 함수)</li>
  <li>이 때, DB로 부터 값을 가지고 오는 것과 같이 시간이 소요되는 항목을 모킹하기 위해 delay time(데이터 조회 시간)을 함께 param 변수에 넣도록 합니다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// promise_pool.js</span>

<span class="kd">const</span> <span class="p">{</span> <span class="nx">PromisePool</span> <span class="p">}</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">@supercharge/promise-pool</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="p">{</span>
    <span class="nx">getUserByIdWithDelayTime</span><span class="p">,</span>
<span class="p">}</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./utils</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">_</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">lodash</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">measurePromiseAllWithChunk</span> <span class="o">=</span> <span class="k">async </span><span class="p">(</span><span class="nx">paramList</span><span class="p">,</span> <span class="nx">chunkSize</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// chunkAll를 각각의 chunk로 나누기</span>
    <span class="kd">const</span> <span class="nx">chunkSetAll</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nf">chunk</span><span class="p">(</span><span class="nx">paramList</span><span class="p">,</span> <span class="nx">chunkSize</span><span class="p">)</span>
    <span class="kd">const</span> <span class="nx">startTime</span> <span class="o">=</span> <span class="nx">performance</span><span class="p">.</span><span class="nf">now</span><span class="p">();</span>
    <span class="kd">let</span> <span class="nx">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">chunkSet</span> <span class="k">of</span> <span class="nx">chunkSetAll</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">chunkStartTime</span> <span class="o">=</span> <span class="nx">performance</span><span class="p">.</span><span class="nf">now</span><span class="p">();</span>
        <span class="k">await</span> <span class="nb">Promise</span><span class="p">.</span><span class="nf">all</span><span class="p">(</span><span class="nx">chunkSet</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="nx">param</span> <span class="o">=&gt;</span> <span class="nf">getUserByIdWithDelayTime</span><span class="p">(</span><span class="nx">param</span><span class="p">)));</span>
        <span class="kd">const</span> <span class="nx">chunkEndTime</span> <span class="o">=</span> <span class="nx">performance</span><span class="p">.</span><span class="nf">now</span><span class="p">();</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`measurePromiseAllWihChunk: </span><span class="p">${</span><span class="nx">idx</span><span class="o">++</span><span class="p">}</span><span class="s2"> - elapsed time: </span><span class="p">${</span><span class="nx">chunkEndTime</span> <span class="o">-</span> <span class="nx">chunkStartTime</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="kd">const</span> <span class="nx">endTime</span> <span class="o">=</span> <span class="nx">performance</span><span class="p">.</span><span class="nf">now</span><span class="p">();</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`measurePromiseAllWihChunk: total time: </span><span class="p">${</span><span class="nx">endTime</span> <span class="o">-</span> <span class="nx">startTime</span><span class="p">}</span><span class="s2"> ms`</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">measurePromisePoolWithConcurrency</span> <span class="o">=</span> <span class="k">async </span><span class="p">(</span><span class="nx">paramList</span><span class="p">,</span> <span class="nx">chunkSize</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">startTime</span> <span class="o">=</span> <span class="nx">performance</span><span class="p">.</span><span class="nf">now</span><span class="p">();</span>
    <span class="kd">const</span> <span class="p">{</span>
        <span class="nx">results</span><span class="p">,</span> <span class="nx">errors</span>
    <span class="p">}</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">PromisePool</span>
        <span class="p">.</span><span class="k">for</span><span class="p">(</span><span class="nx">paramList</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">withConcurrency</span><span class="p">(</span><span class="nx">chunkSize</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">process</span><span class="p">(</span><span class="nx">getUserByIdWithDelayTime</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">endTime</span> <span class="o">=</span> <span class="nx">performance</span><span class="p">.</span><span class="nf">now</span><span class="p">();</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`measurePromisePoolWihConcurrency time: </span><span class="p">${</span><span class="nx">endTime</span> <span class="o">-</span> <span class="nx">startTime</span><span class="p">}</span><span class="s2"> ms`</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">results</span>
<span class="p">}</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">measurePromiseAllWithChunk()</code>: <code class="language-plaintext highlighter-rouge">[{id: ?, time: ?}, ...]</code> 형태의 배열을 직접 chunk 단위로 나눈 chunk set을 각 set 마다 <code class="language-plaintext highlighter-rouge">Promise.all()</code>을 반복 수행합니다.</li>
  <li>예를 들어, chunk가 [1번, 2번], [3번, 4번, 5번] 형식으로 묶이게 된다면 두 번을 반복하여 각 chunk를 <code class="language-plaintext highlighter-rouge">Promise.all()</code>로 처리합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">measurePromisePoolWithConcurrency()</code>: 위 함수와 같은 역할을 하지만, 직접 chunk를 나누지 않고 <code class="language-plaintext highlighter-rouge">PromisePool</code> 클래스의 <code class="language-plaintext highlighter-rouge">withConcurrency()</code> 메서드를 사용합니다.</li>
</ul>

<h3 id="테스트-결과-분석">테스트 결과 분석</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// promise_pool.test.js</span>

<span class="kd">const</span> <span class="p">{</span>
    <span class="nx">measurePromiseAllWithChunk</span><span class="p">,</span>
    <span class="nx">measurePromisePoolWithConcurrency</span><span class="p">,</span>
<span class="p">}</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./promise_pool</span><span class="dl">'</span><span class="p">);</span>

<span class="nf">test</span><span class="p">(</span><span class="dl">"</span><span class="s2">measurePromiseAllWithChunk</span><span class="dl">"</span><span class="p">,</span> <span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">paramList</span> <span class="o">=</span> <span class="p">[{</span>
        <span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
        <span class="na">time</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>
    <span class="p">},</span> <span class="p">{</span>
        <span class="na">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
        <span class="na">time</span><span class="p">:</span> <span class="mi">300</span><span class="p">,</span>
    <span class="p">},</span> <span class="p">{</span>
        <span class="na">id</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
        <span class="na">time</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
    <span class="p">}]</span>

    <span class="k">await</span> <span class="nf">measurePromiseAllWithChunk</span><span class="p">(</span><span class="nx">paramList</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="p">})</span>

<span class="nf">test</span><span class="p">(</span><span class="dl">"</span><span class="s2">measurePromisePoolWithConcurrency</span><span class="dl">"</span><span class="p">,</span> <span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// 위와 동일</span>
    <span class="kd">const</span> <span class="nx">paramList</span> <span class="o">=</span> <span class="p">[{</span>
        <span class="p">...</span>
    <span class="p">}]</span>

    <span class="k">await</span> <span class="nf">measurePromisePoolWithConcurrency</span><span class="p">(</span><span class="nx">paramList</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="p">})</span>

<span class="cm">/** 출력 결과
measurePromiseAllWihChunk: 0 - elapsed time: 300.7714159488678
measurePromiseAllWihChunk: 1 - elapsed time: 200.38870894908905
measurePromiseAllWihChunk: total time: 505.5954999923706 ms

measurePromisePoolWihConcurrency time: 301.0168330669403 ms
*/</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Promise.all</code>을 사용하면, 100ms와 300ms가 같은 chunk로 묶여있기 때문에, 100ms task를 마치더라도 200ms task를 진행할 수 없었습니다. 따라서 300ms와 200ms의 합인 500ms 이상의 시간이 소요됩니다.</li>
  <li>하지만, <code class="language-plaintext highlighter-rouge">PromisePool</code>을 사용한 결과 100ms task가 끝나고 다른 chunk에 있는 200ms 바로 사용하였기 때문에, 300ms 정도의 시간만 소요되었습니다.</li>
</ul>

<h3 id="결과">결과</h3>
<ul>
  <li>task 처리시간을 미리 예측할 수 없는 상태에서 chunk를 나누어 각각의 set를 비동기처리하는 방식이 아닌, task가 끝날 때마다 다음 task를 수행하는 <code class="language-plaintext highlighter-rouge">PromisePool</code> 클래스를 사용하여 시간을 단축할 수 있었습니다.</li>
  <li>위의 간단한 예시를 통해 제한된 thread pool에서 chunk 단위로 순차적으로 진행되는 것을 확인하였고, 실제 서비스에 직접 적용한 결과 안전성을 확보할 수 있었습니다.</li>
</ul>

<h3 id="참고-자료">참고 자료</h3>
<ul>
  <li>이동욱님 블로그 자료: https://jojoldu.tistory.com/714</li>
  <li>promise-pool 모듈: https://github.com/supercharge/promise-pool</li>
  <li>dalseo님 async jest test: https://www.daleseo.com/jest-async/</li>
</ul>]]></content><author><name>Yeham Kim</name></author><category term="Error Async" /><summary type="html"><![CDATA[오류 내용 상품의 상태(재고량 및 단종여부)를 주기적으로 업데이트하기 위해, 배치서버를 통해 국민클럽B2B(폐쇄몰)의 업데이트하는 배치 함수를 비동기적으로 실행시킵니다. 하지만, DBCP를 고려하지 않은 설계로 인해, too many connections 오류와 함께 서버가 중단되었습니다.]]></summary></entry></feed>